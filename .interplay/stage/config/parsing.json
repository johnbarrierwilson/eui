{
	"components": {
		"ElasticEui_EuiScreenReaderLive": {
			"id": "ElasticEui_EuiScreenReaderLive",
			"name": "EuiScreenReaderLive",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiScreenReaderLive",
				"lib": "elasticEui"
			},
			"props": {
				"isActive": {
					"name": "isActive",
					"type": "boolean",
					"default": false,
					"description": "Whether to make screen readers aware of the content",
					"parent": "EuiScreenReaderLiveProps"
				},
				"children": {
					"name": "children",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Content for screen readers to announce",
					"parent": "EuiScreenReaderLiveProps"
				},
				"role": {
					"name": "role",
					"type": "string",
					"enum": [
						"alert",
						"alertdialog",
						"application",
						"article",
						"banner",
						"button",
						"cell",
						"checkbox",
						"columnheader",
						"combobox",
						"complementary",
						"contentinfo",
						"definition",
						"dialog",
						"directory",
						"document",
						"feed",
						"figure",
						"form",
						"grid",
						"gridcell",
						"group",
						"heading",
						"img",
						"link",
						"list",
						"listbox",
						"listitem",
						"log",
						"main",
						"marquee",
						"math",
						"menu",
						"menubar",
						"menuitem",
						"menuitemcheckbox",
						"menuitemradio",
						"navigation",
						"none",
						"note",
						"option",
						"presentation",
						"progressbar",
						"radio",
						"radiogroup",
						"region",
						"row",
						"rowgroup",
						"rowheader",
						"scrollbar",
						"search",
						"searchbox",
						"separator",
						"slider",
						"spinbutton",
						"status",
						"switch",
						"tab",
						"table",
						"tablist",
						"tabpanel",
						"term",
						"textbox",
						"timer",
						"toolbar",
						"tooltip",
						"tree",
						"treegrid",
						"treeitem"
					],
					"default": "status",
					"description": "role attribute for both live regions.  https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions#roles_with_implicit_live_region_attributes",
					"parent": "EuiScreenReaderLiveProps"
				},
				"aria-live": {
					"name": "aria-live",
					"type": "string",
					"enum": [
						"off",
						"assertive",
						"polite"
					],
					"description": "aria-live attribute for both live regions",
					"parent": "EuiScreenReaderLiveProps"
				}
			},
			"relativePath": "src/components/accessibility/screen_reader_live/screen_reader_live.tsx"
		},
		"ElasticEui_EuiScreenReaderOnly": {
			"id": "ElasticEui_EuiScreenReaderOnly",
			"name": "EuiScreenReaderOnly",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiScreenReaderOnly",
				"lib": "elasticEui"
			},
			"props": {
				"children": {
					"name": "children",
					"type": "array",
					"description": "ReactElement to render as this components content",
					"items": {
						"type": "Node"
					},
					"parent": "EuiScreenReaderOnlyProps"
				},
				"showOnFocus": {
					"name": "showOnFocus",
					"type": "boolean",
					"description": "For keyboard navigation, force content to display visually upon focus.",
					"parent": "EuiScreenReaderOnlyProps"
				}
			},
			"relativePath": "src/components/accessibility/screen_reader_only/screen_reader_only.tsx"
		},
		"ElasticEui_euiScreenReaderOnlyStyles": {
			"id": "ElasticEui_euiScreenReaderOnlyStyles",
			"name": "EuiScreenReaderOnlyStyles",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiScreenReaderOnlyStyles",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/components/accessibility/screen_reader_only/screen_reader_only.styles.ts"
		},
		"ElasticEui_EuiSkipLink": {
			"id": "ElasticEui_EuiSkipLink",
			"name": "EuiSkipLink",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiSkipLink",
				"lib": "elasticEui"
			},
			"required": [
				"destinationId"
			],
			"props": {
				"href": {
					"name": "href",
					"type": "string",
					"parent": "PropsForAnchor"
				},
				"download": {
					"name": "download",
					"type": "unknown",
					"parent": "AnchorHTMLAttributes"
				},
				"hrefLang": {
					"name": "hrefLang",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"media": {
					"name": "media",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"ping": {
					"name": "ping",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"rel": {
					"name": "rel",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"target": {
					"name": "target",
					"type": "string",
					"enum": [
						"_self",
						"_blank",
						"_parent",
						"_top"
					],
					"parent": "AnchorHTMLAttributes"
				},
				"referrerPolicy": {
					"name": "referrerPolicy",
					"type": "string",
					"enum": [
						"",
						"no-referrer",
						"no-referrer-when-downgrade",
						"origin",
						"origin-when-cross-origin",
						"same-origin",
						"strict-origin",
						"strict-origin-when-cross-origin",
						"unsafe-url"
					],
					"parent": "AnchorHTMLAttributes"
				},
				"position": {
					"name": "position",
					"type": "string",
					"enum": [
						"static",
						"fixed",
						"absolute"
					],
					"default": "static",
					"description": "Change the display position of the element when focused. If fixed, the link will be fixed to the top left of the viewport",
					"parent": "EuiSkipLinkInterface"
				},
				"destinationId": {
					"name": "destinationId",
					"type": "string",
					"description": "Typically an anchor id (e.g. a11yMainContent), the value provided will be prepended with a hash # and used as the link href",
					"parent": "EuiSkipLinkInterface"
				},
				"tabIndex": {
					"name": "tabIndex",
					"type": "number",
					"description": "When position is fixed, this is forced to 0",
					"parent": "EuiSkipLinkInterface"
				},
				"fill": {
					"name": "fill",
					"type": "boolean",
					"description": "Make button a solid color for prominence",
					"parent": "EuiButtonProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"primary",
						"accent",
						"success",
						"warning",
						"danger",
						"ghost",
						"text"
					],
					"description": "Any of our named colors.",
					"parent": "EuiButtonProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m"
					],
					"description": "Use size s in confined spaces",
					"parent": "EuiButtonProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"description": "disabled is also allowed",
					"parent": "EuiButtonProps"
				},
				"isSelected": {
					"name": "isSelected",
					"type": "boolean",
					"description": "Applies the boolean state as the aria-pressed property to create a toggle button. Only use when the readable text does not change between states.*",
					"parent": "EuiButtonProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"description": "Extends the button to 100% width",
					"parent": "EuiButtonProps"
				},
				"minWidth": {
					"name": "minWidth",
					"type": "string",
					"description": "Override the default minimum width",
					"parent": "EuiButtonProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"description": "Force disables the button and changes the icon to a loading spinner",
					"parent": "EuiButtonProps"
				},
				"contentProps": {
					"name": "contentProps",
					"type": "unknown",
					"description": "Object of props passed to the <span/> wrapping the buttons content",
					"parent": "EuiButtonProps"
				},
				"style": {
					"name": "style",
					"type": "object",
					"parent": "EuiButtonProps"
				},
				"iconType": {
					"name": "iconType",
					"type": "string",
					"description": "Any type accepted by EuiIcon",
					"parent": "EuiButtonContentProps"
				},
				"iconSide": {
					"name": "iconSide",
					"type": "string",
					"enum": [
						"left",
						"right"
					],
					"description": "Can only be one side left or right",
					"parent": "EuiButtonContentProps"
				},
				"textProps": {
					"name": "textProps",
					"type": "unknown",
					"description": "Object of props passed to the <span/> wrapping the contents text/children only (not icon)",
					"parent": "EuiButtonContentProps"
				},
				"iconSize": {
					"name": "iconSize",
					"type": "string",
					"enum": [
						"s",
						"m"
					],
					"parent": "EuiButtonContentProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"parent": "PropsForButton"
				},
				"buttonRef": {
					"name": "buttonRef",
					"type": "Event",
					"parent": "propsForButton"
				}
			},
			"relativePath": "src/components/accessibility/skip_link/skip_link.tsx"
		},
		"ElasticEui_EuiAccordion": {
			"id": "ElasticEui_EuiAccordion",
			"name": "EuiAccordion",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiAccordion",
				"lib": "elasticEui"
			},
			"required": [
				"id"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"id": {
					"name": "id",
					"type": "string",
					"parent": "EuiAccordionProps"
				},
				"element": {
					"name": "element",
					"type": "string",
					"enum": [
						"div",
						"fieldset"
					],
					"default": "div",
					"description": "Applied to the entire .euiAccordion wrapper. When using fieldset, it will enforce buttonElement = legend as well.",
					"parent": "EuiAccordionProps"
				},
				"buttonClassName": {
					"name": "buttonClassName",
					"type": "string",
					"description": "Class that will apply to the trigger for the accordion.",
					"parent": "EuiAccordionProps"
				},
				"buttonProps": {
					"name": "buttonProps",
					"type": "unknown",
					"description": "Apply more props to the triggering button",
					"parent": "EuiAccordionProps"
				},
				"buttonContentClassName": {
					"name": "buttonContentClassName",
					"type": "string",
					"description": "Class that will apply to the trigger content for the accordion.",
					"parent": "EuiAccordionProps"
				},
				"buttonContent": {
					"name": "buttonContent",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "The content of the clickable trigger",
					"parent": "EuiAccordionProps"
				},
				"buttonElement": {
					"name": "buttonElement",
					"type": "string",
					"enum": [
						"button",
						"div",
						"legend"
					],
					"default": "button",
					"description": "Applied to the main button receiving the onToggle event. Anything other than the default button does not support removing the arrow display (for accessibility of focus).",
					"parent": "EuiAccordionProps"
				},
				"arrowProps": {
					"name": "arrowProps",
					"type": "unknown",
					"description": "Extra props to pass to the EuiButtonIcon containing the arrow.",
					"parent": "EuiAccordionProps"
				},
				"extraAction": {
					"name": "extraAction",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Will appear right aligned against the button. Useful for separate actions like deletions.",
					"parent": "EuiAccordionProps"
				},
				"initialIsOpen": {
					"name": "initialIsOpen",
					"type": "boolean",
					"default": false,
					"description": "The accordion will start in the open state.",
					"parent": "EuiAccordionProps"
				},
				"onToggle": {
					"name": "onToggle",
					"type": "Event",
					"description": "Optional callback method called on open and close with a single isOpen parameter",
					"parent": "EuiAccordionProps"
				},
				"paddingSize": {
					"name": "paddingSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"xs",
						"l",
						"xl"
					],
					"default": "none",
					"description": "The padding around the exposed accordion content.",
					"parent": "EuiAccordionProps"
				},
				"arrowDisplay": {
					"name": "arrowDisplay",
					"type": "string",
					"enum": [
						"none",
						"left",
						"right"
					],
					"default": "left",
					"description": "Placement of the arrow indicator, or none to hide it.",
					"parent": "EuiAccordionProps"
				},
				"forceState": {
					"name": "forceState",
					"type": "string",
					"enum": [
						"closed",
						"open"
					],
					"description": "Control the opening of accordion via prop",
					"parent": "EuiAccordionProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"default": false,
					"description": "Change extraAction and children into a loading spinner",
					"parent": "EuiAccordionProps"
				},
				"isLoadingMessage": {
					"name": "isLoadingMessage",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Choose whether the loading message replaces the content. Customize the message by passing a node",
					"parent": "EuiAccordionProps"
				}
			},
			"relativePath": "src/components/accordion/accordion.tsx"
		},
		"ElasticEui_EuiAspectRatio": {
			"id": "ElasticEui_EuiAspectRatio",
			"name": "EuiAspectRatio",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiAspectRatio",
				"lib": "elasticEui"
			},
			"required": [
				"height",
				"width"
			],
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"height": {
					"name": "height",
					"type": "number",
					"description": "Aspect ratio height. For example 9 would be widescreen video.",
					"parent": "EuiAspectRatioProps"
				},
				"width": {
					"name": "width",
					"type": "number",
					"description": "Aspect ratio width. For example 16 would be widescreen video.",
					"parent": "EuiAspectRatioProps"
				},
				"maxWidth": {
					"name": "maxWidth",
					"type": "string",
					"description": "The maximum width you want the child to stretch to.",
					"parent": "EuiAspectRatioProps"
				}
			},
			"relativePath": "src/components/aspect_ratio/aspect_ratio.tsx"
		},
		"ElasticEui_EuiAutoSizer": {
			"id": "ElasticEui_EuiAutoSizer",
			"name": "EuiAutoSizer",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiAutoSizer",
				"lib": "elasticEui"
			},
			"props": {
				"children": {
					"name": "children",
					"type": "Event",
					"description": "Function responsible for rendering children.",
					"parent": "AutoSizerProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"description": "Optional custom CSS class name to attach to root AutoSizer element.",
					"parent": "AutoSizerProps"
				},
				"defaultHeight": {
					"name": "defaultHeight",
					"type": "number",
					"description": "Default height to use for initial render; useful for SSR",
					"parent": "AutoSizerProps"
				},
				"defaultWidth": {
					"name": "defaultWidth",
					"type": "number",
					"description": "Default width to use for initial render; useful for SSR",
					"parent": "AutoSizerProps"
				},
				"disableHeight": {
					"name": "disableHeight",
					"type": "boolean",
					"description": "Disable dynamic :height property",
					"parent": "AutoSizerProps"
				},
				"disableWidth": {
					"name": "disableWidth",
					"type": "boolean",
					"description": "Disable dynamic :width property",
					"parent": "AutoSizerProps"
				},
				"nonce": {
					"name": "nonce",
					"type": "string",
					"description": "Nonce of the inlined stylesheet for Content Security Policy",
					"parent": "AutoSizerProps"
				},
				"onResize": {
					"name": "onResize",
					"type": "Event",
					"description": "Callback to be invoked on-resize",
					"parent": "AutoSizerProps"
				},
				"style": {
					"name": "style",
					"type": "object",
					"description": "Optional inline style",
					"parent": "AutoSizerProps"
				}
			},
			"relativePath": "src/components/auto_sizer/auto_sizer.tsx"
		},
		"ElasticEui_EuiAvatar": {
			"id": "ElasticEui_EuiAvatar",
			"name": "EuiAvatar",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiAvatar",
				"lib": "elasticEui"
			},
			"required": [
				"name"
			],
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"initials": {
					"name": "initials",
					"type": "string",
					"description": "Custom initials (max 2 characters). By default will take the first character (of each word).",
					"parent": "_EuiAvatarContent"
				},
				"initialsLength": {
					"name": "initialsLength",
					"type": "number",
					"enum": [
						1,
						2
					],
					"description": "Specify how many characters to show (1 or 2). By default, will show based on number of words (max first 2).",
					"parent": "_EuiAvatarContent"
				},
				"imageUrl": {
					"name": "imageUrl",
					"type": "string",
					"description": "Path to an image to display instead of initials",
					"parent": "_EuiAvatarContent"
				},
				"iconType": {
					"name": "iconType",
					"type": "string",
					"description": "Any EUI glyph, logo or custom icon to display instead of initials",
					"parent": "_EuiAvatarContent"
				},
				"iconSize": {
					"name": "iconSize",
					"type": "string",
					"enum": [
						"s",
						"m",
						"l",
						"xl",
						"original",
						"xxl"
					],
					"description": "Manually change icon size",
					"parent": "_EuiAvatarContent"
				},
				"iconColor": {
					"name": "iconColor",
					"type": "string",
					"description": "Manually change icon color",
					"parent": "_EuiAvatarContent"
				},
				"name": {
					"name": "name",
					"type": "string",
					"description": "Full name of avatar for title attribute and calculating initial if not provided",
					"parent": "EuiAvatarProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"description": "Accepts hex values like #FFFFFF, #000 otherwise a viz palette color will be assigned. Or pass plain for an empty shade, subdued for a light gray shade or null to remove entirely and the text/icon color will inherit",
					"parent": "EuiAvatarProps"
				},
				"type": {
					"name": "type",
					"type": "string",
					"enum": [
						"user",
						"space"
					],
					"default": "user",
					"description": "The type of avatar mainly controlling the shape. user = circle space = rounded square",
					"parent": "EuiAvatarProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m",
						"l",
						"xl"
					],
					"default": "m",
					"parent": "EuiAvatarProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"default": false,
					"description": "Grays out the avatar to simulate being disabled",
					"parent": "EuiAvatarProps"
				}
			},
			"relativePath": "src/components/avatar/avatar.tsx"
		},
		"ElasticEui_checkValidColor": {
			"id": "ElasticEui_checkValidColor",
			"name": "CheckValidColor",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "checkValidColor",
				"lib": "elasticEui"
			},
			"required": [
				"charAt",
				"charCodeAt",
				"concat",
				"indexOf",
				"lastIndexOf",
				"localeCompare",
				"match",
				"replace",
				"search",
				"slice",
				"split",
				"substring",
				"toLowerCase",
				"toLocaleLowerCase",
				"toUpperCase",
				"toLocaleUpperCase",
				"trim",
				"length",
				"substr",
				"codePointAt",
				"includes",
				"endsWith",
				"normalize",
				"repeat",
				"startsWith",
				"anchor",
				"big",
				"blink",
				"bold",
				"fixed",
				"fontcolor",
				"fontsize",
				"italics",
				"link",
				"small",
				"strike",
				"sub",
				"sup",
				"padStart",
				"padEnd",
				"trimEnd",
				"trimStart",
				"trimLeft",
				"trimRight",
				"matchAll",
				"replaceAll",
				"__@iterator@43"
			],
			"props": {
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of a string.",
					"parent": "String"
				},
				"charAt": {
					"name": "charAt",
					"type": "Event",
					"description": "Returns the character at the specified index.",
					"parent": "String"
				},
				"charCodeAt": {
					"name": "charCodeAt",
					"type": "Event",
					"description": "Returns the Unicode value of the character at the specified location.",
					"parent": "String"
				},
				"concat": {
					"name": "concat",
					"type": "Event",
					"description": "Returns a string that contains the concatenation of two or more strings.",
					"parent": "String"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the position of the first occurrence of a substring.",
					"parent": "String"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the last occurrence of a substring in the string.",
					"parent": "String"
				},
				"localeCompare": {
					"name": "localeCompare",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Determines whether two strings are equivalent in the current locale. Determines whether two strings are equivalent in the current or specified locale.",
					"parent": "String"
				},
				"match": {
					"name": "match",
					"type": "unknown",
					"description": "Matches a string with a regular expression, and returns an array containing the results of that search. Matches a string or an object that supports being matched against, and returns an array containing the results of that search, or null if no matches are found.",
					"parent": "String"
				},
				"replace": {
					"name": "replace",
					"description": "Replaces text in a string, using a regular expression or search string. Replaces first match with string or all matches with RegExp. Replaces text in a string, using an object that supports replacement within a string.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "String"
				},
				"search": {
					"name": "search",
					"type": "unknown",
					"description": "Finds the first substring match in a regular expression search.",
					"parent": "String"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a section of a string.",
					"parent": "String"
				},
				"split": {
					"name": "split",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Split a string into substrings using the specified separator and return them as an array.",
					"parent": "String"
				},
				"substring": {
					"name": "substring",
					"type": "Event",
					"description": "Returns the substring at the specified location within a String object.",
					"parent": "String"
				},
				"toLowerCase": {
					"name": "toLowerCase",
					"type": "Event",
					"description": "Converts all the alphabetic characters in a string to lowercase.",
					"parent": "String"
				},
				"toLocaleLowerCase": {
					"name": "toLocaleLowerCase",
					"description": "Converts all alphabetic characters to lowercase, taking into account the host environments current locale.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "String"
				},
				"toUpperCase": {
					"name": "toUpperCase",
					"type": "Event",
					"description": "Converts all the alphabetic characters in a string to uppercase.",
					"parent": "String"
				},
				"toLocaleUpperCase": {
					"name": "toLocaleUpperCase",
					"description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environments current locale.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "String"
				},
				"trim": {
					"name": "trim",
					"type": "Event",
					"description": "Removes the leading and trailing white space and line terminator characters from a string.",
					"parent": "String"
				},
				"length": {
					"name": "length",
					"type": "number",
					"description": "Returns the length of a String object.",
					"parent": "String"
				},
				"substr": {
					"name": "substr",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"valueOf": {
					"name": "valueOf",
					"type": "Event",
					"description": "Returns the primitive value of the specified object.",
					"parent": "String"
				},
				"codePointAt": {
					"name": "codePointAt",
					"type": "Event",
					"description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point value of the UTF-16 encoded code point starting at the string element at position pos in the String resulting from converting this object to a String. If there is no element at that position, the result is undefined. If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
					"parent": "String"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Returns true if searchString appears as a substring of the result of converting this object to a String, at one or more positions that are greater than or equal to position; otherwise, returns false.",
					"parent": "String"
				},
				"endsWith": {
					"name": "endsWith",
					"type": "Event",
					"description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at endPosition – length(this). Otherwise returns false.",
					"parent": "String"
				},
				"normalize": {
					"name": "normalize",
					"type": "unknown",
					"description": "Returns the String value result of normalizing the string into the normalization form named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
					"parent": "String"
				},
				"repeat": {
					"name": "repeat",
					"type": "Event",
					"description": "Returns a String value that is made from count copies appended together. If count is 0, the empty string is returned.",
					"parent": "String"
				},
				"startsWith": {
					"name": "startsWith",
					"type": "Event",
					"description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at position. Otherwise returns false.",
					"parent": "String"
				},
				"anchor": {
					"name": "anchor",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"big": {
					"name": "big",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"blink": {
					"name": "blink",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"bold": {
					"name": "bold",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fixed": {
					"name": "fixed",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fontcolor": {
					"name": "fontcolor",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fontsize": {
					"name": "fontsize",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"italics": {
					"name": "italics",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"link": {
					"name": "link",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"small": {
					"name": "small",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"strike": {
					"name": "strike",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"sub": {
					"name": "sub",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"sup": {
					"name": "sup",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"padStart": {
					"name": "padStart",
					"type": "Event",
					"description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the start (left) of the current string.",
					"parent": "String"
				},
				"padEnd": {
					"name": "padEnd",
					"type": "Event",
					"description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string.",
					"parent": "String"
				},
				"trimEnd": {
					"name": "trimEnd",
					"type": "Event",
					"description": "Removes the trailing white space and line terminator characters from a string.",
					"parent": "String"
				},
				"trimStart": {
					"name": "trimStart",
					"type": "Event",
					"description": "Removes the leading white space and line terminator characters from a string.",
					"parent": "String"
				},
				"trimLeft": {
					"name": "trimLeft",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility. Use `trimStart` instead",
					"parent": "String"
				},
				"trimRight": {
					"name": "trimRight",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility. Use `trimEnd` instead",
					"parent": "String"
				},
				"matchAll": {
					"name": "matchAll",
					"type": "Event",
					"description": "Matches a string with a regular expression, and returns an iterable of matches containing the results of that search.",
					"parent": "String"
				},
				"replaceAll": {
					"name": "replaceAll",
					"description": "Replace all instances of a substring in a string, using a regular expression or search string.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "String"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "String"
				}
			},
			"relativePath": "src/components/avatar/avatar.tsx"
		},
		"ElasticEui_EuiBadge": {
			"id": "ElasticEui_EuiBadge",
			"name": "EuiBadge",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiBadge",
				"lib": "elasticEui"
			},
			"props": {
				"iconType": {
					"name": "iconType",
					"type": "string",
					"description": "Accepts any string from our icon library",
					"parent": "EuiBadgeProps"
				},
				"iconSide": {
					"name": "iconSide",
					"type": "string",
					"enum": [
						"left",
						"right"
					],
					"default": "left",
					"description": "The side of the badge the icon should sit",
					"parent": "EuiBadgeProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"default": "default",
					"description": "Accepts either our palette colors (primary, success ..etc) or a hex value #FFFFFF, #000.",
					"parent": "EuiBadgeProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"description": "Will override any color passed through the color prop.",
					"parent": "EuiBadgeProps"
				},
				"closeButtonProps": {
					"name": "closeButtonProps",
					"type": "unknown",
					"description": "Props passed to the close button.",
					"parent": "EuiBadgeProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"iconOnClick": {
					"name": "iconOnClick",
					"type": "unknown",
					"description": "Will apply an onclick to icon within the badge",
					"parent": "WithIconOnClick"
				},
				"iconOnClickAriaLabel": {
					"name": "iconOnClickAriaLabel",
					"type": "string",
					"description": "Aria label applied to the iconOnClick button",
					"parent": "WithIconOnClick"
				},
				"href": {
					"name": "href",
					"type": "string",
					"parent": "WithAnchorProps"
				},
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"description": "Will apply an onclick to the badge itself",
					"parent": "WithButtonProps"
				},
				"rel": {
					"name": "rel",
					"type": "string",
					"parent": "WithAnchorProps"
				},
				"target": {
					"name": "target",
					"type": "string",
					"parent": "WithAnchorProps"
				},
				"onClickAriaLabel": {
					"name": "onClickAriaLabel",
					"type": "string",
					"description": "Aria label applied to the onClick button",
					"parent": "WithButtonProps"
				}
			},
			"relativePath": "src/components/badge/badge.tsx"
		},
		"ElasticEui_EuiBetaBadge": {
			"id": "ElasticEui_EuiBetaBadge",
			"name": "EuiBetaBadge",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiBetaBadge",
				"lib": "elasticEui"
			},
			"required": [
				"label"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"href": {
					"name": "href",
					"type": "string",
					"parent": "WithAnchorProps"
				},
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"description": "Will apply an onclick to the badge itself",
					"parent": "WithButtonProps"
				},
				"rel": {
					"name": "rel",
					"type": "string",
					"parent": "WithAnchorProps"
				},
				"target": {
					"name": "target",
					"type": "string",
					"parent": "WithAnchorProps"
				},
				"title": {
					"name": "title",
					"type": "string",
					"description": "Optional title will be supplied as tooltip title or title attribute otherwise the label will be used",
					"parent": "BadgeProps"
				},
				"onClickAriaLabel": {
					"name": "onClickAriaLabel",
					"type": "string",
					"description": "Aria label applied to the onClick button",
					"parent": "WithButtonProps"
				},
				"iconType": {
					"name": "iconType",
					"type": "string",
					"description": "Supply an icon type if the badge should just be an icon",
					"parent": "BadgeProps"
				},
				"label": {
					"name": "label",
					"type": "string",
					"description": "One word label like Beta or Lab",
					"parent": "BadgeProps"
				},
				"tooltipContent": {
					"name": "tooltipContent",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Content for the tooltip",
					"parent": "BadgeProps"
				},
				"tooltipPosition": {
					"name": "tooltipPosition",
					"type": "string",
					"enum": [
						"left",
						"right",
						"top",
						"bottom"
					],
					"default": "top",
					"description": "Custom position of the tooltip",
					"parent": "BadgeProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"accent",
						"subdued",
						"hollow"
					],
					"default": "hollow",
					"description": "Accepts accent, subdued and hollow.",
					"parent": "BadgeProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m"
					],
					"default": "m",
					"parent": "BadgeProps"
				}
			},
			"relativePath": "src/components/badge/beta_badge/beta_badge.tsx"
		},
		"ElasticEui_EuiNotificationBadge": {
			"id": "ElasticEui_EuiNotificationBadge",
			"name": "EuiNotificationBadge",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiNotificationBadge",
				"lib": "elasticEui"
			},
			"props": {
				"children": {
					"name": "children",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "ReactNode to render as this components content",
					"parent": "EuiNotificationBadgeProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m"
					],
					"default": "s",
					"parent": "EuiNotificationBadgeProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"accent",
						"subdued"
					],
					"default": "accent",
					"parent": "EuiNotificationBadgeProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/badge/notification_badge/badge_notification.tsx"
		},
		"ElasticEui_EuiBadgeGroup": {
			"id": "ElasticEui_EuiBadgeGroup",
			"name": "EuiBadgeGroup",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiBadgeGroup",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"gutterSize": {
					"name": "gutterSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"xs"
					],
					"default": "xs",
					"description": "Space between badges",
					"parent": "EuiBadgeGroupProps"
				},
				"ref": {
					"name": "ref",
					"type": "Event",
					"parent": "RefAttributes"
				}
			},
			"relativePath": "src/components/badge/badge_group/badge_group.tsx"
		},
		"ElasticEui_EuiBeacon": {
			"id": "ElasticEui_EuiBeacon",
			"name": "EuiBeacon",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiBeacon",
				"lib": "elasticEui"
			},
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"size": {
					"name": "size",
					"type": "number",
					"default": 12,
					"description": "Height and width of the center circle. Value is passed directly to the style attribute",
					"parent": "EuiBeaconProps"
				}
			},
			"relativePath": "src/components/beacon/beacon.tsx"
		},
		"ElasticEui_EuiBottomBar": {
			"id": "ElasticEui_EuiBottomBar",
			"name": "EuiBottomBar",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiBottomBar",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"usePortal": {
					"name": "usePortal",
					"type": "boolean",
					"default": false,
					"description": "Whether to wrap in an EuiPortal which appends the component to the body element. Only works if position is fixed.",
					"parent": "_BottomBarExclusivePositions"
				},
				"affordForDisplacement": {
					"name": "affordForDisplacement",
					"type": "boolean",
					"default": false,
					"description": "Whether the component should apply padding on the document body element to afford for its own displacement height. Only works if usePortal is true and position is fixed.",
					"parent": "_BottomBarExclusivePositions"
				},
				"position": {
					"name": "position",
					"type": "string",
					"enum": [
						"static",
						"fixed",
						"sticky"
					],
					"default": "fixed",
					"description": "How to position the bottom bar against its parent.",
					"parent": "_BottomBarExclusivePositions"
				},
				"paddingSize": {
					"name": "paddingSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l"
					],
					"default": "m",
					"description": "Padding applied to the bar. Default is m.",
					"parent": "EuiBottomBarProps"
				},
				"bodyClassName": {
					"name": "bodyClassName",
					"type": "string",
					"description": "Optional class applied to the body element on mount.",
					"parent": "EuiBottomBarProps"
				},
				"landmarkHeading": {
					"name": "landmarkHeading",
					"type": "string",
					"description": "Customize the screen reader heading that helps users find this control. Default is Page level controls.",
					"parent": "EuiBottomBarProps"
				},
				"top": {
					"name": "top",
					"type": "string",
					"description": "Starting vertical position when fixed position. Offset from the top of the window when sticky position. Has no affect on static positions.",
					"parent": "EuiBottomBarProps"
				},
				"right": {
					"name": "right",
					"type": "number",
					"default": 0,
					"description": "Ending horizontal position when fixed position. Has no affect on static or sticky positions.",
					"parent": "EuiBottomBarProps"
				},
				"bottom": {
					"name": "bottom",
					"type": "number",
					"default": 0,
					"description": "Starting vertical position when fixed position. Offset from the bottom of the window when sticky position. Has no affect on static positions.",
					"parent": "EuiBottomBarProps"
				},
				"left": {
					"name": "left",
					"type": "number",
					"default": 0,
					"description": "Starting horizontal position when fixed position. Has no affect on static or sticky positions.",
					"parent": "EuiBottomBarProps"
				},
				"ref": {
					"name": "ref",
					"type": "Event",
					"parent": "RefAttributes"
				}
			},
			"relativePath": "src/components/bottom_bar/bottom_bar.tsx"
		},
		"ElasticEui_EuiBreadcrumbs": {
			"id": "ElasticEui_EuiBreadcrumbs",
			"name": "EuiBreadcrumbs",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiBreadcrumbs",
				"lib": "elasticEui"
			},
			"required": [
				"breadcrumbs"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"responsive": {
					"name": "responsive",
					"type": "boolean",
					"description": "Hides extra (above the max) breadcrumbs under a collapsed item as the window gets smaller. Pass a custom #EuiBreadcrumbResponsiveMaxCount object to change the number of breadcrumbs to show at the particular breakpoints.  Pass false to turn this behavior off.  Default: { xs: 1, s: 2, m: 4 }",
					"parent": "EuiBreadcrumbsProps"
				},
				"truncate": {
					"name": "truncate",
					"type": "boolean",
					"default": false,
					"description": "Forces all breadcrumbs to single line and truncates each breadcrumb to a particular width, except for the last item",
					"parent": "EuiBreadcrumbsProps"
				},
				"max": {
					"name": "max",
					"type": "number",
					"default": 5,
					"description": "Collapses the inner items past the maximum set here into a single ellipses item. Omitting or passing a 0 value will show all breadcrumbs.",
					"parent": "EuiBreadcrumbsProps"
				},
				"breadcrumbs": {
					"name": "breadcrumbs",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "The array of individual #EuiBreadcrumb items",
					"parent": "EuiBreadcrumbsProps"
				}
			},
			"relativePath": "src/components/breadcrumbs/breadcrumbs.tsx"
		},
		"ElasticEui_COLORS": {
			"id": "ElasticEui_COLORS",
			"name": "Colors",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "COLORS",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/components/button/button.tsx"
		},
		"ElasticEui_EuiButton": {
			"id": "ElasticEui_EuiButton",
			"name": "EuiButton",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiButton",
				"lib": "elasticEui"
			},
			"description": "EuiButton is largely responsible for providing relevant props and the logic for element-specific attributes",
			"props": {
				"href": {
					"name": "href",
					"type": "string",
					"parent": "PropsForAnchor"
				},
				"download": {
					"name": "download",
					"type": "unknown",
					"parent": "AnchorHTMLAttributes"
				},
				"hrefLang": {
					"name": "hrefLang",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"media": {
					"name": "media",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"ping": {
					"name": "ping",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"rel": {
					"name": "rel",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"target": {
					"name": "target",
					"type": "string",
					"enum": [
						"_self",
						"_blank",
						"_parent",
						"_top"
					],
					"parent": "AnchorHTMLAttributes"
				},
				"referrerPolicy": {
					"name": "referrerPolicy",
					"type": "string",
					"enum": [
						"",
						"no-referrer",
						"no-referrer-when-downgrade",
						"origin",
						"origin-when-cross-origin",
						"same-origin",
						"strict-origin",
						"strict-origin-when-cross-origin",
						"unsafe-url"
					],
					"parent": "AnchorHTMLAttributes"
				},
				"fill": {
					"name": "fill",
					"type": "boolean",
					"default": false,
					"description": "Make button a solid color for prominence",
					"parent": "EuiButtonProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"primary",
						"accent",
						"success",
						"warning",
						"danger",
						"ghost",
						"text"
					],
					"default": "primary",
					"description": "Any of our named colors.",
					"parent": "EuiButtonProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m"
					],
					"default": "m",
					"description": "Use size s in confined spaces",
					"parent": "EuiButtonProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"description": "disabled is also allowed",
					"parent": "EuiButtonProps"
				},
				"isSelected": {
					"name": "isSelected",
					"type": "boolean",
					"description": "Applies the boolean state as the aria-pressed property to create a toggle button. Only use when the readable text does not change between states.*",
					"parent": "EuiButtonProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"description": "Extends the button to 100% width",
					"parent": "EuiButtonProps"
				},
				"minWidth": {
					"name": "minWidth",
					"type": "string",
					"description": "Override the default minimum width",
					"parent": "EuiButtonProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"description": "Force disables the button and changes the icon to a loading spinner",
					"parent": "EuiButtonProps"
				},
				"contentProps": {
					"name": "contentProps",
					"type": "unknown",
					"description": "Object of props passed to the <span/> wrapping the buttons content",
					"parent": "EuiButtonProps"
				},
				"style": {
					"name": "style",
					"type": "object",
					"parent": "EuiButtonProps"
				},
				"iconType": {
					"name": "iconType",
					"type": "string",
					"description": "Any type accepted by EuiIcon",
					"parent": "EuiButtonContentProps"
				},
				"iconSide": {
					"name": "iconSide",
					"type": "string",
					"enum": [
						"left",
						"right"
					],
					"default": "left",
					"description": "Can only be one side left or right",
					"parent": "EuiButtonContentProps"
				},
				"textProps": {
					"name": "textProps",
					"type": "unknown",
					"description": "Object of props passed to the <span/> wrapping the contents text/children only (not icon)",
					"parent": "EuiButtonContentProps"
				},
				"iconSize": {
					"name": "iconSize",
					"type": "string",
					"enum": [
						"s",
						"m"
					],
					"parent": "EuiButtonContentProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"parent": "PropsForButton"
				},
				"buttonRef": {
					"name": "buttonRef",
					"type": "Event",
					"parent": "EuiButtonPropsForButton"
				}
			},
			"relativePath": "src/components/button/button.tsx"
		},
		"ElasticEui_EuiButtonEmpty": {
			"id": "ElasticEui_EuiButtonEmpty",
			"name": "EuiButtonEmpty",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiButtonEmpty",
				"lib": "elasticEui"
			},
			"props": {
				"download": {
					"name": "download",
					"type": "unknown",
					"parent": "AnchorHTMLAttributes"
				},
				"hrefLang": {
					"name": "hrefLang",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"media": {
					"name": "media",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"ping": {
					"name": "ping",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"referrerPolicy": {
					"name": "referrerPolicy",
					"type": "string",
					"enum": [
						"",
						"no-referrer",
						"no-referrer-when-downgrade",
						"origin",
						"origin-when-cross-origin",
						"same-origin",
						"strict-origin",
						"strict-origin-when-cross-origin",
						"unsafe-url"
					],
					"parent": "AnchorHTMLAttributes"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"primary",
						"success",
						"warning",
						"danger",
						"ghost",
						"text"
					],
					"default": "primary",
					"description": "Any of our named colors",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs"
					],
					"default": "m",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"flush": {
					"name": "flush",
					"type": "string",
					"enum": [
						"left",
						"right",
						"both"
					],
					"description": "Ensure the text of the button sits flush to the left, right, or both sides of its container",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"description": "disabled is also allowed",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"description": "Force disables the button and changes the icon to a loading spinner",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"isSelected": {
					"name": "isSelected",
					"type": "boolean",
					"description": "Applies the boolean state as the aria-pressed property to create a toggle button. Only use when the readable text does not change between states.*",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"href": {
					"name": "href",
					"type": "string",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"target": {
					"name": "target",
					"type": "string",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"rel": {
					"name": "rel",
					"type": "string",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"type": {
					"name": "type",
					"type": "string",
					"enum": [
						"button",
						"submit"
					],
					"default": "button",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"buttonRef": {
					"name": "buttonRef",
					"type": "Event",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"contentProps": {
					"name": "contentProps",
					"type": "unknown",
					"description": "Object of props passed to the <span/> wrapping the buttons content",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"iconType": {
					"name": "iconType",
					"type": "string",
					"description": "Any type accepted by EuiIcon",
					"parent": "EuiButtonContentProps"
				},
				"iconSide": {
					"name": "iconSide",
					"type": "string",
					"enum": [
						"left",
						"right"
					],
					"default": "left",
					"description": "Can only be one side left or right",
					"parent": "EuiButtonContentProps"
				},
				"textProps": {
					"name": "textProps",
					"type": "unknown",
					"description": "Object of props passed to the <span/> wrapping the contents text/children only (not icon)",
					"parent": "EuiButtonContentProps"
				},
				"iconSize": {
					"name": "iconSize",
					"type": "string",
					"enum": [
						"s",
						"m"
					],
					"default": "m",
					"parent": "EuiButtonContentProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"parent": "PropsForButton"
				}
			},
			"relativePath": "src/components/button/button_empty/button_empty.tsx"
		},
		"ElasticEui_EuiButtonIcon": {
			"id": "ElasticEui_EuiButtonIcon",
			"name": "EuiButtonIcon",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiButtonIcon",
				"lib": "elasticEui"
			},
			"required": [
				"iconType"
			],
			"props": {
				"href": {
					"name": "href",
					"type": "string",
					"parent": "PropsForAnchor"
				},
				"download": {
					"name": "download",
					"type": "unknown",
					"parent": "AnchorHTMLAttributes"
				},
				"hrefLang": {
					"name": "hrefLang",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"media": {
					"name": "media",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"ping": {
					"name": "ping",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"rel": {
					"name": "rel",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"target": {
					"name": "target",
					"type": "string",
					"enum": [
						"_self",
						"_blank",
						"_parent",
						"_top"
					],
					"parent": "AnchorHTMLAttributes"
				},
				"referrerPolicy": {
					"name": "referrerPolicy",
					"type": "string",
					"enum": [
						"",
						"no-referrer",
						"no-referrer-when-downgrade",
						"origin",
						"origin-when-cross-origin",
						"same-origin",
						"strict-origin",
						"strict-origin-when-cross-origin",
						"unsafe-url"
					],
					"parent": "AnchorHTMLAttributes"
				},
				"type": {
					"name": "type",
					"type": "string",
					"default": "button",
					"parent": "EuiButtonIconPropsForButton"
				},
				"iconType": {
					"name": "iconType",
					"type": "string",
					"parent": "EuiButtonIconProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"primary",
						"accent",
						"success",
						"warning",
						"danger",
						"ghost",
						"text"
					],
					"default": "primary",
					"description": "Any of the named color palette options.",
					"parent": "EuiButtonIconProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "EuiButtonIconProps"
				},
				"aria-labelledby": {
					"name": "aria-labelledby",
					"type": "string",
					"description": "Identifies the element (or elements) that labels the current element.",
					"parent": "EuiButtonIconProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"parent": "EuiButtonIconProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs"
					],
					"default": "xs",
					"description": "Overall size of button. Matches the sizes of other EuiButtons",
					"parent": "EuiButtonIconProps"
				},
				"iconSize": {
					"name": "iconSize",
					"type": "string",
					"enum": [
						"s",
						"m",
						"l",
						"xl",
						"original",
						"xxl"
					],
					"default": "m",
					"description": "Size of the icon only. This will not affect the overall size of the button",
					"parent": "EuiButtonIconProps"
				},
				"isSelected": {
					"name": "isSelected",
					"type": "boolean",
					"description": "Applies the boolean state as the aria-pressed property to create a toggle button. Only use when the readable text does not change between states.*",
					"parent": "EuiButtonIconProps"
				},
				"display": {
					"name": "display",
					"type": "string",
					"enum": [
						"fill",
						"empty",
						"base"
					],
					"default": "empty",
					"description": "Sets the display style for matching other EuiButton types. base is equivalent to a typical EuiButton fill is equivalent to a filled EuiButton empty (default) is equivalent to an EuiButtonEmpty",
					"parent": "EuiButtonIconProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"description": "Disables the button and changes the icon to a loading spinner",
					"parent": "EuiButtonIconProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"parent": "PropsForButton"
				},
				"buttonRef": {
					"name": "buttonRef",
					"type": "Event",
					"parent": "EuiButtonIconPropsForButton"
				}
			},
			"relativePath": "src/components/button/button_icon/button_icon.tsx"
		},
		"ElasticEui_EuiButtonGroup": {
			"id": "ElasticEui_EuiButtonGroup",
			"name": "EuiButtonGroup",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiButtonGroup",
				"lib": "elasticEui"
			},
			"required": [
				"legend",
				"onChange"
			],
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"buttonSize": {
					"name": "buttonSize",
					"type": "string",
					"enum": [
						"s",
						"m",
						"compressed"
					],
					"default": "s",
					"description": "Typical sizing is s. Medium m size should be reserved for major features. compressed is meant to be used alongside and within compressed forms.",
					"parent": "EuiButtonGroupProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"default": false,
					"parent": "EuiButtonGroupProps"
				},
				"isFullWidth": {
					"name": "isFullWidth",
					"type": "boolean",
					"default": false,
					"description": "Expands the whole group to the full width of the container. Each button gets equal widths no matter the content",
					"parent": "EuiButtonGroupProps"
				},
				"isIconOnly": {
					"name": "isIconOnly",
					"type": "boolean",
					"default": false,
					"description": "Hides the label to only show the iconType provided by the option",
					"parent": "EuiButtonGroupProps"
				},
				"legend": {
					"name": "legend",
					"type": "string",
					"description": "A hidden group title (required for accessibility)",
					"parent": "EuiButtonGroupProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"primary",
						"accent",
						"success",
						"warning",
						"danger",
						"ghost",
						"text"
					],
					"default": "text",
					"description": "Compressed styles dont support ghost color (Color will be changed to text)",
					"parent": "EuiButtonGroupProps"
				},
				"type": {
					"name": "type",
					"type": "string",
					"enum": [
						"single",
						"multi"
					],
					"default": "single",
					"description": "Actual type is single | multi. Determines how the selection of the group should be handled. With single only one option can be selected at a time (similar to radio group). With multi multiple options selected (similar to checkbox group). Default for type is single so it can also be excluded",
					"parent": "EuiButtonGroupProps"
				},
				"options": {
					"name": "options",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"default": [],
					"description": "An array of #EuiButtonGroupOptionProps",
					"parent": "EuiButtonGroupProps"
				},
				"name": {
					"name": "name",
					"type": "string",
					"description": "The name attribute for radio inputs; Defaults to a random string",
					"parent": "EuiButtonGroupProps"
				},
				"idSelected": {
					"name": "idSelected",
					"type": "string",
					"default": "",
					"description": "Styles the selected option to look selected (usually with fill) Required by and only used in type=single.",
					"parent": "EuiButtonGroupProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"description": "Single: Returns the id of the clicked option and the value Multi: Returns the id of the clicked option",
					"parent": "EuiButtonGroupProps"
				},
				"idToSelectedMap": {
					"name": "idToSelectedMap",
					"type": "unknown",
					"description": "A map of ids as keys with the selected boolean values. Required by and only used in type=multi.",
					"parent": "EuiButtonGroupProps"
				}
			},
			"relativePath": "src/components/button/button_group/button_group.tsx"
		},
		"ElasticEui_EuiCallOut": {
			"id": "ElasticEui_EuiCallOut",
			"name": "EuiCallOut",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiCallOut",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"title": {
					"name": "title",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"parent": "EuiCallOutProps"
				},
				"iconType": {
					"name": "iconType",
					"type": "string",
					"parent": "EuiCallOutProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"primary",
						"success",
						"warning",
						"danger"
					],
					"default": "primary",
					"parent": "EuiCallOutProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m"
					],
					"default": "m",
					"parent": "EuiCallOutProps"
				},
				"heading": {
					"name": "heading",
					"type": "string",
					"enum": [
						"h1",
						"h2",
						"h3",
						"h4",
						"h5",
						"h6",
						"p"
					],
					"parent": "EuiCallOutProps"
				},
				"ref": {
					"name": "ref",
					"type": "Event",
					"parent": "RefAttributes"
				}
			},
			"relativePath": "src/components/call_out/call_out.tsx"
		},
		"ElasticEui_EuiCard": {
			"id": "ElasticEui_EuiCard",
			"name": "EuiCard",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiCard",
				"lib": "elasticEui"
			},
			"required": [
				"title"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"image": {
					"name": "image",
					"type": "string",
					"description": "Accepts a url in string form or ReactElement for a custom image component",
					"parent": "EuiCardPropsLayout"
				},
				"footer": {
					"name": "footer",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Accepts any combination of elements",
					"parent": "EuiCardPropsLayout"
				},
				"textAlign": {
					"name": "textAlign",
					"type": "string",
					"enum": [
						"left",
						"right",
						"center"
					],
					"default": "center",
					"description": "Changes alignment of the title and description",
					"parent": "EuiCardPropsLayout"
				},
				"layout": {
					"name": "layout",
					"type": "string",
					"enum": [
						"horizontal",
						"vertical"
					],
					"default": "vertical",
					"description": "Change to horizontal if you need the icon to be left of the content. Horizontal layouts cannot be used in conjunction with image, footer, or textAlign.",
					"parent": "EuiCardPropsLayout"
				},
				"title": {
					"name": "title",
					"type": "string",
					"description": "Cards are required to have at least a title and a description and/or children",
					"parent": "EuiCardProps"
				},
				"titleElement": {
					"name": "titleElement",
					"type": "string",
					"enum": [
						"span",
						"h2",
						"h3",
						"h4",
						"h5",
						"h6"
					],
					"default": "span",
					"description": "Determines the titles heading element",
					"parent": "EuiCardProps"
				},
				"titleSize": {
					"name": "titleSize",
					"type": "string",
					"enum": [
						"s",
						"xs"
					],
					"default": "s",
					"description": "Determines the titles size, matching that of EuiTitle. Though, card titles cant be too large or small relative to the description text.",
					"parent": "EuiCardProps"
				},
				"description": {
					"name": "description",
					"type": "string",
					"description": "Placed within a small EuiText <p> tag",
					"parent": "EuiCardProps"
				},
				"icon": {
					"name": "icon",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Accepts an <EuiIcon> node or null",
					"parent": "EuiCardProps"
				},
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"description": "Use only if you want to forego a button in the footer and make the whole card clickable",
					"parent": "EuiCardProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"parent": "EuiCardProps"
				},
				"href": {
					"name": "href",
					"type": "string",
					"parent": "EuiCardProps"
				},
				"target": {
					"name": "target",
					"type": "string",
					"parent": "EuiCardProps"
				},
				"rel": {
					"name": "rel",
					"type": "string",
					"parent": "EuiCardProps"
				},
				"betaBadgeProps": {
					"name": "betaBadgeProps",
					"type": "unknown",
					"description": "Adds a badge to top of the card to label it as Beta or other non-GA state. Accepts all the props of [EuiBetaBadge](#/display/badge#beta-badge-type), where label is required.",
					"parent": "EuiCardProps"
				},
				"display": {
					"name": "display",
					"type": "string",
					"enum": [
						"primary",
						"accent",
						"success",
						"warning",
						"danger",
						"subdued",
						"plain",
						"transparent"
					],
					"description": "Matches to the color property of EuiPanel. If defined, removes any border & shadow. Leave as undefined to display as a default panel. Selectable cards will always display as a default panel.",
					"parent": "EuiCardProps"
				},
				"paddingSize": {
					"name": "paddingSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l"
					],
					"description": "Padding applied around the content of the card",
					"parent": "EuiCardProps"
				},
				"selectable": {
					"name": "selectable",
					"type": "unknown",
					"description": "Adds a button to the bottom of the card to allow for in-place selection",
					"parent": "EuiCardProps"
				},
				"hasBorder": {
					"name": "hasBorder",
					"type": "boolean",
					"description": "Use a border style of card instead of shadow",
					"parent": "EuiCardProps"
				}
			},
			"relativePath": "src/components/card/card.tsx"
		},
		"ElasticEui_EuiCheckableCard": {
			"id": "ElasticEui_EuiCheckableCard",
			"name": "EuiCheckableCard",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiCheckableCard",
				"lib": "elasticEui"
			},
			"required": [
				"onChange",
				"id",
				"label"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"parent": "EuiCheckboxProps"
				},
				"disabled": {
					"name": "disabled",
					"type": "boolean",
					"parent": "EuiCheckboxProps"
				},
				"checked": {
					"name": "checked",
					"type": "boolean",
					"parent": "EuiCheckboxProps"
				},
				"labelProps": {
					"name": "labelProps",
					"type": "unknown",
					"description": "Object of props passed to the <label/>",
					"parent": "EuiCheckboxProps"
				},
				"checkableType": {
					"name": "checkableType",
					"type": "string",
					"enum": [
						"checkbox",
						"radio"
					],
					"default": "radio",
					"description": "Whether the control is a radio button or checkbox",
					"parent": "EuiCheckableCardAsCheckboxProps"
				},
				"id": {
					"name": "id",
					"type": "string",
					"parent": "EuiCheckableCardBaseProps"
				},
				"label": {
					"name": "label",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"parent": "EuiCheckableCardBaseProps"
				},
				"hasShadow": {
					"name": "hasShadow",
					"type": "boolean",
					"parent": "EuiCheckableCardBaseProps"
				},
				"hasBorder": {
					"name": "hasBorder",
					"type": "boolean",
					"default": false,
					"parent": "EuiCheckableCardBaseProps"
				}
			},
			"relativePath": "src/components/card/checkable_card/checkable_card.tsx"
		},
		"ElasticEui_EuiCode": {
			"id": "ElasticEui_EuiCode",
			"name": "EuiCode",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiCode",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"language": {
					"name": "language",
					"type": "string",
					"description": "Sets the syntax highlighting for a specific language",
					"parent": "EuiCodeSharedProps"
				},
				"transparentBackground": {
					"name": "transparentBackground",
					"type": "boolean",
					"default": false,
					"parent": "EuiCodeSharedProps"
				}
			},
			"relativePath": "src/components/code/code.tsx"
		},
		"ElasticEui_EuiCodeBlock": {
			"id": "ElasticEui_EuiCodeBlock",
			"name": "EuiCodeBlock",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiCodeBlock",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"language": {
					"name": "language",
					"type": "string",
					"description": "Sets the syntax highlighting for a specific language",
					"parent": "EuiCodeSharedProps"
				},
				"transparentBackground": {
					"name": "transparentBackground",
					"type": "boolean",
					"default": false,
					"parent": "EuiCodeSharedProps"
				},
				"paddingSize": {
					"name": "paddingSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l"
					],
					"default": "l",
					"parent": "EuiCodeBlockProps"
				},
				"fontSize": {
					"name": "fontSize",
					"type": "string",
					"enum": [
						"s",
						"m",
						"l"
					],
					"default": "s",
					"parent": "EuiCodeBlockProps"
				},
				"whiteSpace": {
					"name": "whiteSpace",
					"type": "string",
					"enum": [
						"pre",
						"pre-wrap"
					],
					"default": "pre-wrap",
					"description": "Specify how white-space inside the element is handled. pre respects line breaks/white space but doesnt force them to wrap the line pre-wrap respects line breaks/white space but does force them to wrap the line when necessary.",
					"parent": "EuiCodeBlockProps"
				},
				"isCopyable": {
					"name": "isCopyable",
					"type": "boolean",
					"default": false,
					"description": "Displays an icon button to copy the code snippet to the clipboard.",
					"parent": "EuiCodeBlockProps"
				},
				"lineNumbers": {
					"name": "lineNumbers",
					"type": "boolean",
					"default": false,
					"description": "Displays line numbers. Optionally accepts a configuration object for setting the starting number and visual highlighting ranges: { start: 100, highlight: 1, 5-10, 20-30, 40 }",
					"parent": "EuiCodeBlockProps"
				},
				"overflowHeight": {
					"name": "overflowHeight",
					"type": "string",
					"description": "Sets the maximum container height. Accepts a pixel value (300) or a percentage (100%) Ensure the container has calcuable height when using a percentage",
					"parent": "EuiCodeBlockProps"
				},
				"isVirtualized": {
					"name": "isVirtualized",
					"type": "boolean",
					"description": "Renders code block lines virtually. Useful for improving load times of large code blocks.  When using this configuration, overflowHeight is required and whiteSpace can only be pre.",
					"parent": "EuiCodeBlockProps"
				}
			},
			"relativePath": "src/components/code/code_block.tsx"
		},
		"ElasticEui_EuiCollapsibleNavGroup": {
			"id": "ElasticEui_EuiCollapsibleNavGroup",
			"name": "EuiCollapsibleNavGroup",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiCollapsibleNavGroup",
				"lib": "elasticEui"
			},
			"props": {
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"description": "Change extraAction and children into a loading spinner",
					"parent": "EuiAccordionProps"
				},
				"element": {
					"name": "element",
					"type": "string",
					"enum": [
						"div",
						"fieldset"
					],
					"description": "Applied to the entire .euiAccordion wrapper. When using fieldset, it will enforce buttonElement = legend as well.",
					"parent": "EuiAccordionProps"
				},
				"buttonClassName": {
					"name": "buttonClassName",
					"type": "string",
					"description": "Class that will apply to the trigger for the accordion.",
					"parent": "EuiAccordionProps"
				},
				"buttonProps": {
					"name": "buttonProps",
					"type": "unknown",
					"description": "Apply more props to the triggering button",
					"parent": "EuiAccordionProps"
				},
				"buttonContentClassName": {
					"name": "buttonContentClassName",
					"type": "string",
					"description": "Class that will apply to the trigger content for the accordion.",
					"parent": "EuiAccordionProps"
				},
				"buttonContent": {
					"name": "buttonContent",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "The content of the clickable trigger",
					"parent": "EuiAccordionProps"
				},
				"buttonElement": {
					"name": "buttonElement",
					"type": "string",
					"enum": [
						"button",
						"div",
						"legend"
					],
					"description": "Applied to the main button receiving the onToggle event. Anything other than the default button does not support removing the arrow display (for accessibility of focus).",
					"parent": "EuiAccordionProps"
				},
				"arrowProps": {
					"name": "arrowProps",
					"type": "unknown",
					"description": "Extra props to pass to the EuiButtonIcon containing the arrow.",
					"parent": "EuiAccordionProps"
				},
				"extraAction": {
					"name": "extraAction",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Will appear right aligned against the button. Useful for separate actions like deletions.",
					"parent": "EuiAccordionProps"
				},
				"initialIsOpen": {
					"name": "initialIsOpen",
					"type": "boolean",
					"description": "The accordion will start in the open state.",
					"parent": "EuiAccordionProps"
				},
				"onToggle": {
					"name": "onToggle",
					"type": "Event",
					"description": "Optional callback method called on open and close with a single isOpen parameter",
					"parent": "EuiAccordionProps"
				},
				"paddingSize": {
					"name": "paddingSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"xs",
						"l",
						"xl"
					],
					"description": "The padding around the exposed accordion content.",
					"parent": "EuiAccordionProps"
				},
				"arrowDisplay": {
					"name": "arrowDisplay",
					"type": "string",
					"enum": [
						"none",
						"left",
						"right"
					],
					"description": "Placement of the arrow indicator, or none to hide it.",
					"parent": "EuiAccordionProps"
				},
				"forceState": {
					"name": "forceState",
					"type": "string",
					"enum": [
						"closed",
						"open"
					],
					"description": "Control the opening of accordion via prop",
					"parent": "EuiAccordionProps"
				},
				"isLoadingMessage": {
					"name": "isLoadingMessage",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Choose whether the loading message replaces the content. Customize the message by passing a node",
					"parent": "EuiAccordionProps"
				},
				"children": {
					"name": "children",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "ReactNode to render as this components content",
					"parent": "EuiCollapsibleNavGroupInterface"
				},
				"iconType": {
					"name": "iconType",
					"type": "string",
					"description": "Sits left of the title and only when title is present",
					"parent": "EuiCollapsibleNavGroupInterface"
				},
				"iconSize": {
					"name": "iconSize",
					"type": "string",
					"enum": [
						"s",
						"m",
						"l",
						"xl",
						"original",
						"xxl"
					],
					"default": "l",
					"description": "Change the size of the icon in the title",
					"parent": "EuiCollapsibleNavGroupInterface"
				},
				"iconProps": {
					"name": "iconProps",
					"type": "unknown",
					"description": "Further extend the props applied to EuiIcon",
					"parent": "EuiCollapsibleNavGroupInterface"
				},
				"id": {
					"name": "id",
					"type": "string",
					"description": "Optionally provide an id, otherwise one will be created",
					"parent": "EuiCollapsibleNavGroupInterface"
				},
				"background": {
					"name": "background",
					"type": "string",
					"enum": [
						"none",
						"dark",
						"light"
					],
					"default": "none",
					"description": "Adds a background color to the entire group, applying the correct text color to the title only",
					"parent": "EuiCollapsibleNavGroupInterface"
				},
				"titleElement": {
					"name": "titleElement",
					"type": "string",
					"enum": [
						"span",
						"h2",
						"h3",
						"h4",
						"h5",
						"h6"
					],
					"default": "h3",
					"description": "Determines the titles heading element",
					"parent": "EuiCollapsibleNavGroupInterface"
				},
				"titleSize": {
					"name": "titleSize",
					"type": "string",
					"enum": [
						"s",
						"xs",
						"xxxs",
						"xxs"
					],
					"default": "xxs",
					"description": "Title sizing equivalent to EuiTitle, but only s and smaller",
					"parent": "EuiCollapsibleNavGroupInterface"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"isCollapsible": {
					"name": "isCollapsible",
					"type": "boolean",
					"default": false,
					"description": "If true, wraps children in the body of an accordion, requiring the prop title to be used as the button. When false, simply renders a div without any accordion functionality.",
					"parent": "GroupAsDiv"
				},
				"title": {
					"name": "title",
					"type": "string",
					"description": "The title gets wrapped in the appropriate heading level with the option to add an iconType",
					"parent": "GroupAsDiv"
				}
			},
			"relativePath": "src/components/collapsible_nav/collapsible_nav_group/collapsible_nav_group.tsx"
		},
		"ElasticEui_EuiCollapsibleNav": {
			"id": "ElasticEui_EuiCollapsibleNav",
			"name": "EuiCollapsibleNav",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiCollapsibleNav",
				"lib": "elasticEui"
			},
			"required": [
				"onClose"
			],
			"props": {
				"role": {
					"name": "role",
					"type": "string",
					"default": null,
					"description": "Defaults to dialog which is best for most cases of the flyout. Otherwise pass in your own, aria-role, or null to remove it and use the semantic as element instead",
					"parent": "_EuiFlyoutProps"
				},
				"size": {
					"name": "size",
					"type": "number",
					"default": 320,
					"description": "Defines the width of the panel. Pass a predefined size of s | m | l, or pass any number/string compatible with the CSS width attribute",
					"parent": "_EuiFlyoutProps"
				},
				"style": {
					"name": "style",
					"type": "object",
					"parent": "_EuiFlyoutProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"paddingSize": {
					"name": "paddingSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l"
					],
					"default": "none",
					"description": "Customize the padding around the content of the flyout header, body and footer",
					"parent": "_EuiFlyoutProps"
				},
				"maxWidth": {
					"name": "maxWidth",
					"type": "string",
					"description": "Sets the max-width of the panel, set to true to use the default size, set to false to not restrict the width, set to a number for a custom width in px, set to a string for a custom width in custom measurement.",
					"parent": "_EuiFlyoutProps"
				},
				"closeButtonProps": {
					"name": "closeButtonProps",
					"type": "unknown",
					"description": "Extends EuiButtonIconProps onto the close button",
					"parent": "_EuiFlyoutProps"
				},
				"onClose": {
					"name": "onClose",
					"type": "Event",
					"parent": "_EuiFlyoutProps"
				},
				"ownFocus": {
					"name": "ownFocus",
					"type": "boolean",
					"default": false,
					"description": "Adds an EuiOverlayMask and wraps in an EuiPortal",
					"parent": "_EuiFlyoutProps"
				},
				"hideCloseButton": {
					"name": "hideCloseButton",
					"type": "boolean",
					"description": "Hides the default close button. You must provide another close button somewhere within the flyout.",
					"parent": "_EuiFlyoutProps"
				},
				"closeButtonPosition": {
					"name": "closeButtonPosition",
					"type": "string",
					"enum": [
						"inside",
						"outside"
					],
					"default": "outside",
					"description": "Position of close button. inside: Floating to just inside the flyout, always top right; outside: Floating just outside the flyout near the top (side dependent on side). Helpful when the close button may cover other interactable content.",
					"parent": "_EuiFlyoutProps"
				},
				"maskProps": {
					"name": "maskProps",
					"type": "unknown",
					"description": "Adjustments to the EuiOverlayMask that is added when ownFocus = true",
					"parent": "_EuiFlyoutProps"
				},
				"outsideClickCloses": {
					"name": "outsideClickCloses",
					"type": "boolean",
					"default": false,
					"description": "Forces this interaction on the mask overlay or body content. Defaults depend on ownFocus and type values",
					"parent": "_EuiFlyoutProps"
				},
				"side": {
					"name": "side",
					"type": "string",
					"enum": [
						"left",
						"right"
					],
					"default": "left",
					"description": "Which side of the window to attach to. The left option should only be used for navigation.",
					"parent": "_EuiFlyoutProps"
				},
				"pushMinBreakpoint": {
					"name": "pushMinBreakpoint",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs",
						"l",
						"xl"
					],
					"description": "Named breakpoint or pixel value for customizing the minimum window width to enable the push type",
					"parent": "_EuiFlyoutProps"
				},
				"as": {
					"name": "as",
					"type": "string",
					"enum": [
						"div"
					],
					"default": "nav as EuiCollapsibleNavProps[as]",
					"description": "Sets the HTML element for EuiFlyout",
					"parent": "Props"
				},
				"isOpen": {
					"name": "isOpen",
					"type": "boolean",
					"default": false,
					"description": "Shows the navigation flyout",
					"parent": "EuiCollapsibleNavProps"
				},
				"isDocked": {
					"name": "isDocked",
					"type": "boolean",
					"default": false,
					"description": "Keeps navigation flyout visible and push <body> content via padding",
					"parent": "EuiCollapsibleNavProps"
				},
				"dockedBreakpoint": {
					"name": "dockedBreakpoint",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs",
						"l",
						"xl"
					],
					"default": "l",
					"description": "Named breakpoint or pixel value for customizing the minimum window width to enable docking",
					"parent": "EuiCollapsibleNavProps"
				},
				"button": {
					"name": "button",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Button for controlling visible state of the nav",
					"parent": "EuiCollapsibleNavProps"
				},
				"showButtonIfDocked": {
					"name": "showButtonIfDocked",
					"type": "boolean",
					"default": false,
					"description": "Keeps the display of toggle button when in docked state",
					"parent": "EuiCollapsibleNavProps"
				}
			},
			"relativePath": "src/components/collapsible_nav/collapsible_nav.tsx"
		},
		"ElasticEui_EuiColorPicker": {
			"id": "ElasticEui_EuiColorPicker",
			"name": "EuiColorPicker",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiColorPicker",
				"lib": "elasticEui"
			},
			"required": [
				"onChange"
			],
			"props": {
				"button": {
					"name": "button",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Custom element to use instead of text input",
					"parent": "EuiColorPickerProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"default": false,
					"description": "Use the compressed style for EuiFieldText",
					"parent": "EuiColorPickerProps"
				},
				"display": {
					"name": "display",
					"type": "string",
					"enum": [
						"inline",
						"default"
					],
					"default": "default",
					"parent": "EuiColorPickerProps"
				},
				"disabled": {
					"name": "disabled",
					"type": "boolean",
					"parent": "EuiColorPickerProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"default": false,
					"parent": "EuiColorPickerProps"
				},
				"id": {
					"name": "id",
					"type": "string",
					"parent": "EuiColorPickerProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"description": "Custom validation flag",
					"parent": "EuiColorPickerProps"
				},
				"mode": {
					"name": "mode",
					"type": "string",
					"enum": [
						"default",
						"swatch",
						"picker",
						"secondaryInput"
					],
					"default": "default",
					"description": "Choose between swatches with gradient picker (default), swatches only, gradient picker only, or secondary input only.",
					"parent": "EuiColorPickerProps"
				},
				"popoverZIndex": {
					"name": "popoverZIndex",
					"type": "number",
					"description": "Custom z-index for the popover",
					"parent": "EuiColorPickerProps"
				},
				"readOnly": {
					"name": "readOnly",
					"type": "boolean",
					"default": false,
					"parent": "EuiColorPickerProps"
				},
				"swatches": {
					"name": "swatches",
					"type": "array",
					"items": {
						"type": "string"
					},
					"description": "Array of hex strings (3 or 6 character) to use as swatch options. Defaults to EUI visualization colors",
					"parent": "EuiColorPickerProps"
				},
				"prepend": {
					"name": "prepend",
					"type": "string",
					"description": "Creates an input group with element(s) coming before input. It only shows when the display is set to default. string | ReactElement or an array of these",
					"parent": "EuiColorPickerProps"
				},
				"append": {
					"name": "append",
					"type": "string",
					"description": "Creates an input group with element(s) coming after input. It only shows when the display is set to default. string | ReactElement or an array of these",
					"parent": "EuiColorPickerProps"
				},
				"showAlpha": {
					"name": "showAlpha",
					"type": "boolean",
					"default": false,
					"description": "Whether to render the alpha channel (opacity) value range slider.",
					"parent": "EuiColorPickerProps"
				},
				"format": {
					"name": "format",
					"type": "string",
					"enum": [
						"hex",
						"rgba"
					],
					"description": "Will format the text input in the provided format when possible (hue and saturation selection) Exceptions: Manual text input and swatches will display as-authored Default is to display the last format entered by the user",
					"parent": "EuiColorPickerProps"
				},
				"secondaryInputDisplay": {
					"name": "secondaryInputDisplay",
					"type": "string",
					"enum": [
						"none",
						"top",
						"bottom"
					],
					"default": "none",
					"description": "Placement option for a secondary color value input.",
					"parent": "EuiColorPickerProps"
				},
				"isClearable": {
					"name": "isClearable",
					"type": "boolean",
					"default": false,
					"description": "Add a button to the primary input to clear its value.",
					"parent": "EuiColorPickerProps"
				},
				"placeholder": {
					"name": "placeholder",
					"type": "string",
					"description": "Text to replace the default Transparent placeholder for unset color values.",
					"parent": "EuiColorPickerProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"description": "hex (string) RGB (as comma separated string) RGBa (as comma separated string) Empty string will register as transparent",
					"parent": "HTMLDivElementOverrides"
				},
				"onBlur": {
					"name": "onBlur",
					"type": "Event",
					"parent": "HTMLDivElementOverrides"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"description": "text (string, as entered or selected) hex (8-digit hex if alpha < 1, otherwise 6-digit hex) RGBa (as array; values of NaN if color is invalid) isValid (boolean signifying if the input text is a valid color)",
					"parent": "HTMLDivElementOverrides"
				},
				"onFocus": {
					"name": "onFocus",
					"type": "Event",
					"parent": "HTMLDivElementOverrides"
				}
			},
			"relativePath": "src/components/color_picker/color_picker.tsx"
		},
		"ElasticEui_EuiColorPickerSwatch": {
			"id": "ElasticEui_EuiColorPickerSwatch",
			"name": "EuiColorPickerSwatch",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiColorPickerSwatch",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"parent": "EuiColorPickerSwatchProps"
				},
				"ref": {
					"name": "ref",
					"type": "Event",
					"parent": "RefAttributes"
				}
			},
			"relativePath": "src/components/color_picker/color_picker_swatch.tsx"
		},
		"ElasticEui_EuiHue": {
			"id": "ElasticEui_EuiHue",
			"name": "EuiHue",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiHue",
				"lib": "elasticEui"
			},
			"required": [
				"onChange"
			],
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"hex": {
					"name": "hex",
					"type": "string",
					"parent": "EuiHueProps"
				},
				"hue": {
					"name": "hue",
					"type": "number",
					"default": 1,
					"parent": "EuiHueProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"parent": "EuiHueProps"
				}
			},
			"relativePath": "src/components/color_picker/hue.tsx"
		},
		"ElasticEui_EuiSaturation": {
			"id": "ElasticEui_EuiSaturation",
			"name": "EuiSaturation",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiSaturation",
				"lib": "elasticEui"
			},
			"required": [
				"onChange"
			],
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"default": "[1, 0, 0]",
					"parent": "HTMLDivElementOverrides"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"parent": "HTMLDivElementOverrides"
				},
				"hex": {
					"name": "hex",
					"type": "string",
					"parent": "EuiSaturationProps"
				},
				"ref": {
					"name": "ref",
					"type": "Event",
					"parent": "RefAttributes"
				}
			},
			"relativePath": "src/components/color_picker/saturation.tsx"
		},
		"ElasticEui_EuiColorStops": {
			"id": "ElasticEui_EuiColorStops",
			"name": "EuiColorStops",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiColorStops",
				"lib": "elasticEui"
			},
			"required": [
				"colorStops",
				"onChange",
				"label"
			],
			"props": {
				"addColor": {
					"name": "addColor",
					"type": "string",
					"default": "VISUALIZATION_COLORS[1]",
					"parent": "EuiColorStopsProps"
				},
				"colorStops": {
					"name": "colorStops",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "An array of #ColorStop. The stops must be numbers in an ordered range.",
					"parent": "EuiColorStopsProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "array",
					"items": {
						"type": "Event"
					},
					"parent": "EuiColorStopsProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"parent": "EuiColorStopsProps"
				},
				"disabled": {
					"name": "disabled",
					"type": "boolean",
					"parent": "EuiColorStopsProps"
				},
				"readOnly": {
					"name": "readOnly",
					"type": "boolean",
					"parent": "EuiColorStopsProps"
				},
				"invalid": {
					"name": "invalid",
					"type": "boolean",
					"parent": "EuiColorStopsProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"parent": "EuiColorStopsProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "EuiColorStopsProps"
				},
				"max": {
					"name": "max",
					"type": "number",
					"parent": "EuiColorStopsProps"
				},
				"min": {
					"name": "min",
					"type": "number",
					"parent": "EuiColorStopsProps"
				},
				"label": {
					"name": "label",
					"type": "string",
					"parent": "EuiColorStopsProps"
				},
				"stopType": {
					"name": "stopType",
					"type": "string",
					"enum": [
						"fixed",
						"gradient",
						"stepped"
					],
					"default": "gradient",
					"description": "Specify the type of stops: fixed: individual color blocks. gradient: each color fades into the next. stepped: interpolation between colors with a fixed number of steps.",
					"parent": "EuiColorStopsProps"
				},
				"stepNumber": {
					"name": "stepNumber",
					"type": "number",
					"default": 10,
					"description": "Only works when stopType=stepped",
					"parent": "EuiColorStopsProps"
				},
				"mode": {
					"name": "mode",
					"type": "string",
					"enum": [
						"default",
						"swatch",
						"picker",
						"secondaryInput"
					],
					"default": "default",
					"parent": "EuiColorStopsProps"
				},
				"swatches": {
					"name": "swatches",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "EuiColorStopsProps"
				},
				"showAlpha": {
					"name": "showAlpha",
					"type": "boolean",
					"default": false,
					"parent": "EuiColorStopsProps"
				},
				"valueInputProps": {
					"name": "valueInputProps",
					"type": "unknown",
					"description": "Props passed to the value input field in the color stop popover. Can be used to configure functionality like append or prepend.",
					"parent": "EuiColorStopsProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/color_picker/color_stops/color_stops.tsx"
		},
		"ElasticEui_EuiColorPalettePicker": {
			"id": "ElasticEui_EuiColorPalettePicker",
			"name": "EuiColorPalettePicker",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiColorPalettePicker",
				"lib": "elasticEui"
			},
			"required": [
				"palettes"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"default": false,
					"parent": "EuiSuperSelectControlProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"parent": "EuiSuperSelectControlProps"
				},
				"onFocus": {
					"name": "onFocus",
					"type": "Event",
					"parent": "EuiSuperSelectProps"
				},
				"onBlur": {
					"name": "onBlur",
					"type": "Event",
					"parent": "EuiSuperSelectProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"description": "You must pass an onChange function to handle the update of the value",
					"parent": "EuiSuperSelectProps"
				},
				"name": {
					"name": "name",
					"type": "string",
					"parent": "EuiSuperSelectControlProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"default": false,
					"parent": "EuiSuperSelectControlProps"
				},
				"readOnly": {
					"name": "readOnly",
					"type": "boolean",
					"default": false,
					"parent": "EuiSuperSelectControlProps"
				},
				"isOpen": {
					"name": "isOpen",
					"type": "boolean",
					"description": "Controls whether the options are shown. Default: false",
					"parent": "EuiSuperSelectProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"default": false,
					"parent": "EuiSuperSelectControlProps"
				},
				"prepend": {
					"name": "prepend",
					"type": "string",
					"description": "Creates an input group with element(s) coming before input. string | ReactElement or an array of these",
					"parent": "EuiSuperSelectControlProps"
				},
				"append": {
					"name": "append",
					"type": "string",
					"description": "Creates an input group with element(s) coming after input. string | ReactElement or an array of these",
					"parent": "EuiSuperSelectControlProps"
				},
				"screenReaderId": {
					"name": "screenReaderId",
					"type": "string",
					"description": "Creates a semantic label ID for the div[role=listbox] thats opened on click or keypress. __Generated and passed down by EuiSuperSelect.__",
					"parent": "EuiSuperSelectControlProps"
				},
				"valueOfSelected": {
					"name": "valueOfSelected",
					"type": "string",
					"parent": "EuiSuperSelectProps"
				},
				"itemClassName": {
					"name": "itemClassName",
					"type": "string",
					"description": "Classes for the context menu item",
					"parent": "EuiSuperSelectProps"
				},
				"popoverProps": {
					"name": "popoverProps",
					"type": "unknown",
					"description": "Optional props to pass to the underlying [EuiPopover](/#/layout/popover). Allows fine-grained control of the popover dropdown menu, including repositionOnScroll for EuiSuperSelects used within scrollable containers, and customizing popover panel styling.  Does not accept a nested popoverProps.isOpen property - use the top level isOpen API instead.",
					"parent": "EuiSuperSelectProps"
				},
				"selectionDisplay": {
					"name": "selectionDisplay",
					"type": "string",
					"enum": [
						"title",
						"palette"
					],
					"default": "palette",
					"description": "Specify what should be displayed after a selection: a palette or title",
					"parent": "EuiColorPalettePickerProps"
				},
				"palettes": {
					"name": "palettes",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "An array of one of the following objects: #EuiColorPalettePickerPaletteText, #EuiColorPalettePickerPaletteFixed, #EuiColorPalettePickerPaletteGradient",
					"parent": "EuiColorPalettePickerProps"
				}
			},
			"relativePath": "src/components/color_picker/color_palette_picker/color_palette_picker.tsx"
		},
		"ElasticEui_EuiColorPaletteDisplay": {
			"id": "ElasticEui_EuiColorPaletteDisplay",
			"name": "EuiColorPaletteDisplay",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiColorPaletteDisplay",
				"lib": "elasticEui"
			},
			"required": [
				"palette"
			],
			"props": {
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs"
					],
					"default": "s",
					"description": "Height of the palette display",
					"parent": "EuiColorPaletteDisplayProps"
				},
				"type": {
					"name": "type",
					"type": "string",
					"enum": [
						"fixed",
						"gradient"
					],
					"default": "fixed",
					"description": "Specify the type of palette. gradient: each color fades into the next. fixed: individual color blocks.",
					"parent": "DisplayGradient"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"palette": {
					"name": "palette",
					"type": "array",
					"description": "Array of color strings or an array of #ColorStop. The stops must be numbers in an ordered range.",
					"items": {
						"type": "string"
					},
					"parent": "EuiColorPaletteDisplayShared"
				}
			},
			"relativePath": "src/components/color_picker/color_palette_display/color_palette_display.tsx"
		},
		"ElasticEui_EuiComboBox": {
			"id": "ElasticEui_EuiComboBox",
			"name": "EuiComboBox",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiComboBox",
				"lib": "elasticEui"
			},
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "_EuiComboBoxProps"
				},
				"async": {
					"name": "async",
					"type": "boolean",
					"default": false,
					"description": "Updates the list of options asynchronously",
					"parent": "_EuiComboBoxProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "_EuiComboBoxProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"default": false,
					"description": "When true creates a shorter height input",
					"parent": "_EuiComboBoxProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"default": false,
					"description": "When true expands to the entire width available",
					"parent": "_EuiComboBoxProps"
				},
				"id": {
					"name": "id",
					"type": "string",
					"parent": "_EuiComboBoxProps"
				},
				"inputRef": {
					"name": "inputRef",
					"type": "Event",
					"parent": "_EuiComboBoxProps"
				},
				"isClearable": {
					"name": "isClearable",
					"type": "boolean",
					"default": false,
					"description": "Shows a button that quickly clears any input",
					"parent": "_EuiComboBoxProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"description": "Disables the input",
					"parent": "_EuiComboBoxProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"parent": "_EuiComboBoxProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"description": "Swaps the dropdown options for a loading spinner",
					"parent": "_EuiComboBoxProps"
				},
				"noSuggestions": {
					"name": "noSuggestions",
					"type": "boolean",
					"description": "Doesnt show the suggestions list/dropdown",
					"parent": "_EuiComboBoxProps"
				},
				"onBlur": {
					"name": "onBlur",
					"type": "Event",
					"parent": "_EuiComboBoxProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"description": "Called every time the query in the combo box is parsed",
					"parent": "_EuiComboBoxProps"
				},
				"onFocus": {
					"name": "onFocus",
					"type": "Event",
					"parent": "_EuiComboBoxProps"
				},
				"onKeyDown": {
					"name": "onKeyDown",
					"type": "Event",
					"parent": "_EuiComboBoxProps"
				},
				"onSearchChange": {
					"name": "onSearchChange",
					"type": "Event",
					"description": "Called every time the text query in the search box is parsed",
					"parent": "_EuiComboBoxProps"
				},
				"placeholder": {
					"name": "placeholder",
					"type": "string",
					"description": "Sets the placeholder of the input",
					"parent": "_EuiComboBoxProps"
				},
				"rowHeight": {
					"name": "rowHeight",
					"type": "number",
					"description": "Every option must be the same height and must be explicitly set if using a custom render",
					"parent": "_EuiComboBoxProps"
				},
				"singleSelection": {
					"name": "singleSelection",
					"type": "boolean",
					"default": false,
					"description": "When true only allows the user to select a single option. Set to { asPlainText: true } to not render input selection as pills",
					"parent": "_EuiComboBoxProps"
				},
				"sortMatchesBy": {
					"name": "sortMatchesBy",
					"type": "string",
					"enum": [
						"none",
						"startsWith"
					],
					"default": "none as const",
					"description": "Display matching options by: startsWith: moves items that start with search value to top of the list; none: dont change the sort order of initial object",
					"parent": "_EuiComboBoxProps"
				},
				"prepend": {
					"name": "prepend",
					"type": "string",
					"description": "Creates an input group with element(s) coming before input. It wont show if singleSelection is set to false. string | ReactElement or an array of these",
					"parent": "_EuiComboBoxProps"
				},
				"append": {
					"name": "append",
					"type": "string",
					"description": "Creates an input group with element(s) coming after input. It wont show if singleSelection is set to false. string | ReactElement or an array of these",
					"parent": "_EuiComboBoxProps"
				},
				"delimiter": {
					"name": "delimiter",
					"type": "string",
					"description": "A special character to use as a value separator. Typically a comma ,",
					"parent": "_EuiComboBoxProps"
				},
				"autoFocus": {
					"name": "autoFocus",
					"type": "boolean",
					"description": "Specifies that the input should have focus when the component loads",
					"parent": "_EuiComboBoxProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Required when rendering without a visible label from [EuiFormRow](/#/forms/form-layouts).",
					"parent": "_EuiComboBoxProps"
				},
				"aria-labelledby": {
					"name": "aria-labelledby",
					"type": "string",
					"description": "Reference ID of a text element containing the visible label for the combo box when not supplied by aria-label or from [EuiFormRow](/#/forms/form-layouts).",
					"parent": "_EuiComboBoxProps"
				},
				"options": {
					"name": "options",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"default": [],
					"description": "Array of EuiComboBoxOptionOption objects. See #EuiComboBoxOptionOption",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"customOptionText": {
					"name": "customOptionText",
					"type": "string",
					"description": "Creates a custom text option. You can use {searchValue} inside your string to better customize your text. It wont show if theres no onCreateOption.",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"onCreateOption": {
					"name": "onCreateOption",
					"type": "Event",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"renderOption": {
					"name": "renderOption",
					"type": "Event",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"selectedOptions": {
					"name": "selectedOptions",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"default": [],
					"parent": "EuiComboBoxOptionsListProps"
				}
			},
			"relativePath": "src/components/combo_box/combo_box.tsx"
		},
		"ElasticEui_EuiComboBoxInput": {
			"id": "ElasticEui_EuiComboBoxInput",
			"name": "EuiComboBoxInput",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiComboBoxInput",
				"lib": "elasticEui"
			},
			"required": [
				"compressed",
				"hasSelectedOptions",
				"isListOpen",
				"noIcon",
				"onCloseListClick",
				"onFocus",
				"onOpenListClick",
				"rootId",
				"searchValue",
				"updatePosition"
			],
			"props": {
				"autoSizeInputRef": {
					"name": "autoSizeInputRef",
					"type": "Event",
					"parent": "EuiComboBoxInputProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"parent": "EuiComboBoxInputProps"
				},
				"focusedOptionId": {
					"name": "focusedOptionId",
					"type": "string",
					"parent": "EuiComboBoxInputProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"parent": "EuiComboBoxInputProps"
				},
				"hasSelectedOptions": {
					"name": "hasSelectedOptions",
					"type": "boolean",
					"parent": "EuiComboBoxInputProps"
				},
				"id": {
					"name": "id",
					"type": "string",
					"parent": "EuiComboBoxInputProps"
				},
				"inputRef": {
					"name": "inputRef",
					"type": "Event",
					"parent": "EuiComboBoxInputProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"parent": "EuiComboBoxInputProps"
				},
				"isListOpen": {
					"name": "isListOpen",
					"type": "boolean",
					"parent": "EuiComboBoxInputProps"
				},
				"noIcon": {
					"name": "noIcon",
					"type": "boolean",
					"parent": "EuiComboBoxInputProps"
				},
				"onBlur": {
					"name": "onBlur",
					"type": "Event",
					"parent": "EuiComboBoxInputProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"parent": "EuiComboBoxInputProps"
				},
				"onClear": {
					"name": "onClear",
					"type": "Event",
					"parent": "EuiComboBoxInputProps"
				},
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"parent": "EuiComboBoxInputProps"
				},
				"onCloseListClick": {
					"name": "onCloseListClick",
					"type": "Event",
					"parent": "EuiComboBoxInputProps"
				},
				"onFocus": {
					"name": "onFocus",
					"type": "Event",
					"parent": "EuiComboBoxInputProps"
				},
				"onOpenListClick": {
					"name": "onOpenListClick",
					"type": "Event",
					"parent": "EuiComboBoxInputProps"
				},
				"onRemoveOption": {
					"name": "onRemoveOption",
					"type": "Event",
					"parent": "EuiComboBoxInputProps"
				},
				"placeholder": {
					"name": "placeholder",
					"type": "string",
					"parent": "EuiComboBoxInputProps"
				},
				"rootId": {
					"name": "rootId",
					"type": "Event",
					"parent": "EuiComboBoxInputProps"
				},
				"searchValue": {
					"name": "searchValue",
					"type": "string",
					"parent": "EuiComboBoxInputProps"
				},
				"selectedOptions": {
					"name": "selectedOptions",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "EuiComboBoxInputProps"
				},
				"singleSelection": {
					"name": "singleSelection",
					"type": "boolean",
					"parent": "EuiComboBoxInputProps"
				},
				"toggleButtonRef": {
					"name": "toggleButtonRef",
					"type": "Event",
					"parent": "EuiComboBoxInputProps"
				},
				"updatePosition": {
					"name": "updatePosition",
					"type": "Event",
					"parent": "EuiComboBoxInputProps"
				},
				"value": {
					"name": "value",
					"type": "string",
					"parent": "EuiComboBoxInputProps"
				},
				"prepend": {
					"name": "prepend",
					"type": "string",
					"parent": "EuiComboBoxInputProps"
				},
				"append": {
					"name": "append",
					"type": "string",
					"parent": "EuiComboBoxInputProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"parent": "EuiComboBoxInputProps"
				},
				"autoFocus": {
					"name": "autoFocus",
					"type": "boolean",
					"parent": "EuiComboBoxInputProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "EuiComboBoxInputProps"
				},
				"aria-labelledby": {
					"name": "aria-labelledby",
					"type": "string",
					"parent": "EuiComboBoxInputProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/combo_box/combo_box_input/combo_box_input.tsx"
		},
		"ElasticEui_EuiComboBoxPill": {
			"id": "ElasticEui_EuiComboBoxPill",
			"name": "EuiComboBoxPill",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiComboBoxPill",
				"lib": "elasticEui"
			},
			"required": [
				"option"
			],
			"props": {
				"asPlainText": {
					"name": "asPlainText",
					"type": "boolean",
					"parent": "EuiComboBoxPillProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "EuiComboBoxPillProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"default": "hollow",
					"parent": "EuiComboBoxPillProps"
				},
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"parent": "EuiComboBoxPillProps"
				},
				"onClickAriaLabel": {
					"name": "onClickAriaLabel",
					"type": "string",
					"parent": "EuiComboBoxPillProps"
				},
				"onClose": {
					"name": "onClose",
					"type": "Event",
					"parent": "EuiComboBoxPillProps"
				},
				"option": {
					"name": "option",
					"type": "unknown",
					"parent": "EuiComboBoxPillProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"children": {
					"name": "children",
					"type": "string"
				}
			},
			"relativePath": "src/components/combo_box/combo_box_input/combo_box_pill.tsx"
		},
		"ElasticEui_EuiComboBoxOptionsList": {
			"id": "ElasticEui_EuiComboBoxOptionsList",
			"name": "EuiComboBoxOptionsList",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiComboBoxOptionsList",
				"lib": "elasticEui"
			},
			"required": [
				"listboxAriaLabel",
				"listRef",
				"matchingOptions",
				"onCloseList",
				"optionRef",
				"options",
				"rootId",
				"searchValue",
				"selectedOptions",
				"updatePosition",
				"width"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"default": "",
					"parent": "CommonProps"
				},
				"element": {
					"name": "element",
					"type": "string",
					"enum": [
						"button",
						"div"
					],
					"parent": "_EuiPanelDivlike"
				},
				"hasShadow": {
					"name": "hasShadow",
					"type": "boolean",
					"description": "Adds a medium shadow to the panel; Only works when color=plain",
					"parent": "_EuiPanelProps"
				},
				"hasBorder": {
					"name": "hasBorder",
					"type": "boolean",
					"description": "Adds a slight 1px border on all edges. Only works when color=plain | transparent Default is undefined and will default to that themes panel style",
					"parent": "_EuiPanelProps"
				},
				"paddingSize": {
					"name": "paddingSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l"
					],
					"description": "Padding for all four sides",
					"parent": "_EuiPanelProps"
				},
				"borderRadius": {
					"name": "borderRadius",
					"type": "string",
					"enum": [
						"none",
						"m"
					],
					"description": "Corner border radius",
					"parent": "_EuiPanelProps"
				},
				"grow": {
					"name": "grow",
					"type": "boolean",
					"description": "When true the panel will grow in height to match EuiFlexItem",
					"parent": "_EuiPanelProps"
				},
				"panelRef": {
					"name": "panelRef",
					"type": "Event",
					"parent": "_EuiPanelProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"primary",
						"accent",
						"success",
						"warning",
						"danger",
						"subdued",
						"plain",
						"transparent"
					],
					"description": "Background color of the panel; Usually a lightened form of the brand colors",
					"parent": "_EuiPanelProps"
				},
				"activeOptionIndex": {
					"name": "activeOptionIndex",
					"type": "number",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"areAllOptionsSelected": {
					"name": "areAllOptionsSelected",
					"type": "boolean",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"listboxAriaLabel": {
					"name": "listboxAriaLabel",
					"type": "string",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"customOptionText": {
					"name": "customOptionText",
					"type": "string",
					"description": "Creates a custom text option. You can use {searchValue} inside your string to better customize your text. It wont show if theres no onCreateOption.",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"getSelectedOptionForSearchValue": {
					"name": "getSelectedOptionForSearchValue",
					"type": "Event",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"listRef": {
					"name": "listRef",
					"type": "Event",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"matchingOptions": {
					"name": "matchingOptions",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "EuiComboBoxOptionsListProps"
				},
				"onCloseList": {
					"name": "onCloseList",
					"type": "Event",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"onCreateOption": {
					"name": "onCreateOption",
					"type": "Event",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"onOptionClick": {
					"name": "onOptionClick",
					"type": "Event",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"onOptionEnterKey": {
					"name": "onOptionEnterKey",
					"type": "Event",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"optionRef": {
					"name": "optionRef",
					"type": "Event",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"options": {
					"name": "options",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Array of EuiComboBoxOptionOption objects. See #EuiComboBoxOptionOption",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"position": {
					"name": "position",
					"type": "string",
					"enum": [
						"top",
						"bottom"
					],
					"parent": "EuiComboBoxOptionsListProps"
				},
				"renderOption": {
					"name": "renderOption",
					"type": "Event",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"rootId": {
					"name": "rootId",
					"type": "Event",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"rowHeight": {
					"name": "rowHeight",
					"type": "number",
					"default": 29,
					"parent": "EuiComboBoxOptionsListProps"
				},
				"scrollToIndex": {
					"name": "scrollToIndex",
					"type": "number",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"searchValue": {
					"name": "searchValue",
					"type": "string",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"selectedOptions": {
					"name": "selectedOptions",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "EuiComboBoxOptionsListProps"
				},
				"updatePosition": {
					"name": "updatePosition",
					"type": "Event",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"width": {
					"name": "width",
					"type": "number",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"singleSelection": {
					"name": "singleSelection",
					"type": "boolean",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"delimiter": {
					"name": "delimiter",
					"type": "string",
					"parent": "EuiComboBoxOptionsListProps"
				},
				"zIndex": {
					"name": "zIndex",
					"type": "number",
					"parent": "EuiComboBoxOptionsListProps"
				}
			},
			"relativePath": "src/components/combo_box/combo_box_options_list/combo_box_options_list.tsx"
		},
		"ElasticEui_EuiComboBoxOption": {
			"id": "ElasticEui_EuiComboBoxOption",
			"name": "EuiComboBoxOption",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiComboBoxOption",
				"lib": "elasticEui"
			},
			"required": [
				"isFocused",
				"onClick",
				"onEnterKey",
				"option"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "EuiComboBoxOptionProps"
				},
				"disabled": {
					"name": "disabled",
					"type": "boolean",
					"parent": "EuiComboBoxOptionProps"
				},
				"isFocused": {
					"name": "isFocused",
					"type": "boolean",
					"parent": "EuiComboBoxOptionProps"
				},
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"parent": "EuiComboBoxOptionProps"
				},
				"onEnterKey": {
					"name": "onEnterKey",
					"type": "Event",
					"parent": "EuiComboBoxOptionProps"
				},
				"option": {
					"name": "option",
					"type": "unknown",
					"parent": "EuiComboBoxOptionProps"
				},
				"optionRef": {
					"name": "optionRef",
					"type": "Event",
					"parent": "EuiComboBoxOptionProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"children": {
					"name": "children",
					"type": "array",
					"items": {
						"type": "Node"
					}
				}
			},
			"relativePath": "src/components/combo_box/combo_box_options_list/combo_box_option.tsx"
		},
		"ElasticEui_EuiComboBoxTitle": {
			"id": "ElasticEui_EuiComboBoxTitle",
			"name": "EuiComboBoxTitle",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiComboBoxTitle",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/components/combo_box/combo_box_options_list/combo_box_title.tsx"
		},
		"ElasticEui_EuiComment": {
			"id": "ElasticEui_EuiComment",
			"name": "EuiComment",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiComment",
				"lib": "elasticEui"
			},
			"required": [
				"username"
			],
			"props": {
				"username": {
					"name": "username",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Author of the comment. Display a small icon or avatar with it if needed.",
					"parent": "EuiCommentEventProps"
				},
				"timestamp": {
					"name": "timestamp",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Time of occurrence of the event. Its format is set on the consumers side",
					"parent": "EuiCommentEventProps"
				},
				"event": {
					"name": "event",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Describes the event that took place",
					"parent": "EuiCommentEventProps"
				},
				"actions": {
					"name": "actions",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Custom actions that the user can perform from the comments header",
					"parent": "EuiCommentEventProps"
				},
				"type": {
					"name": "type",
					"type": "string",
					"enum": [
						"regular",
						"update"
					],
					"default": "regular",
					"description": "Use update when the comment is primarily showing info about actions that the user or the system has performed (e.g. user1 edited a case).",
					"parent": "EuiCommentEventProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"timelineIcon": {
					"name": "timelineIcon",
					"type": "string",
					"description": "Main icon that accompanies the comment. The default is user for regular comments and dot for update comments. To customize, pass a string as an EuiIcon[type] or any ReactNode.",
					"parent": "EuiCommentTimelineProps"
				}
			},
			"relativePath": "src/components/comment_list/comment.tsx"
		},
		"ElasticEui_EuiCommentEvent": {
			"id": "ElasticEui_EuiCommentEvent",
			"name": "EuiCommentEvent",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiCommentEvent",
				"lib": "elasticEui"
			},
			"required": [
				"username"
			],
			"props": {
				"username": {
					"name": "username",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Author of the comment. Display a small icon or avatar with it if needed.",
					"parent": "EuiCommentEventProps"
				},
				"timestamp": {
					"name": "timestamp",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Time of occurrence of the event. Its format is set on the consumers side",
					"parent": "EuiCommentEventProps"
				},
				"event": {
					"name": "event",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Describes the event that took place",
					"parent": "EuiCommentEventProps"
				},
				"actions": {
					"name": "actions",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Custom actions that the user can perform from the comments header",
					"parent": "EuiCommentEventProps"
				},
				"type": {
					"name": "type",
					"type": "string",
					"enum": [
						"regular",
						"update"
					],
					"default": "regular",
					"description": "Use update when the comment is primarily showing info about actions that the user or the system has performed (e.g. user1 edited a case).",
					"parent": "EuiCommentEventProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/comment_list/comment_event.tsx"
		},
		"ElasticEui_EuiCommentTimeline": {
			"id": "ElasticEui_EuiCommentTimeline",
			"name": "EuiCommentTimeline",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiCommentTimeline",
				"lib": "elasticEui"
			},
			"props": {
				"timelineIcon": {
					"name": "timelineIcon",
					"type": "string",
					"description": "Main icon that accompanies the comment. The default is user for regular comments and dot for update comments. To customize, pass a string as an EuiIcon[type] or any ReactNode.",
					"parent": "EuiCommentTimelineProps"
				},
				"type": {
					"name": "type",
					"type": "string",
					"enum": [
						"regular",
						"update"
					],
					"default": "regular",
					"parent": "EuiCommentTimelineProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/comment_list/comment_timeline.tsx"
		},
		"ElasticEui_EuiCommentList": {
			"id": "ElasticEui_EuiCommentList",
			"name": "EuiCommentList",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiCommentList",
				"lib": "elasticEui"
			},
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"comments": {
					"name": "comments",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "List of comments to render. See #EuiComment",
					"parent": "EuiCommentListProps"
				}
			},
			"relativePath": "src/components/comment_list/comment_list.tsx"
		},
		"ElasticEui_EuiContext": {
			"id": "ElasticEui_EuiContext",
			"name": "EuiContext",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiContext",
				"lib": "elasticEui"
			},
			"props": {
				"i18n": {
					"name": "i18n",
					"type": "unknown",
					"parent": "EuiContextProps"
				},
				"children": {
					"name": "children",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "ReactNode to render as this components content",
					"parent": "EuiContextProps"
				}
			},
			"relativePath": "src/components/context/context.tsx"
		},
		"ElasticEui_EuiI18nConsumer": {
			"id": "ElasticEui_EuiI18nConsumer",
			"name": "EuiI18nConsumer",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiI18nConsumer",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/components/context/context.tsx"
		},
		"ElasticEui_EuiContextMenu": {
			"id": "ElasticEui_EuiContextMenu",
			"name": "EuiContextMenu",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiContextMenu",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"panels": {
					"name": "panels",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"default": [],
					"parent": "EuiContextMenuProps"
				},
				"initialPanelId": {
					"name": "initialPanelId",
					"type": "string",
					"parent": "EuiContextMenuProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m"
					],
					"default": "m",
					"description": "Alters the size of the items and the title",
					"parent": "EuiContextMenuProps"
				}
			},
			"relativePath": "src/components/context_menu/context_menu.tsx"
		},
		"ElasticEui_EuiContextMenuPanel": {
			"id": "ElasticEui_EuiContextMenuPanel",
			"name": "EuiContextMenuPanel",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiContextMenuPanel",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"initialFocusedItemIndex": {
					"name": "initialFocusedItemIndex",
					"type": "number",
					"parent": "EuiContextMenuPanelProps"
				},
				"items": {
					"name": "items",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"parent": "EuiContextMenuPanelProps"
				},
				"onClose": {
					"name": "onClose",
					"type": "Event",
					"parent": "EuiContextMenuPanelProps"
				},
				"onHeightChange": {
					"name": "onHeightChange",
					"type": "Event",
					"parent": "EuiContextMenuPanelProps"
				},
				"onTransitionComplete": {
					"name": "onTransitionComplete",
					"type": "Event",
					"parent": "EuiContextMenuPanelProps"
				},
				"onUseKeyboardToNavigate": {
					"name": "onUseKeyboardToNavigate",
					"type": "Event",
					"parent": "EuiContextMenuPanelProps"
				},
				"showNextPanel": {
					"name": "showNextPanel",
					"type": "unknown",
					"parent": "EuiContextMenuPanelProps"
				},
				"showPreviousPanel": {
					"name": "showPreviousPanel",
					"type": "unknown",
					"parent": "EuiContextMenuPanelProps"
				},
				"title": {
					"name": "title",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"parent": "EuiContextMenuPanelProps"
				},
				"transitionDirection": {
					"name": "transitionDirection",
					"type": "string",
					"enum": [
						"next",
						"previous"
					],
					"parent": "EuiContextMenuPanelProps"
				},
				"transitionType": {
					"name": "transitionType",
					"type": "string",
					"enum": [
						"in",
						"out"
					],
					"parent": "EuiContextMenuPanelProps"
				},
				"watchedItemProps": {
					"name": "watchedItemProps",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "EuiContextMenuPanelProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m"
					],
					"description": "Alters the size of the items and the title",
					"parent": "EuiContextMenuPanelProps"
				}
			},
			"relativePath": "src/components/context_menu/context_menu_panel.tsx"
		},
		"ElasticEui_EuiContextMenuItem": {
			"id": "ElasticEui_EuiContextMenuItem",
			"name": "EuiContextMenuItem",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiContextMenuItem",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"icon": {
					"name": "icon",
					"type": "string",
					"parent": "EuiContextMenuItemProps"
				},
				"hasPanel": {
					"name": "hasPanel",
					"type": "boolean",
					"parent": "EuiContextMenuItemProps"
				},
				"disabled": {
					"name": "disabled",
					"type": "boolean",
					"parent": "EuiContextMenuItemProps"
				},
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"parent": "EuiContextMenuItemProps"
				},
				"buttonRef": {
					"name": "buttonRef",
					"type": "Event",
					"parent": "EuiContextMenuItemProps"
				},
				"toolTipContent": {
					"name": "toolTipContent",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Required if using a tooltip. Add an optional tooltip on hover",
					"parent": "EuiContextMenuItemProps"
				},
				"toolTipTitle": {
					"name": "toolTipTitle",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Optional title for the tooltip",
					"parent": "EuiContextMenuItemProps"
				},
				"toolTipPosition": {
					"name": "toolTipPosition",
					"type": "string",
					"enum": [
						"left",
						"right",
						"top",
						"bottom"
					],
					"description": "Dictates the position of the tooltip.",
					"parent": "EuiContextMenuItemProps"
				},
				"href": {
					"name": "href",
					"type": "string",
					"parent": "EuiContextMenuItemProps"
				},
				"target": {
					"name": "target",
					"type": "string",
					"parent": "EuiContextMenuItemProps"
				},
				"rel": {
					"name": "rel",
					"type": "string",
					"parent": "EuiContextMenuItemProps"
				},
				"layoutAlign": {
					"name": "layoutAlign",
					"type": "string",
					"enum": [
						"top",
						"bottom",
						"center"
					],
					"description": "How to align icon with content of button",
					"parent": "EuiContextMenuItemProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m"
					],
					"description": "Reduce the size to s when in need of a more compressed menu",
					"parent": "EuiContextMenuItemProps"
				}
			},
			"relativePath": "src/components/context_menu/context_menu_item.tsx"
		},
		"ElasticEui_EuiControlBar": {
			"id": "ElasticEui_EuiControlBar",
			"name": "EuiControlBar",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiControlBar",
				"lib": "elasticEui"
			},
			"required": [
				"controls"
			],
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"showContent": {
					"name": "showContent",
					"type": "boolean",
					"default": false,
					"description": "Show or hide the content area containing the children",
					"parent": "EuiControlBarProps"
				},
				"controls": {
					"name": "controls",
					"type": "number",
					"enum": [
						null,
						null,
						null
					],
					"description": "An array of controls, actions, and layout spacers to display. Accepts button | tab | breadcrumbs | text | icon | spacer | divider",
					"parent": "EuiControlBarProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m",
						"l"
					],
					"default": "l",
					"description": "The default height of the content area.",
					"parent": "EuiControlBarProps"
				},
				"maxHeight": {
					"name": "maxHeight",
					"type": "string",
					"description": "Customize the max height. Best when used with size=l as this will ensure the actual height equals the max height set.",
					"parent": "EuiControlBarProps"
				},
				"leftOffset": {
					"name": "leftOffset",
					"type": "number",
					"default": 0,
					"description": "Set the offset from the left side of the screen.",
					"parent": "EuiControlBarProps"
				},
				"rightOffset": {
					"name": "rightOffset",
					"type": "number",
					"default": 0,
					"description": "Set the offset from the left side of the screen.",
					"parent": "EuiControlBarProps"
				},
				"showOnMobile": {
					"name": "showOnMobile",
					"type": "boolean",
					"default": false,
					"description": "The control bar is hidden on mobile by default. Use the showOnMobile prop to force its display on mobile screens. Youll need to ensure that the content you place into the bar renders as expected on mobile.",
					"parent": "EuiControlBarProps"
				},
				"position": {
					"name": "position",
					"type": "string",
					"enum": [
						"fixed",
						"absolute",
						"relative"
					],
					"default": "fixed",
					"description": "By default EuiControlBar will live in a portal, fixed position to the browser window. Change the position of the bar to live inside a container and be positioned against its parent.",
					"parent": "EuiControlBarProps"
				},
				"bodyClassName": {
					"name": "bodyClassName",
					"type": "string",
					"description": "Optional class applied to the body used when position = fixed",
					"parent": "EuiControlBarProps"
				},
				"landmarkHeading": {
					"name": "landmarkHeading",
					"type": "string",
					"description": "Customize the screen reader heading that helps users find this control. Default is Page level controls.",
					"parent": "EuiControlBarProps"
				}
			},
			"relativePath": "src/components/control_bar/control_bar.tsx"
		},
		"ElasticEui_EuiCopy": {
			"id": "ElasticEui_EuiCopy",
			"name": "EuiCopy",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiCopy",
				"lib": "elasticEui"
			},
			"required": [
				"textToCopy"
			],
			"props": {
				"textToCopy": {
					"name": "textToCopy",
					"type": "string",
					"description": "Text that will be copied to clipboard when copy function is executed.",
					"parent": "EuiCopyProps"
				},
				"beforeMessage": {
					"name": "beforeMessage",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Tooltip message displayed before copy function is called.",
					"parent": "EuiCopyProps"
				},
				"afterMessage": {
					"name": "afterMessage",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"default": "Copied",
					"description": "Tooltip message displayed after copy function is called that lets the user know that textToCopy has been copied to the clipboard.",
					"parent": "EuiCopyProps"
				},
				"children": {
					"name": "children",
					"type": "Event",
					"description": "Function that must return a component. First argument is copy function. Use your own logic to create the component that users interact with when triggering copy.",
					"parent": "EuiCopyProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"position": {
					"name": "position",
					"type": "string",
					"enum": [
						"left",
						"right",
						"top",
						"bottom"
					],
					"description": "Suggested position. If there is not enough room for it this will be changed.",
					"parent": "EuiToolTipProps"
				},
				"id": {
					"name": "id",
					"type": "string",
					"description": "Unless you provide one, this will be randomly generated.",
					"parent": "EuiToolTipProps"
				},
				"title": {
					"name": "title",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "An optional title for your tooltip.",
					"parent": "EuiToolTipProps"
				},
				"onMouseOut": {
					"name": "onMouseOut",
					"type": "Event",
					"description": "If supplied, called when mouse movement causes the tool tip to be hidden.",
					"parent": "EuiToolTipProps"
				},
				"display": {
					"name": "display",
					"type": "string",
					"enum": [
						"block",
						"inlineBlock"
					],
					"description": "Common display alternatives for the anchor wrapper",
					"parent": "EuiToolTipProps"
				},
				"content": {
					"name": "content",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "The main content of your tooltip.",
					"parent": "EuiToolTipProps"
				},
				"anchorClassName": {
					"name": "anchorClassName",
					"type": "string",
					"description": "Passes onto the the trigger.",
					"parent": "EuiToolTipProps"
				},
				"delay": {
					"name": "delay",
					"type": "string",
					"enum": [
						"regular",
						"long"
					],
					"description": "Delay before showing tooltip. Good for repeatable items.",
					"parent": "EuiToolTipProps"
				}
			},
			"relativePath": "src/components/copy/copy.tsx"
		},
		"ElasticEui_EuiDataGrid": {
			"id": "ElasticEui_EuiDataGrid",
			"name": "EuiDataGrid",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiDataGrid",
				"lib": "elasticEui"
			},
			"required": [
				"columns",
				"columnVisibility",
				"rowCount",
				"renderCellValue"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"height": {
					"name": "height",
					"type": "string",
					"description": "Sets the grids height, forcing it to overflow in a scrollable container with cell virtualization.",
					"parent": "CommonGridProps"
				},
				"width": {
					"name": "width",
					"type": "string",
					"description": "Sets the grids width, forcing it to overflow in a scrollable container with cell virtualization.",
					"parent": "CommonGridProps"
				},
				"columns": {
					"name": "columns",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "An array of #EuiDataGridColumn objects. Lists the columns available and the schema and settings tied to it.",
					"parent": "CommonGridProps"
				},
				"leadingControlColumns": {
					"name": "leadingControlColumns",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "An array of #EuiDataGridControlColumn objects. Used to define ancillary columns on the left side of the data grid. Useful for adding items like checkboxes and buttons.",
					"parent": "CommonGridProps"
				},
				"trailingControlColumns": {
					"name": "trailingControlColumns",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "An array of #EuiDataGridControlColumn objects. Used to define ancillary columns on the right side of the data grid. Useful for adding items like checkboxes and buttons.",
					"parent": "CommonGridProps"
				},
				"columnVisibility": {
					"name": "columnVisibility",
					"type": "unknown",
					"description": "An array of #EuiDataGridColumnVisibility objects. Defines which columns are **intitially** visible in the grid and the order they are displayed. Users can still turn their visibility on/off when toolbarVisibility.showColumnSelector = true (which is the default).",
					"parent": "CommonGridProps"
				},
				"schemaDetectors": {
					"name": "schemaDetectors",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "An array of custom #EuiDataGridSchemaDetector objects. You can inject custom schemas to the grid to define the classnames applied.",
					"parent": "CommonGridProps"
				},
				"rowCount": {
					"name": "rowCount",
					"type": "number",
					"description": "The total number of rows in the dataset (used by e.g. pagination to know how many pages to list).",
					"parent": "CommonGridProps"
				},
				"renderCellValue": {
					"name": "renderCellValue",
					"type": "Event",
					"description": "A function called to render a cells value. Behind the scenes it is treated as a React component allowing hooks, context, and other React concepts to be used. The function receives #EuiDataGridCellValueElementProps as its only argument.",
					"parent": "CommonGridProps"
				},
				"renderCellPopover": {
					"name": "renderCellPopover",
					"type": "Event",
					"description": "An optional function that can be used to completely customize the rendering of cell popovers.  If not specified, defaults to an <EuiText> wrapper around the rendered cell value and an <EuiPopoverFooter> around the cell actions.  Behind the scenes it is treated as a React component allowing hooks, context, and other React concepts to be used. The function receives #EuiDataGridCellPopoverElementProps as its only argument.",
					"parent": "CommonGridProps"
				},
				"renderFooterCellValue": {
					"name": "renderFooterCellValue",
					"type": "Event",
					"description": "An optional function called to render a footer cell. If not specified, no footer row is rendered.  Behind the scenes it is treated as a React component allowing hooks, context, and other React concepts to be used. The function receives #EuiDataGridCellValueElementProps as its only argument.",
					"parent": "CommonGridProps"
				},
				"gridStyle": {
					"name": "gridStyle",
					"type": "unknown",
					"description": "Defines the initial style of the grid. Accepts a partial #EuiDataGridStyle object. Settings provided may be overwritten or merged with user defined preferences if toolbarVisibility.showDisplaySelector.allowDensity = true (which is the default).",
					"parent": "CommonGridProps"
				},
				"toolbarVisibility": {
					"name": "toolbarVisibility",
					"type": "boolean",
					"description": "Allows you to configure what features the toolbar shows.  Accepts either a boolean or #EuiDataGridToolBarVisibilityOptions object. When used as a boolean, defines the display of the entire toolbar. When passed an object allows you to turn off individual controls within the toolbar as well as add additional buttons.",
					"parent": "CommonGridProps"
				},
				"inMemory": {
					"name": "inMemory",
					"type": "unknown",
					"description": "A #EuiDataGridInMemory object to define the level of high order schema-detection and sorting logic to use on your data. *Try to set when possible**. If omitted, disables all enhancements and assumes content is flat strings.",
					"parent": "CommonGridProps"
				},
				"pagination": {
					"name": "pagination",
					"type": "unknown",
					"description": "A #EuiDataGridPagination object. Omit to disable pagination completely.",
					"parent": "CommonGridProps"
				},
				"sorting": {
					"name": "sorting",
					"type": "unknown",
					"description": "A #EuiDataGridSorting object that provides the sorted columns along with their direction. Provides a callback for when it changes. Optional, but required when inMemory is set. Omit to disable, but youll likely want to also turn off the user sorting controls through the toolbarVisibility prop.",
					"parent": "CommonGridProps"
				},
				"onColumnResize": {
					"name": "onColumnResize",
					"type": "Event",
					"description": "A callback for when a columns size changes. Callback receives { columnId: string, width: number }.",
					"parent": "CommonGridProps"
				},
				"minSizeForControls": {
					"name": "minSizeForControls",
					"type": "number",
					"description": "Defines a minimum width for the grid to show all controls in its toolbar.",
					"parent": "CommonGridProps"
				},
				"virtualizationOptions": {
					"name": "virtualizationOptions",
					"type": "unknown",
					"description": "Allows customizing the underlying [react-window grid](https://react-window.vercel.app/#/api/VariableSizeGrid) props.",
					"parent": "CommonGridProps"
				},
				"rowHeightsOptions": {
					"name": "rowHeightsOptions",
					"type": "unknown",
					"description": "A #EuiDataGridRowHeightsOptions object that provides row heights options. Allows configuring both default and specific heights of grid rows. Settings provided may be overwritten or merged with user defined preferences if toolbarVisibility.showDisplaySelector.allowRowHeight = true (which is the default).",
					"parent": "CommonGridProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"ref": {
					"name": "ref",
					"type": "Event",
					"parent": "RefAttributes"
				}
			},
			"relativePath": "src/components/datagrid/data_grid.tsx"
		},
		"ElasticEui_useDataGridColumnSelector": {
			"id": "ElasticEui_useDataGridColumnSelector",
			"name": "UseDataGridColumnSelector",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useDataGridColumnSelector",
				"lib": "elasticEui"
			},
			"required": [
				"length",
				"pop",
				"push",
				"concat",
				"join",
				"reverse",
				"shift",
				"slice",
				"sort",
				"splice",
				"unshift",
				"indexOf",
				"lastIndexOf",
				"every",
				"some",
				"forEach",
				"map",
				"filter",
				"reduce",
				"reduceRight",
				"find",
				"findIndex",
				"fill",
				"copyWithin",
				"entries",
				"keys",
				"values",
				"includes",
				"flatMap",
				"flat",
				"__@iterator@43",
				"__@unscopables@327"
			],
			"props": {
				"length": {
					"name": "length",
					"type": "number",
					"description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
					"parent": "Array"
				},
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of an array.",
					"parent": "Array"
				},
				"toLocaleString": {
					"name": "toLocaleString",
					"type": "Event",
					"description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
					"parent": "Array"
				},
				"pop": {
					"name": "pop",
					"type": "Event",
					"description": "Removes the last element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"push": {
					"name": "push",
					"type": "Event",
					"description": "Appends new elements to the end of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"concat": {
					"name": "concat",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Combines two or more arrays. This method returns a new array without modifying any existing arrays.",
					"parent": "Array"
				},
				"join": {
					"name": "join",
					"type": "Event",
					"description": "Adds all the elements of an array into a string, separated by the specified separator string.",
					"parent": "Array"
				},
				"reverse": {
					"name": "reverse",
					"type": "Event",
					"description": "Reverses the elements in an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"shift": {
					"name": "shift",
					"type": "Event",
					"description": "Removes the first element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a copy of a section of an array. For both start and end, a negative index can be used to indicate an offset from the end of the array. For example, -2 refers to the second to last element of the array.",
					"parent": "Array"
				},
				"sort": {
					"name": "sort",
					"type": "Event",
					"description": "Sorts an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"splice": {
					"name": "splice",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
					"parent": "Array"
				},
				"unshift": {
					"name": "unshift",
					"type": "Event",
					"description": "Inserts new elements at the start of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"every": {
					"name": "every",
					"type": "Event",
					"description": "Determines whether all the members of an array satisfy the specified test.",
					"parent": "Array"
				},
				"some": {
					"name": "some",
					"type": "Event",
					"description": "Determines whether the specified callback function returns true for any element of an array.",
					"parent": "Array"
				},
				"forEach": {
					"name": "forEach",
					"type": "Event",
					"description": "Performs the specified action for each element in an array.",
					"parent": "Array"
				},
				"map": {
					"name": "map",
					"type": "Event",
					"description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
					"parent": "Array"
				},
				"filter": {
					"name": "filter",
					"type": "Event",
					"description": "Returns the elements of an array that meet the condition specified in a callback function.",
					"parent": "Array"
				},
				"reduce": {
					"name": "reduce",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"reduceRight": {
					"name": "reduceRight",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"find": {
					"name": "find",
					"description": "Returns the value of the first element in the array where predicate is true, and undefined otherwise.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"findIndex": {
					"name": "findIndex",
					"type": "Event",
					"description": "Returns the index of the first element in the array where predicate is true, and -1 otherwise.",
					"parent": "Array"
				},
				"fill": {
					"name": "fill",
					"type": "Event",
					"description": "Changes all array elements from start to end index to a static value and returns the modified array",
					"parent": "Array"
				},
				"copyWithin": {
					"name": "copyWithin",
					"type": "Event",
					"description": "Returns the this object after copying a section of the array identified by start and end to the same array starting at position target",
					"parent": "Array"
				},
				"entries": {
					"name": "entries",
					"type": "Event",
					"description": "Returns an iterable of key, value pairs for every entry in the array",
					"parent": "Array"
				},
				"keys": {
					"name": "keys",
					"type": "Event",
					"description": "Returns an iterable of keys in the array",
					"parent": "Array"
				},
				"values": {
					"name": "values",
					"type": "Event",
					"description": "Returns an iterable of values in the array",
					"parent": "Array"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Determines whether an array includes a certain element, returning true or false as appropriate.",
					"parent": "Array"
				},
				"flatMap": {
					"name": "flatMap",
					"description": "Calls a defined callback function on each element of an array. Then, flattens the result into a new array. This is identical to a map followed by flat with depth 1.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"flat": {
					"name": "flat",
					"type": "Event",
					"description": "Returns a new array with all sub-array elements concatenated into it recursively up to the specified depth.",
					"parent": "Array"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "Array"
				},
				"__@unscopables@327": {
					"name": "__@unscopables@327",
					"type": "Event",
					"description": "Returns an object whose properties have the value true when they will be absent when used in a with statement.",
					"parent": "Array"
				}
			},
			"relativePath": "src/components/datagrid/controls/column_selector.tsx"
		},
		"ElasticEui_useDataGridColumnSorting": {
			"id": "ElasticEui_useDataGridColumnSorting",
			"name": "UseDataGridColumnSorting",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useDataGridColumnSorting",
				"lib": "elasticEui"
			},
			"required": [
				"length",
				"pop",
				"push",
				"concat",
				"join",
				"reverse",
				"shift",
				"slice",
				"sort",
				"splice",
				"unshift",
				"indexOf",
				"lastIndexOf",
				"every",
				"some",
				"forEach",
				"map",
				"filter",
				"reduce",
				"reduceRight",
				"find",
				"findIndex",
				"fill",
				"copyWithin",
				"entries",
				"keys",
				"values",
				"includes",
				"flatMap",
				"flat",
				"__@iterator@43",
				"__@unscopables@327"
			],
			"props": {
				"length": {
					"name": "length",
					"type": "number",
					"description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
					"parent": "Array"
				},
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of an array.",
					"parent": "Array"
				},
				"toLocaleString": {
					"name": "toLocaleString",
					"type": "Event",
					"description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
					"parent": "Array"
				},
				"pop": {
					"name": "pop",
					"type": "Event",
					"description": "Removes the last element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"push": {
					"name": "push",
					"type": "Event",
					"description": "Appends new elements to the end of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"concat": {
					"name": "concat",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Combines two or more arrays. This method returns a new array without modifying any existing arrays.",
					"parent": "Array"
				},
				"join": {
					"name": "join",
					"type": "Event",
					"description": "Adds all the elements of an array into a string, separated by the specified separator string.",
					"parent": "Array"
				},
				"reverse": {
					"name": "reverse",
					"type": "Event",
					"description": "Reverses the elements in an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"shift": {
					"name": "shift",
					"type": "Event",
					"description": "Removes the first element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a copy of a section of an array. For both start and end, a negative index can be used to indicate an offset from the end of the array. For example, -2 refers to the second to last element of the array.",
					"parent": "Array"
				},
				"sort": {
					"name": "sort",
					"type": "Event",
					"description": "Sorts an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"splice": {
					"name": "splice",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
					"parent": "Array"
				},
				"unshift": {
					"name": "unshift",
					"type": "Event",
					"description": "Inserts new elements at the start of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"every": {
					"name": "every",
					"type": "Event",
					"description": "Determines whether all the members of an array satisfy the specified test.",
					"parent": "Array"
				},
				"some": {
					"name": "some",
					"type": "Event",
					"description": "Determines whether the specified callback function returns true for any element of an array.",
					"parent": "Array"
				},
				"forEach": {
					"name": "forEach",
					"type": "Event",
					"description": "Performs the specified action for each element in an array.",
					"parent": "Array"
				},
				"map": {
					"name": "map",
					"type": "Event",
					"description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
					"parent": "Array"
				},
				"filter": {
					"name": "filter",
					"type": "Event",
					"description": "Returns the elements of an array that meet the condition specified in a callback function.",
					"parent": "Array"
				},
				"reduce": {
					"name": "reduce",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"reduceRight": {
					"name": "reduceRight",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"find": {
					"name": "find",
					"description": "Returns the value of the first element in the array where predicate is true, and undefined otherwise.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"findIndex": {
					"name": "findIndex",
					"type": "Event",
					"description": "Returns the index of the first element in the array where predicate is true, and -1 otherwise.",
					"parent": "Array"
				},
				"fill": {
					"name": "fill",
					"type": "Event",
					"description": "Changes all array elements from start to end index to a static value and returns the modified array",
					"parent": "Array"
				},
				"copyWithin": {
					"name": "copyWithin",
					"type": "Event",
					"description": "Returns the this object after copying a section of the array identified by start and end to the same array starting at position target",
					"parent": "Array"
				},
				"entries": {
					"name": "entries",
					"type": "Event",
					"description": "Returns an iterable of key, value pairs for every entry in the array",
					"parent": "Array"
				},
				"keys": {
					"name": "keys",
					"type": "Event",
					"description": "Returns an iterable of keys in the array",
					"parent": "Array"
				},
				"values": {
					"name": "values",
					"type": "Event",
					"description": "Returns an iterable of values in the array",
					"parent": "Array"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Determines whether an array includes a certain element, returning true or false as appropriate.",
					"parent": "Array"
				},
				"flatMap": {
					"name": "flatMap",
					"description": "Calls a defined callback function on each element of an array. Then, flattens the result into a new array. This is identical to a map followed by flat with depth 1.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"flat": {
					"name": "flat",
					"type": "Event",
					"description": "Returns a new array with all sub-array elements concatenated into it recursively up to the specified depth.",
					"parent": "Array"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "Array"
				},
				"__@unscopables@327": {
					"name": "__@unscopables@327",
					"type": "Event",
					"description": "Returns an object whose properties have the value true when they will be absent when used in a with statement.",
					"parent": "Array"
				}
			},
			"relativePath": "src/components/datagrid/controls/column_sorting.tsx"
		},
		"ElasticEui_useDataGridDisplaySelector": {
			"id": "ElasticEui_useDataGridDisplaySelector",
			"name": "UseDataGridDisplaySelector",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useDataGridDisplaySelector",
				"lib": "elasticEui"
			},
			"props": {
				"valueOf": {
					"name": "valueOf",
					"type": "Event",
					"description": "Returns the primitive value of the specified object.",
					"parent": "Boolean"
				},
				"allowDensity": {
					"name": "allowDensity",
					"type": "boolean",
					"description": "When false, removes the ability to change density display through the UI",
					"parent": "EuiDataGridToolBarVisibilityDisplaySelectorOptions"
				},
				"allowRowHeight": {
					"name": "allowRowHeight",
					"type": "boolean",
					"description": "When false, removes the ability to change row height display through the UI",
					"parent": "EuiDataGridToolBarVisibilityDisplaySelectorOptions"
				}
			},
			"relativePath": "src/components/datagrid/controls/display_selector.tsx"
		},
		"ElasticEui_EuiDatePicker": {
			"id": "ElasticEui_EuiDatePicker",
			"name": "EuiDatePicker",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiDatePicker",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"description": "Added to the actual input of the calendar",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"dayClassName": {
					"name": "dayClassName",
					"type": "Event",
					"description": "Applies classes to the numbered days provided. Check docs for example.",
					"parent": "EuiExtendedDatePickerProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"default": false,
					"description": "Makes the input full width",
					"parent": "EuiExtendedDatePickerProps"
				},
				"inputRef": {
					"name": "inputRef",
					"type": "Event",
					"description": "ref for the ReactDatePicker instance",
					"parent": "EuiExtendedDatePickerProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"description": "Provides styling to the input when invalid",
					"parent": "EuiExtendedDatePickerProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"default": false,
					"description": "Provides styling to the input when loading",
					"parent": "EuiExtendedDatePickerProps"
				},
				"onClear": {
					"name": "onClear",
					"type": "Event",
					"description": "What to do when the input is cleared by the x icon",
					"parent": "EuiExtendedDatePickerProps"
				},
				"openToDate": {
					"name": "openToDate",
					"type": "unknown",
					"description": "Opens to this date (in moment format) on first press, regardless of selection",
					"parent": "EuiExtendedDatePickerProps"
				},
				"placeholder": {
					"name": "placeholder",
					"type": "string",
					"description": "Shows only when no date is selected",
					"parent": "EuiExtendedDatePickerProps"
				},
				"shadow": {
					"name": "shadow",
					"type": "boolean",
					"default": false,
					"description": "Can turn the shadow off if using the inline prop",
					"parent": "EuiExtendedDatePickerProps"
				},
				"showIcon": {
					"name": "showIcon",
					"type": "boolean",
					"default": false,
					"description": "Show the icon in input",
					"parent": "EuiExtendedDatePickerProps"
				},
				"iconType": {
					"name": "iconType",
					"type": "string",
					"description": "Pass an icon type to change the default calendar or clock icon",
					"parent": "EuiExtendedDatePickerProps"
				},
				"popoverPlacement": {
					"name": "popoverPlacement",
					"type": "string",
					"enum": [
						"left",
						"right",
						"top",
						"bottom",
						"downLeft",
						"upCenter",
						"upLeft",
						"upRight",
						"downCenter",
						"downRight",
						"leftCenter",
						"leftUp",
						"leftDown",
						"rightCenter",
						"rightUp",
						"rightDown",
						"bottom-end",
						"bottom-start",
						"left-end",
						"left-start",
						"right-end",
						"right-start",
						"top-end",
						"top-start"
					],
					"default": "downLeft",
					"description": "Sets the placement of the popover.  DEPRECATED: bottom, bottom-end, bottom-start, left, left-end, left-start, right, right-end, right-start, top, top-end, top-start  *Use [EuiPopover](/#/layout/popover) values**: upCenter, upLeft, upRight, downCenter, downLeft, downRight, leftCenter, leftUp, leftDown, rightCenter, rightUp, rightDown.",
					"parent": "EuiExtendedDatePickerProps"
				},
				"tabIndex": {
					"name": "tabIndex",
					"type": "number",
					"parent": "ReactDatePickerProps"
				},
				"id": {
					"name": "id",
					"type": "string",
					"parent": "ReactDatePickerProps"
				},
				"title": {
					"name": "title",
					"type": "string",
					"parent": "ReactDatePickerProps"
				},
				"onFocus": {
					"name": "onFocus",
					"type": "Event",
					"parent": "ReactDatePickerProps"
				},
				"onBlur": {
					"name": "onBlur",
					"type": "Event",
					"parent": "ReactDatePickerProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"description": "What to do when the input changes",
					"parent": "ReactDatePickerProps"
				},
				"onKeyDown": {
					"name": "onKeyDown",
					"type": "Event",
					"parent": "ReactDatePickerProps"
				},
				"onSelect": {
					"name": "onSelect",
					"type": "Event",
					"parent": "ReactDatePickerProps"
				},
				"autoFocus": {
					"name": "autoFocus",
					"type": "boolean",
					"parent": "ReactDatePickerProps"
				},
				"disabled": {
					"name": "disabled",
					"type": "boolean",
					"parent": "ReactDatePickerProps"
				},
				"name": {
					"name": "name",
					"type": "string",
					"parent": "ReactDatePickerProps"
				},
				"value": {
					"name": "value",
					"type": "string",
					"parent": "ReactDatePickerProps"
				},
				"inline": {
					"name": "inline",
					"type": "boolean",
					"parent": "ReactDatePickerProps"
				},
				"autoComplete": {
					"name": "autoComplete",
					"type": "string",
					"parent": "ReactDatePickerProps"
				},
				"readOnly": {
					"name": "readOnly",
					"type": "boolean",
					"parent": "ReactDatePickerProps"
				},
				"required": {
					"name": "required",
					"type": "boolean",
					"parent": "ReactDatePickerProps"
				},
				"adjustDateOnChange": {
					"name": "adjustDateOnChange",
					"type": "boolean",
					"default": false,
					"description": "Whether changes to Year and Month (via dropdowns) should trigger onChange",
					"parent": "ReactDatePickerProps"
				},
				"accessibleMode": {
					"name": "accessibleMode",
					"type": "boolean",
					"parent": "ReactDatePickerProps"
				},
				"allowSameDay": {
					"name": "allowSameDay",
					"type": "boolean",
					"parent": "ReactDatePickerProps"
				},
				"calendarClassName": {
					"name": "calendarClassName",
					"type": "string",
					"description": "Optional class added to the calendar portion of datepicker",
					"parent": "ReactDatePickerProps"
				},
				"customInput": {
					"name": "customInput",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Replaces the input with any node, like a button",
					"parent": "ReactDatePickerProps"
				},
				"customInputRef": {
					"name": "customInputRef",
					"type": "string",
					"parent": "ReactDatePickerProps"
				},
				"dateFormat": {
					"name": "dateFormat",
					"type": "string",
					"default": "MM/DD/YYYY",
					"description": "Accepts any moment format string",
					"parent": "ReactDatePickerProps"
				},
				"dateFormatCalendar": {
					"name": "dateFormatCalendar",
					"type": "string",
					"parent": "ReactDatePickerProps"
				},
				"endDate": {
					"name": "endDate",
					"type": "unknown",
					"parent": "ReactDatePickerProps"
				},
				"excludeDates": {
					"name": "excludeDates",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "ReactDatePickerProps"
				},
				"excludeTimes": {
					"name": "excludeTimes",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "ReactDatePickerProps"
				},
				"filterDate": {
					"name": "filterDate",
					"type": "Event",
					"parent": "ReactDatePickerProps"
				},
				"forceShowMonthNavigation": {
					"name": "forceShowMonthNavigation",
					"type": "boolean",
					"parent": "ReactDatePickerProps"
				},
				"formatWeekNumber": {
					"name": "formatWeekNumber",
					"type": "Event",
					"parent": "ReactDatePickerProps"
				},
				"highlightDates": {
					"name": "highlightDates",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "ReactDatePickerProps"
				},
				"includeDates": {
					"name": "includeDates",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "ReactDatePickerProps"
				},
				"includeTimes": {
					"name": "includeTimes",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "ReactDatePickerProps"
				},
				"injectTimes": {
					"name": "injectTimes",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Adds additional times to the time selector other then :30 increments",
					"parent": "ReactDatePickerProps"
				},
				"locale": {
					"name": "locale",
					"type": "string",
					"description": "Switches the locale / display. en-us, zn-ch...etc",
					"parent": "ReactDatePickerProps"
				},
				"maxDate": {
					"name": "maxDate",
					"type": "unknown",
					"description": "The max date accepted (in moment format) as a selection",
					"parent": "ReactDatePickerProps"
				},
				"maxTime": {
					"name": "maxTime",
					"type": "unknown",
					"description": "The max time accepted (in moment format) as a selection",
					"parent": "ReactDatePickerProps"
				},
				"minDate": {
					"name": "minDate",
					"type": "unknown",
					"description": "The min date accepted (in moment format) as a selection",
					"parent": "ReactDatePickerProps"
				},
				"minTime": {
					"name": "minTime",
					"type": "unknown",
					"description": "The min time accepted (in moment format) as a selection",
					"parent": "ReactDatePickerProps"
				},
				"onChangeRaw": {
					"name": "onChangeRaw",
					"type": "Event",
					"parent": "ReactDatePickerProps"
				},
				"onClickOutside": {
					"name": "onClickOutside",
					"type": "Event",
					"parent": "ReactDatePickerProps"
				},
				"onMonthChange": {
					"name": "onMonthChange",
					"type": "Event",
					"parent": "ReactDatePickerProps"
				},
				"onWeekSelect": {
					"name": "onWeekSelect",
					"type": "Event",
					"parent": "ReactDatePickerProps"
				},
				"onYearChange": {
					"name": "onYearChange",
					"type": "Event",
					"parent": "ReactDatePickerProps"
				},
				"peekNextMonth": {
					"name": "peekNextMonth",
					"type": "boolean",
					"parent": "ReactDatePickerProps"
				},
				"placeholderText": {
					"name": "placeholderText",
					"type": "string",
					"parent": "ReactDatePickerProps"
				},
				"popperClassName": {
					"name": "popperClassName",
					"type": "string",
					"description": "Class applied to the popup, when inline is false",
					"parent": "ReactDatePickerProps"
				},
				"popperContainer": {
					"name": "popperContainer",
					"type": "Event",
					"parent": "ReactDatePickerProps"
				},
				"preventOpenOnFocus": {
					"name": "preventOpenOnFocus",
					"type": "boolean",
					"parent": "ReactDatePickerProps"
				},
				"scrollableMonthYearDropdown": {
					"name": "scrollableMonthYearDropdown",
					"type": "boolean",
					"parent": "ReactDatePickerProps"
				},
				"scrollableYearDropdown": {
					"name": "scrollableYearDropdown",
					"type": "boolean",
					"parent": "ReactDatePickerProps"
				},
				"selected": {
					"name": "selected",
					"type": "unknown",
					"description": "The selected datetime (in moment format)",
					"parent": "ReactDatePickerProps"
				},
				"selectsEnd": {
					"name": "selectsEnd",
					"type": "boolean",
					"parent": "ReactDatePickerProps"
				},
				"selectsStart": {
					"name": "selectsStart",
					"type": "boolean",
					"parent": "ReactDatePickerProps"
				},
				"shouldCloseOnSelect": {
					"name": "shouldCloseOnSelect",
					"type": "boolean",
					"default": false,
					"description": "Will close the popup on selection",
					"parent": "ReactDatePickerProps"
				},
				"showDisabledMonthNavigation": {
					"name": "showDisabledMonthNavigation",
					"type": "boolean",
					"parent": "ReactDatePickerProps"
				},
				"showMonthDropdown": {
					"name": "showMonthDropdown",
					"type": "boolean",
					"parent": "ReactDatePickerProps"
				},
				"showTimeSelect": {
					"name": "showTimeSelect",
					"type": "boolean",
					"default": false,
					"description": "Show the time selection alongside the calendar",
					"parent": "ReactDatePickerProps"
				},
				"showTimeSelectOnly": {
					"name": "showTimeSelectOnly",
					"type": "boolean",
					"description": "Only show the time selector, not the calendar",
					"parent": "ReactDatePickerProps"
				},
				"showYearDropdown": {
					"name": "showYearDropdown",
					"type": "boolean",
					"parent": "ReactDatePickerProps"
				},
				"startDate": {
					"name": "startDate",
					"type": "unknown",
					"parent": "ReactDatePickerProps"
				},
				"startOpen": {
					"name": "startOpen",
					"type": "boolean",
					"parent": "ReactDatePickerProps"
				},
				"strictParsing": {
					"name": "strictParsing",
					"type": "boolean",
					"description": "Use Moment strict mode, allowing exact format matches only",
					"parent": "ReactDatePickerProps"
				},
				"timeFormat": {
					"name": "timeFormat",
					"type": "string",
					"default": "hh:mm A",
					"description": "The format of the time within the selector, in moment notation",
					"parent": "ReactDatePickerProps"
				},
				"timeIntervals": {
					"name": "timeIntervals",
					"type": "number",
					"parent": "ReactDatePickerProps"
				},
				"useWeekdaysShort": {
					"name": "useWeekdaysShort",
					"type": "boolean",
					"parent": "ReactDatePickerProps"
				},
				"utcOffset": {
					"name": "utcOffset",
					"type": "number",
					"parent": "ReactDatePickerProps"
				},
				"weekLabel": {
					"name": "weekLabel",
					"type": "string",
					"parent": "ReactDatePickerProps"
				},
				"yearDropdownItemNumber": {
					"name": "yearDropdownItemNumber",
					"type": "number",
					"parent": "ReactDatePickerProps"
				}
			},
			"relativePath": "src/components/date_picker/date_picker.tsx"
		},
		"ElasticEui_EuiDatePickerRange": {
			"id": "ElasticEui_EuiDatePickerRange",
			"name": "EuiDatePickerRange",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiDatePickerRange",
				"lib": "elasticEui"
			},
			"required": [
				"endDateControl",
				"startDateControl"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"children": {
					"name": "children",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Including any children will replace all innards with the provided children",
					"parent": "EuiDatePickerRangeProps"
				},
				"endDateControl": {
					"name": "endDateControl",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "The end date EuiDatePicker element",
					"parent": "EuiDatePickerRangeProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"parent": "EuiDatePickerRangeProps"
				},
				"iconType": {
					"name": "iconType",
					"type": "boolean",
					"default": true,
					"description": "Pass either an icon type or set to false to remove icon entirely",
					"parent": "EuiDatePickerRangeProps"
				},
				"isCustom": {
					"name": "isCustom",
					"type": "boolean",
					"description": "Wont apply any additional props to start and end date components",
					"parent": "EuiDatePickerRangeProps"
				},
				"readOnly": {
					"name": "readOnly",
					"type": "boolean",
					"parent": "EuiDatePickerRangeProps"
				},
				"startDateControl": {
					"name": "startDateControl",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "The start date EuiDatePicker element",
					"parent": "EuiDatePickerRangeProps"
				}
			},
			"relativePath": "src/components/date_picker/date_picker_range.tsx"
		},
		"ElasticEui_AsyncInterval": {
			"id": "ElasticEui_AsyncInterval",
			"name": "AsyncInterval",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "AsyncInterval",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/components/date_picker/super_date_picker/async_interval.ts"
		},
		"ElasticEui_EuiSuperDatePicker": {
			"id": "ElasticEui_EuiSuperDatePicker",
			"name": "EuiSuperDatePicker",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiSuperDatePicker",
				"lib": "elasticEui"
			},
			"required": [
				"onTimeChange"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"commonlyUsedRanges": {
					"name": "commonlyUsedRanges",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "EuiSuperDatePickerProps"
				},
				"customQuickSelectPanels": {
					"name": "customQuickSelectPanels",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "EuiSuperDatePickerProps"
				},
				"dateFormat": {
					"name": "dateFormat",
					"type": "string",
					"description": "Specifies the formatted used when displaying dates and/or datetimes",
					"parent": "EuiSuperDatePickerProps"
				},
				"isAutoRefreshOnly": {
					"name": "isAutoRefreshOnly",
					"type": "boolean",
					"description": "Set isAutoRefreshOnly to true to limit the component to only display auto refresh content.",
					"parent": "EuiSuperDatePickerProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"parent": "EuiSuperDatePickerProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"parent": "EuiSuperDatePickerProps"
				},
				"isPaused": {
					"name": "isPaused",
					"type": "boolean",
					"parent": "EuiSuperDatePickerProps"
				},
				"width": {
					"name": "width",
					"type": "string",
					"enum": [
						"auto",
						"restricted",
						"full"
					],
					"description": "Sets the overall width by adding sensible min and max widths. - auto: fits width to internal content / time string. - restricted: static width that fits the longest possible time string. - full: expands to 100% of the container.",
					"parent": "EuiSuperDatePickerProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"description": "Reduces overall height to compressed form size",
					"parent": "EuiSuperDatePickerProps"
				},
				"locale": {
					"name": "locale",
					"type": "string",
					"description": "Used to localize e.g. month names, passed to moment",
					"parent": "EuiSuperDatePickerProps"
				},
				"onRefresh": {
					"name": "onRefresh",
					"type": "Event",
					"description": "Callback for when the refresh interval is fired. EuiSuperDatePicker will only manage a refresh interval timer when onRefresh callback is supplied If a promise is returned, the next refresh interval will not start until the promise has resolved. If the promise rejects the refresh interval will stop and the error thrown",
					"parent": "EuiSuperDatePickerProps"
				},
				"onRefreshChange": {
					"name": "onRefreshChange",
					"type": "Event",
					"description": "Callback for when the refresh interval changes. Supply onRefreshChange to show refresh interval inputs in quick select popover",
					"parent": "EuiSuperDatePickerProps"
				},
				"onTimeChange": {
					"name": "onTimeChange",
					"type": "Event",
					"description": "Callback for when the time changes.",
					"parent": "EuiSuperDatePickerProps"
				},
				"recentlyUsedRanges": {
					"name": "recentlyUsedRanges",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "EuiSuperDatePickerProps"
				},
				"refreshInterval": {
					"name": "refreshInterval",
					"type": "number",
					"description": "Refresh interval in milliseconds",
					"parent": "EuiSuperDatePickerProps"
				},
				"start": {
					"name": "start",
					"type": "string",
					"parent": "EuiSuperDatePickerProps"
				},
				"end": {
					"name": "end",
					"type": "string",
					"parent": "EuiSuperDatePickerProps"
				},
				"timeFormat": {
					"name": "timeFormat",
					"type": "string",
					"description": "Specifies the formatted used when displaying times",
					"parent": "EuiSuperDatePickerProps"
				},
				"utcOffset": {
					"name": "utcOffset",
					"type": "number",
					"parent": "EuiSuperDatePickerProps"
				},
				"showUpdateButton": {
					"name": "showUpdateButton",
					"type": "string",
					"enum": [
						"iconOnly"
					],
					"description": "Set showUpdateButton to false to immediately invoke onTimeChange for all start and end changes.",
					"parent": "EuiSuperDatePickerProps"
				},
				"isQuickSelectOnly": {
					"name": "isQuickSelectOnly",
					"type": "boolean",
					"description": "Hides the actual input reducing to just the quick select button.",
					"parent": "EuiSuperDatePickerProps"
				},
				"updateButtonProps": {
					"name": "updateButtonProps",
					"type": "unknown",
					"description": "Props passed to the update button #EuiSuperUpdateButtonProps",
					"parent": "EuiSuperDatePickerProps"
				}
			},
			"relativePath": "src/components/date_picker/super_date_picker/super_date_picker.tsx"
		},
		"ElasticEui_EuiSuperUpdateButton": {
			"id": "ElasticEui_EuiSuperUpdateButton",
			"name": "EuiSuperUpdateButton",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiSuperUpdateButton",
				"lib": "elasticEui"
			},
			"required": [
				"onClick"
			],
			"props": {
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"default": false,
					"parent": "EuiSuperUpdateButtonInternalProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"default": false,
					"parent": "EuiSuperUpdateButtonInternalProps"
				},
				"needsUpdate": {
					"name": "needsUpdate",
					"type": "boolean",
					"default": false,
					"parent": "EuiSuperUpdateButtonInternalProps"
				},
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"parent": "EuiSuperUpdateButtonInternalProps"
				},
				"showTooltip": {
					"name": "showTooltip",
					"type": "boolean",
					"default": false,
					"description": "Show the Click to apply tooltip",
					"parent": "EuiSuperUpdateButtonProps"
				},
				"toolTipProps": {
					"name": "toolTipProps",
					"type": "unknown",
					"description": "Passes props to EuiToolTip",
					"parent": "EuiSuperUpdateButtonProps"
				},
				"iconOnly": {
					"name": "iconOnly",
					"type": "boolean",
					"description": "Returns an IconButton instead",
					"parent": "EuiSuperUpdateButtonProps"
				},
				"responsive": {
					"name": "responsive",
					"type": "string",
					"default": "[xs, s]",
					"description": "Forces state to be iconOnly when within provided breakpoints. Remove completely with false or provide your own list of breakpoints.",
					"parent": "EuiSuperUpdateButtonProps",
					"enum": [
						"false"
					]
				},
				"fill": {
					"name": "fill",
					"type": "boolean",
					"default": false,
					"description": "Make button a solid color for prominence",
					"parent": "EuiButtonProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"primary",
						"accent",
						"success",
						"warning",
						"danger",
						"ghost",
						"text"
					],
					"description": "Any of our named colors.",
					"parent": "EuiButtonProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m"
					],
					"description": "Use size s in confined spaces",
					"parent": "EuiButtonProps"
				},
				"isSelected": {
					"name": "isSelected",
					"type": "boolean",
					"description": "Applies the boolean state as the aria-pressed property to create a toggle button. Only use when the readable text does not change between states.*",
					"parent": "EuiButtonProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"description": "Extends the button to 100% width",
					"parent": "EuiButtonProps"
				},
				"minWidth": {
					"name": "minWidth",
					"type": "string",
					"description": "Override the default minimum width",
					"parent": "EuiButtonProps"
				},
				"contentProps": {
					"name": "contentProps",
					"type": "unknown",
					"description": "Object of props passed to the <span/> wrapping the buttons content",
					"parent": "EuiButtonProps"
				},
				"style": {
					"name": "style",
					"type": "object",
					"parent": "EuiButtonProps"
				},
				"iconType": {
					"name": "iconType",
					"type": "string",
					"description": "Any type accepted by EuiIcon",
					"parent": "EuiButtonContentProps"
				},
				"iconSide": {
					"name": "iconSide",
					"type": "string",
					"enum": [
						"left",
						"right"
					],
					"description": "Can only be one side left or right",
					"parent": "EuiButtonContentProps"
				},
				"textProps": {
					"name": "textProps",
					"type": "unknown",
					"description": "Object of props passed to the <span/> wrapping the contents text/children only (not icon)",
					"parent": "EuiButtonContentProps"
				},
				"iconSize": {
					"name": "iconSize",
					"type": "string",
					"enum": [
						"s",
						"m"
					],
					"parent": "EuiButtonContentProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/date_picker/super_date_picker/super_update_button.tsx"
		},
		"ElasticEui_PrettyDuration": {
			"id": "ElasticEui_PrettyDuration",
			"name": "PrettyDuration",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "PrettyDuration",
				"lib": "elasticEui"
			},
			"required": [
				"timeFrom",
				"timeTo",
				"dateFormat"
			],
			"props": {
				"timeFrom": {
					"name": "timeFrom",
					"type": "string",
					"parent": "PrettyDurationProps"
				},
				"timeTo": {
					"name": "timeTo",
					"type": "string",
					"parent": "PrettyDurationProps"
				},
				"quickRanges": {
					"name": "quickRanges",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "PrettyDurationProps"
				},
				"dateFormat": {
					"name": "dateFormat",
					"type": "string",
					"parent": "PrettyDurationProps"
				}
			},
			"relativePath": "src/components/date_picker/super_date_picker/pretty_duration.tsx"
		},
		"ElasticEui_usePrettyDuration": {
			"id": "ElasticEui_usePrettyDuration",
			"name": "UsePrettyDuration",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "usePrettyDuration",
				"lib": "elasticEui"
			},
			"required": [
				"timeFrom",
				"timeTo",
				"dateFormat"
			],
			"props": {
				"timeFrom": {
					"name": "timeFrom",
					"type": "string",
					"parent": "PrettyDurationProps"
				},
				"timeTo": {
					"name": "timeTo",
					"type": "string",
					"parent": "PrettyDurationProps"
				},
				"quickRanges": {
					"name": "quickRanges",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "PrettyDurationProps"
				},
				"dateFormat": {
					"name": "dateFormat",
					"type": "string",
					"parent": "PrettyDurationProps"
				}
			},
			"relativePath": "src/components/date_picker/super_date_picker/pretty_duration.tsx"
		},
		"ElasticEui_EuiAbsoluteTab": {
			"id": "ElasticEui_EuiAbsoluteTab",
			"name": "EuiAbsoluteTab",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiAbsoluteTab",
				"lib": "elasticEui"
			},
			"required": [
				"dateFormat",
				"timeFormat",
				"value",
				"onChange",
				"roundUp",
				"position",
				"labelPrefix"
			],
			"props": {
				"dateFormat": {
					"name": "dateFormat",
					"type": "string",
					"parent": "EuiAbsoluteTabProps"
				},
				"timeFormat": {
					"name": "timeFormat",
					"type": "string",
					"parent": "EuiAbsoluteTabProps"
				},
				"locale": {
					"name": "locale",
					"type": "string",
					"parent": "EuiAbsoluteTabProps"
				},
				"value": {
					"name": "value",
					"type": "string",
					"parent": "EuiAbsoluteTabProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"parent": "EuiAbsoluteTabProps"
				},
				"roundUp": {
					"name": "roundUp",
					"type": "boolean",
					"parent": "EuiAbsoluteTabProps"
				},
				"position": {
					"name": "position",
					"type": "string",
					"enum": [
						"end",
						"start"
					],
					"parent": "EuiAbsoluteTabProps"
				},
				"labelPrefix": {
					"name": "labelPrefix",
					"type": "string",
					"parent": "EuiAbsoluteTabProps"
				},
				"utcOffset": {
					"name": "utcOffset",
					"type": "number",
					"parent": "EuiAbsoluteTabProps"
				}
			},
			"relativePath": "src/components/date_picker/super_date_picker/date_popover/absolute_tab.tsx"
		},
		"ElasticEui_EuiDatePopoverButton": {
			"id": "ElasticEui_EuiDatePopoverButton",
			"name": "EuiDatePopoverButton",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiDatePopoverButton",
				"lib": "elasticEui"
			},
			"required": [
				"dateFormat",
				"isOpen",
				"onChange",
				"onPopoverClose",
				"onPopoverToggle",
				"position",
				"timeFormat",
				"value",
				"timeOptions"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "EuiDatePopoverButtonProps"
				},
				"buttonProps": {
					"name": "buttonProps",
					"type": "unknown",
					"parent": "EuiDatePopoverButtonProps"
				},
				"dateFormat": {
					"name": "dateFormat",
					"type": "string",
					"parent": "EuiDatePopoverButtonProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"parent": "EuiDatePopoverButtonProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"parent": "EuiDatePopoverButtonProps"
				},
				"isOpen": {
					"name": "isOpen",
					"type": "boolean",
					"parent": "EuiDatePopoverButtonProps"
				},
				"needsUpdating": {
					"name": "needsUpdating",
					"type": "boolean",
					"parent": "EuiDatePopoverButtonProps"
				},
				"locale": {
					"name": "locale",
					"type": "string",
					"parent": "EuiDatePopoverButtonProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"parent": "EuiDatePopoverButtonProps"
				},
				"onPopoverClose": {
					"name": "onPopoverClose",
					"type": "Event",
					"parent": "EuiDatePopoverButtonProps"
				},
				"onPopoverToggle": {
					"name": "onPopoverToggle",
					"type": "Event",
					"parent": "EuiDatePopoverButtonProps"
				},
				"position": {
					"name": "position",
					"type": "string",
					"enum": [
						"end",
						"start"
					],
					"parent": "EuiDatePopoverButtonProps"
				},
				"roundUp": {
					"name": "roundUp",
					"type": "boolean",
					"parent": "EuiDatePopoverButtonProps"
				},
				"timeFormat": {
					"name": "timeFormat",
					"type": "string",
					"parent": "EuiDatePopoverButtonProps"
				},
				"value": {
					"name": "value",
					"type": "string",
					"parent": "EuiDatePopoverButtonProps"
				},
				"utcOffset": {
					"name": "utcOffset",
					"type": "number",
					"parent": "EuiDatePopoverButtonProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"parent": "EuiDatePopoverButtonProps"
				},
				"timeOptions": {
					"name": "timeOptions",
					"type": "unknown",
					"parent": "EuiDatePopoverButtonProps"
				}
			},
			"relativePath": "src/components/date_picker/super_date_picker/date_popover/date_popover_button.tsx"
		},
		"ElasticEui_EuiDatePopoverContent": {
			"id": "ElasticEui_EuiDatePopoverContent",
			"name": "EuiDatePopoverContent",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiDatePopoverContent",
				"lib": "elasticEui"
			},
			"required": [
				"value",
				"onChange",
				"dateFormat",
				"timeFormat",
				"position",
				"timeOptions"
			],
			"props": {
				"value": {
					"name": "value",
					"type": "string",
					"parent": "EuiDatePopoverContentProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"parent": "EuiDatePopoverContentProps"
				},
				"roundUp": {
					"name": "roundUp",
					"type": "boolean",
					"default": false,
					"parent": "EuiDatePopoverContentProps"
				},
				"dateFormat": {
					"name": "dateFormat",
					"type": "string",
					"parent": "EuiDatePopoverContentProps"
				},
				"timeFormat": {
					"name": "timeFormat",
					"type": "string",
					"parent": "EuiDatePopoverContentProps"
				},
				"locale": {
					"name": "locale",
					"type": "string",
					"parent": "EuiDatePopoverContentProps"
				},
				"position": {
					"name": "position",
					"type": "string",
					"enum": [
						"end",
						"start"
					],
					"parent": "EuiDatePopoverContentProps"
				},
				"utcOffset": {
					"name": "utcOffset",
					"type": "number",
					"parent": "EuiDatePopoverContentProps"
				},
				"timeOptions": {
					"name": "timeOptions",
					"type": "unknown",
					"parent": "EuiDatePopoverContentProps"
				}
			},
			"relativePath": "src/components/date_picker/super_date_picker/date_popover/date_popover_content.tsx"
		},
		"ElasticEui_EuiRelativeTab": {
			"id": "ElasticEui_EuiRelativeTab",
			"name": "EuiRelativeTab",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiRelativeTab",
				"lib": "elasticEui"
			},
			"required": [
				"dateFormat",
				"value",
				"onChange",
				"position",
				"labelPrefix",
				"timeOptions"
			],
			"props": {
				"dateFormat": {
					"name": "dateFormat",
					"type": "string",
					"parent": "EuiRelativeTabProps"
				},
				"locale": {
					"name": "locale",
					"type": "string",
					"parent": "EuiRelativeTabProps"
				},
				"value": {
					"name": "value",
					"type": "string",
					"parent": "EuiRelativeTabProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"parent": "EuiRelativeTabProps"
				},
				"roundUp": {
					"name": "roundUp",
					"type": "boolean",
					"parent": "EuiRelativeTabProps"
				},
				"position": {
					"name": "position",
					"type": "string",
					"enum": [
						"end",
						"start"
					],
					"parent": "EuiRelativeTabProps"
				},
				"labelPrefix": {
					"name": "labelPrefix",
					"type": "string",
					"parent": "EuiRelativeTabProps"
				},
				"timeOptions": {
					"name": "timeOptions",
					"type": "object",
					"parent": "EuiRelativeTabProps",
					"properties": {
						"timeTenseOptions": {
							"type": "array",
							"items": {
								"type": "unknown"
							},
							"name": "timeTenseOptions"
						},
						"timeUnitsOptions": {
							"type": "array",
							"items": {
								"type": "unknown"
							},
							"name": "timeUnitsOptions"
						},
						"relativeOptions": {
							"type": "array",
							"items": {
								"type": "unknown"
							},
							"name": "relativeOptions"
						},
						"relativeRoundingLabels": {
							"type": "object",
							"properties": {
								"[object Object]": {
									"type": "string",
									"name": {
										"name": "union",
										"raw": "'s' | 'm' | 'h' | 'd' | 'w' | 'M' | 'y'",
										"elements": [
											{
												"name": "literal",
												"value": "'s'"
											},
											{
												"name": "literal",
												"value": "'m'"
											},
											{
												"name": "literal",
												"value": "'h'"
											},
											{
												"name": "literal",
												"value": "'d'"
											},
											{
												"name": "literal",
												"value": "'w'"
											},
											{
												"name": "literal",
												"value": "'M'"
											},
											{
												"name": "literal",
												"value": "'y'"
											}
										],
										"required": true
									}
								}
							},
							"name": "relativeRoundingLabels"
						},
						"refreshUnitsOptions": {
							"type": "array",
							"items": {
								"type": "unknown"
							},
							"name": "refreshUnitsOptions"
						},
						"commonDurationRanges": {
							"type": "array",
							"items": {
								"type": "unknown"
							},
							"name": "commonDurationRanges"
						}
					}
				}
			},
			"relativePath": "src/components/date_picker/super_date_picker/date_popover/relative_tab.tsx"
		},
		"ElasticEui_EuiCommonlyUsedTimeRanges": {
			"id": "ElasticEui_EuiCommonlyUsedTimeRanges",
			"name": "EuiCommonlyUsedTimeRanges",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiCommonlyUsedTimeRanges",
				"lib": "elasticEui"
			},
			"required": [
				"applyTime",
				"commonlyUsedRanges"
			],
			"props": {
				"applyTime": {
					"name": "applyTime",
					"type": "unknown",
					"parent": "EuiCommonlyUsedTimeRangesProps"
				},
				"commonlyUsedRanges": {
					"name": "commonlyUsedRanges",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "EuiCommonlyUsedTimeRangesProps"
				}
			},
			"relativePath": "src/components/date_picker/super_date_picker/quick_select_popover/commonly_used_time_ranges.tsx"
		},
		"ElasticEui_EuiQuickSelectPopover": {
			"id": "ElasticEui_EuiQuickSelectPopover",
			"name": "EuiQuickSelectPopover",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiQuickSelectPopover",
				"lib": "elasticEui"
			},
			"required": [
				"applyTime",
				"commonlyUsedRanges",
				"dateFormat",
				"end",
				"isDisabled",
				"isPaused",
				"recentlyUsedRanges",
				"refreshInterval",
				"start",
				"timeOptions"
			],
			"props": {
				"applyRefreshInterval": {
					"name": "applyRefreshInterval",
					"type": "Event",
					"parent": "EuiQuickSelectPopoverProps"
				},
				"applyTime": {
					"name": "applyTime",
					"type": "Event",
					"parent": "EuiQuickSelectPopoverProps"
				},
				"commonlyUsedRanges": {
					"name": "commonlyUsedRanges",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "EuiQuickSelectPopoverProps"
				},
				"customQuickSelectPanels": {
					"name": "customQuickSelectPanels",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "EuiQuickSelectPopoverProps"
				},
				"dateFormat": {
					"name": "dateFormat",
					"type": "string",
					"parent": "EuiQuickSelectPopoverProps"
				},
				"end": {
					"name": "end",
					"type": "string",
					"parent": "EuiQuickSelectPopoverProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"parent": "EuiQuickSelectPopoverProps"
				},
				"isPaused": {
					"name": "isPaused",
					"type": "boolean",
					"parent": "EuiQuickSelectPopoverProps"
				},
				"recentlyUsedRanges": {
					"name": "recentlyUsedRanges",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "EuiQuickSelectPopoverProps"
				},
				"refreshInterval": {
					"name": "refreshInterval",
					"type": "number",
					"parent": "EuiQuickSelectPopoverProps"
				},
				"start": {
					"name": "start",
					"type": "string",
					"parent": "EuiQuickSelectPopoverProps"
				},
				"timeOptions": {
					"name": "timeOptions",
					"type": "object",
					"parent": "EuiQuickSelectPopoverProps",
					"properties": {
						"timeTenseOptions": {
							"type": "array",
							"items": {
								"type": "unknown"
							},
							"name": "timeTenseOptions"
						},
						"timeUnitsOptions": {
							"type": "array",
							"items": {
								"type": "unknown"
							},
							"name": "timeUnitsOptions"
						},
						"relativeOptions": {
							"type": "array",
							"items": {
								"type": "unknown"
							},
							"name": "relativeOptions"
						},
						"relativeRoundingLabels": {
							"type": "object",
							"properties": {
								"[object Object]": {
									"type": "string",
									"name": {
										"name": "union",
										"raw": "'s' | 'm' | 'h' | 'd' | 'w' | 'M' | 'y'",
										"elements": [
											{
												"name": "literal",
												"value": "'s'"
											},
											{
												"name": "literal",
												"value": "'m'"
											},
											{
												"name": "literal",
												"value": "'h'"
											},
											{
												"name": "literal",
												"value": "'d'"
											},
											{
												"name": "literal",
												"value": "'w'"
											},
											{
												"name": "literal",
												"value": "'M'"
											},
											{
												"name": "literal",
												"value": "'y'"
											}
										],
										"required": true
									}
								}
							},
							"name": "relativeRoundingLabels"
						},
						"refreshUnitsOptions": {
							"type": "array",
							"items": {
								"type": "unknown"
							},
							"name": "refreshUnitsOptions"
						},
						"commonDurationRanges": {
							"type": "array",
							"items": {
								"type": "unknown"
							},
							"name": "commonDurationRanges"
						}
					}
				}
			},
			"relativePath": "src/components/date_picker/super_date_picker/quick_select_popover/quick_select_popover.tsx"
		},
		"ElasticEui_EuiQuickSelect": {
			"id": "ElasticEui_EuiQuickSelect",
			"name": "EuiQuickSelect",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiQuickSelect",
				"lib": "elasticEui"
			},
			"required": [
				"applyTime",
				"start",
				"end",
				"timeOptions"
			],
			"props": {
				"applyTime": {
					"name": "applyTime",
					"type": "Event",
					"parent": "EuiQuickSelectProps"
				},
				"start": {
					"name": "start",
					"type": "string",
					"parent": "EuiQuickSelectProps"
				},
				"end": {
					"name": "end",
					"type": "string",
					"parent": "EuiQuickSelectProps"
				},
				"prevQuickSelect": {
					"name": "prevQuickSelect",
					"type": "unknown",
					"parent": "EuiQuickSelectProps"
				},
				"timeOptions": {
					"name": "timeOptions",
					"type": "object",
					"parent": "EuiQuickSelectProps",
					"properties": {
						"timeTenseOptions": {
							"type": "array",
							"items": {
								"type": "unknown"
							},
							"name": "timeTenseOptions"
						},
						"timeUnitsOptions": {
							"type": "array",
							"items": {
								"type": "unknown"
							},
							"name": "timeUnitsOptions"
						},
						"relativeOptions": {
							"type": "array",
							"items": {
								"type": "unknown"
							},
							"name": "relativeOptions"
						},
						"relativeRoundingLabels": {
							"type": "object",
							"properties": {
								"[object Object]": {
									"type": "string",
									"name": {
										"name": "union",
										"raw": "'s' | 'm' | 'h' | 'd' | 'w' | 'M' | 'y'",
										"elements": [
											{
												"name": "literal",
												"value": "'s'"
											},
											{
												"name": "literal",
												"value": "'m'"
											},
											{
												"name": "literal",
												"value": "'h'"
											},
											{
												"name": "literal",
												"value": "'d'"
											},
											{
												"name": "literal",
												"value": "'w'"
											},
											{
												"name": "literal",
												"value": "'M'"
											},
											{
												"name": "literal",
												"value": "'y'"
											}
										],
										"required": true
									}
								}
							},
							"name": "relativeRoundingLabels"
						},
						"refreshUnitsOptions": {
							"type": "array",
							"items": {
								"type": "unknown"
							},
							"name": "refreshUnitsOptions"
						},
						"commonDurationRanges": {
							"type": "array",
							"items": {
								"type": "unknown"
							},
							"name": "commonDurationRanges"
						}
					}
				}
			},
			"relativePath": "src/components/date_picker/super_date_picker/quick_select_popover/quick_select.tsx"
		},
		"ElasticEui_EuiRecentlyUsed": {
			"id": "ElasticEui_EuiRecentlyUsed",
			"name": "EuiRecentlyUsed",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiRecentlyUsed",
				"lib": "elasticEui"
			},
			"required": [
				"applyTime",
				"commonlyUsedRanges",
				"dateFormat"
			],
			"props": {
				"applyTime": {
					"name": "applyTime",
					"type": "unknown",
					"parent": "EuiRecentlyUsedProps"
				},
				"commonlyUsedRanges": {
					"name": "commonlyUsedRanges",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "EuiRecentlyUsedProps"
				},
				"dateFormat": {
					"name": "dateFormat",
					"type": "string",
					"parent": "EuiRecentlyUsedProps"
				},
				"recentlyUsedRanges": {
					"name": "recentlyUsedRanges",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"default": [],
					"parent": "EuiRecentlyUsedProps"
				}
			},
			"relativePath": "src/components/date_picker/super_date_picker/quick_select_popover/recently_used.tsx"
		},
		"ElasticEui_EuiAutoRefresh": {
			"id": "ElasticEui_EuiAutoRefresh",
			"name": "EuiAutoRefresh",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiAutoRefresh",
				"lib": "elasticEui"
			},
			"required": [
				"onRefreshChange"
			],
			"props": {
				"isPaused": {
					"name": "isPaused",
					"type": "boolean",
					"default": false,
					"description": "Is refresh paused or running.",
					"parent": "EuiRefreshIntervalProps"
				},
				"refreshInterval": {
					"name": "refreshInterval",
					"type": "number",
					"default": 1000,
					"description": "Refresh interval in milliseconds.",
					"parent": "EuiRefreshIntervalProps"
				},
				"onRefreshChange": {
					"name": "onRefreshChange",
					"type": "Event",
					"description": "Passes back the updated state of isPaused and refreshInterval.",
					"parent": "EuiRefreshIntervalProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"parent": "EuiAutoRefreshSharedProps"
				},
				"readOnly": {
					"name": "readOnly",
					"type": "boolean",
					"default": false,
					"description": "The input is readOnly by default because the input value is handled by the popover form.",
					"parent": "EuiAutoRefreshProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"parent": "EuiFieldTextProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"parent": "EuiFieldTextProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"description": "when true creates a shorter height input",
					"parent": "EuiFieldTextProps"
				},
				"inputRef": {
					"name": "inputRef",
					"type": "Event",
					"parent": "EuiFieldTextProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"parent": "EuiFieldTextProps"
				},
				"append": {
					"name": "append",
					"type": "string",
					"description": "Creates an input group with element(s) coming after input. string | ReactElement or an array of these",
					"parent": "EuiFieldTextProps"
				}
			},
			"relativePath": "src/components/date_picker/auto_refresh/auto_refresh.tsx"
		},
		"ElasticEui_EuiAutoRefreshButton": {
			"id": "ElasticEui_EuiAutoRefreshButton",
			"name": "EuiAutoRefreshButton",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiAutoRefreshButton",
				"lib": "elasticEui"
			},
			"required": [
				"onRefreshChange"
			],
			"props": {
				"isPaused": {
					"name": "isPaused",
					"type": "boolean",
					"default": false,
					"description": "Is refresh paused or running.",
					"parent": "EuiRefreshIntervalProps"
				},
				"refreshInterval": {
					"name": "refreshInterval",
					"type": "number",
					"default": 1000,
					"description": "Refresh interval in milliseconds.",
					"parent": "EuiRefreshIntervalProps"
				},
				"onRefreshChange": {
					"name": "onRefreshChange",
					"type": "Event",
					"description": "Passes back the updated state of isPaused and refreshInterval.",
					"parent": "EuiRefreshIntervalProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"description": "disabled is also allowed",
					"parent": "EuiAutoRefreshSharedProps"
				},
				"shortHand": {
					"name": "shortHand",
					"type": "boolean",
					"default": false,
					"description": "Reduces the time unit to a single letter",
					"parent": "EuiAutoRefreshButtonProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"primary",
						"success",
						"warning",
						"danger",
						"ghost",
						"text"
					],
					"default": "text",
					"description": "Any of our named colors",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs"
					],
					"default": "s",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"description": "Force disables the button and changes the icon to a loading spinner",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"contentProps": {
					"name": "contentProps",
					"type": "unknown",
					"description": "Object of props passed to the <span/> wrapping the buttons content",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"textProps": {
					"name": "textProps",
					"type": "unknown",
					"description": "Object of props passed to the <span/> wrapping the contents text/children only (not icon)",
					"parent": "EuiButtonContentProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"href": {
					"name": "href",
					"type": "string",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"rel": {
					"name": "rel",
					"type": "string",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"target": {
					"name": "target",
					"type": "string",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"buttonRef": {
					"name": "buttonRef",
					"type": "Event",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"flush": {
					"name": "flush",
					"type": "string",
					"enum": [
						"left",
						"right",
						"both"
					],
					"description": "Ensure the text of the button sits flush to the left, right, or both sides of its container",
					"parent": "CommonEuiButtonEmptyProps"
				}
			},
			"relativePath": "src/components/date_picker/auto_refresh/auto_refresh.tsx"
		},
		"ElasticEui_EuiRefreshInterval": {
			"id": "ElasticEui_EuiRefreshInterval",
			"name": "EuiRefreshInterval",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiRefreshInterval",
				"lib": "elasticEui"
			},
			"required": [
				"onRefreshChange"
			],
			"props": {
				"isPaused": {
					"name": "isPaused",
					"type": "boolean",
					"default": false,
					"description": "Is refresh paused or running.",
					"parent": "EuiRefreshIntervalProps"
				},
				"refreshInterval": {
					"name": "refreshInterval",
					"type": "number",
					"default": 1000,
					"description": "Refresh interval in milliseconds.",
					"parent": "EuiRefreshIntervalProps"
				},
				"onRefreshChange": {
					"name": "onRefreshChange",
					"type": "Event",
					"description": "Passes back the updated state of isPaused and refreshInterval.",
					"parent": "EuiRefreshIntervalProps"
				}
			},
			"relativePath": "src/components/date_picker/auto_refresh/refresh_interval.tsx"
		},
		"ElasticEui_EuiDelayHide": {
			"id": "ElasticEui_EuiDelayHide",
			"name": "EuiDelayHide",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiDelayHide",
				"lib": "elasticEui"
			},
			"required": [
				"render"
			],
			"props": {
				"hide": {
					"name": "hide",
					"type": "boolean",
					"default": false,
					"parent": "EuiDelayHideProps"
				},
				"minimumDuration": {
					"name": "minimumDuration",
					"type": "number",
					"default": 1000,
					"parent": "EuiDelayHideProps"
				},
				"render": {
					"name": "render",
					"type": "Event",
					"parent": "EuiDelayHideProps"
				}
			},
			"relativePath": "src/components/delay_hide/delay_hide.tsx"
		},
		"ElasticEui_EuiDelayRender": {
			"id": "ElasticEui_EuiDelayRender",
			"name": "EuiDelayRender",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiDelayRender",
				"lib": "elasticEui"
			},
			"props": {
				"delay": {
					"name": "delay",
					"type": "number",
					"default": 500,
					"parent": "EuiDelayRenderProps"
				}
			},
			"relativePath": "src/components/delay_render/delay_render.tsx"
		},
		"ElasticEui_EuiDescriptionList": {
			"id": "ElasticEui_EuiDescriptionList",
			"name": "EuiDescriptionList",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiDescriptionList",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"listItems": {
					"name": "listItems",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "EuiDescriptionListProps"
				},
				"align": {
					"name": "align",
					"type": "string",
					"enum": [
						"left",
						"center"
					],
					"default": "left",
					"description": "Text alignment",
					"parent": "EuiDescriptionListProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"default": false,
					"description": "Smaller text and condensed spacing",
					"parent": "EuiDescriptionListProps"
				},
				"textStyle": {
					"name": "textStyle",
					"type": "string",
					"enum": [
						"normal",
						"reverse"
					],
					"default": "normal",
					"description": "How should the content be styled, by default this will emphasize the title",
					"parent": "EuiDescriptionListProps"
				},
				"type": {
					"name": "type",
					"type": "string",
					"enum": [
						"row",
						"inline",
						"column",
						"responsiveColumn"
					],
					"default": "row",
					"description": "How each item should be laid out",
					"parent": "EuiDescriptionListProps"
				},
				"titleProps": {
					"name": "titleProps",
					"type": "unknown",
					"description": "Props object to be passed to EuiDescriptionListTitle",
					"parent": "EuiDescriptionListProps"
				},
				"descriptionProps": {
					"name": "descriptionProps",
					"type": "unknown",
					"description": "Props object to be passed to EuiDescriptionListDescription",
					"parent": "EuiDescriptionListProps"
				}
			},
			"relativePath": "src/components/description_list/description_list.tsx"
		},
		"ElasticEui_EuiDescriptionListTitle": {
			"id": "ElasticEui_EuiDescriptionListTitle",
			"name": "EuiDescriptionListTitle",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiDescriptionListTitle",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/description_list/description_list_title.tsx"
		},
		"ElasticEui_EuiDescriptionListDescription": {
			"id": "ElasticEui_EuiDescriptionListDescription",
			"name": "EuiDescriptionListDescription",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiDescriptionListDescription",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/description_list/description_list_description.tsx"
		},
		"ElasticEui_EuiDragDropContext": {
			"id": "ElasticEui_EuiDragDropContext",
			"name": "EuiDragDropContext",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiDragDropContext",
				"lib": "elasticEui"
			},
			"required": [
				"onDragEnd"
			],
			"props": {
				"onBeforeCapture": {
					"name": "onBeforeCapture",
					"type": "Event",
					"parent": "DragDropContextProps"
				},
				"onBeforeDragStart": {
					"name": "onBeforeDragStart",
					"type": "Event",
					"parent": "DragDropContextProps"
				},
				"onDragStart": {
					"name": "onDragStart",
					"type": "Event",
					"parent": "DragDropContextProps"
				},
				"onDragUpdate": {
					"name": "onDragUpdate",
					"type": "Event",
					"parent": "DragDropContextProps"
				},
				"onDragEnd": {
					"name": "onDragEnd",
					"type": "Event",
					"parent": "DragDropContextProps"
				},
				"dragHandleUsageInstructions": {
					"name": "dragHandleUsageInstructions",
					"type": "string",
					"parent": "DragDropContextProps"
				},
				"nonce": {
					"name": "nonce",
					"type": "string",
					"parent": "DragDropContextProps"
				},
				"enableDefaultSensors": {
					"name": "enableDefaultSensors",
					"type": "boolean",
					"parent": "DragDropContextProps"
				},
				"sensors": {
					"name": "sensors",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "DragDropContextProps"
				}
			},
			"relativePath": "src/components/drag_and_drop/drag_drop_context.tsx"
		},
		"ElasticEui_EuiDraggable": {
			"id": "ElasticEui_EuiDraggable",
			"name": "EuiDraggable",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiDraggable",
				"lib": "elasticEui"
			},
			"required": [
				"draggableId",
				"index"
			],
			"props": {
				"children": {
					"name": "children",
					"type": "array",
					"description": "ReactNode to render as this components content",
					"items": {
						"type": "Node"
					},
					"parent": "EuiDraggableProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "EuiDraggableProps"
				},
				"customDragHandle": {
					"name": "customDragHandle",
					"type": "boolean",
					"default": false,
					"description": "Whether the children will provide and set up its own drag handle",
					"parent": "EuiDraggableProps"
				},
				"hasInteractiveChildren": {
					"name": "hasInteractiveChildren",
					"type": "boolean",
					"default": false,
					"description": "Whether the container has interactive children and should have role=group instead of button. Setting this flag ensures your drag & drop container is keyboard and screen reader accessible.",
					"parent": "EuiDraggableProps"
				},
				"isRemovable": {
					"name": "isRemovable",
					"type": "boolean",
					"default": false,
					"description": "Whether the item is currently in a position to be removed",
					"parent": "EuiDraggableProps"
				},
				"spacing": {
					"name": "spacing",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l"
					],
					"default": "none",
					"description": "Adds padding to the draggable item",
					"parent": "EuiDraggableProps"
				},
				"style": {
					"name": "style",
					"type": "object",
					"parent": "EuiDraggableProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"draggableId": {
					"name": "draggableId",
					"type": "string",
					"parent": "DraggableProps"
				},
				"index": {
					"name": "index",
					"type": "number",
					"parent": "DraggableProps"
				},
				"isDragDisabled": {
					"name": "isDragDisabled",
					"type": "boolean",
					"default": false,
					"parent": "DraggableProps"
				},
				"disableInteractiveElementBlocking": {
					"name": "disableInteractiveElementBlocking",
					"type": "boolean",
					"parent": "DraggableProps"
				},
				"shouldRespectForcePress": {
					"name": "shouldRespectForcePress",
					"type": "boolean",
					"parent": "DraggableProps"
				}
			},
			"relativePath": "src/components/drag_and_drop/draggable.tsx"
		},
		"ElasticEui_EuiDroppable": {
			"id": "ElasticEui_EuiDroppable",
			"name": "EuiDroppable",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiDroppable",
				"lib": "elasticEui"
			},
			"required": [
				"droppableId"
			],
			"props": {
				"children": {
					"name": "children",
					"type": "array",
					"description": "ReactNode to render as this components content",
					"items": {
						"type": "Node"
					},
					"parent": "EuiDroppableProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "EuiDroppableProps"
				},
				"cloneDraggables": {
					"name": "cloneDraggables",
					"type": "boolean",
					"default": false,
					"description": "Makes its items immutable. Dragging creates cloned items that can be dropped elsewhere.",
					"parent": "EuiDroppableProps"
				},
				"style": {
					"name": "style",
					"type": "object",
					"parent": "EuiDroppableProps"
				},
				"spacing": {
					"name": "spacing",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l"
					],
					"default": "none",
					"description": "Adds padding to the droppable area",
					"parent": "EuiDroppableProps"
				},
				"withPanel": {
					"name": "withPanel",
					"type": "boolean",
					"default": false,
					"description": "Adds an EuiPanel style to the droppable area",
					"parent": "EuiDroppableProps"
				},
				"grow": {
					"name": "grow",
					"type": "boolean",
					"default": false,
					"description": "Allow the panel to flex-grow?",
					"parent": "EuiDroppableProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"type": {
					"name": "type",
					"type": "string",
					"default": "EUI_DEFAULT",
					"parent": "DroppableProps"
				},
				"direction": {
					"name": "direction",
					"type": "string",
					"enum": [
						"horizontal",
						"vertical"
					],
					"parent": "DroppableProps"
				},
				"mode": {
					"name": "mode",
					"type": "string",
					"enum": [
						"standard",
						"virtual"
					],
					"parent": "DroppableProps"
				},
				"droppableId": {
					"name": "droppableId",
					"type": "string",
					"parent": "DroppableProps"
				},
				"isDropDisabled": {
					"name": "isDropDisabled",
					"type": "boolean",
					"default": false,
					"parent": "DroppableProps"
				},
				"isCombineEnabled": {
					"name": "isCombineEnabled",
					"type": "boolean",
					"parent": "DroppableProps"
				},
				"ignoreContainerClipping": {
					"name": "ignoreContainerClipping",
					"type": "boolean",
					"parent": "DroppableProps"
				},
				"renderClone": {
					"name": "renderClone",
					"type": "unknown",
					"parent": "DroppableProps"
				},
				"getContainerForClone": {
					"name": "getContainerForClone",
					"type": "Event",
					"parent": "DroppableProps"
				}
			},
			"relativePath": "src/components/drag_and_drop/droppable.tsx"
		},
		"ElasticEui_euiDragDropCopy": {
			"id": "ElasticEui_euiDragDropCopy",
			"name": "EuiDragDropCopy",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiDragDropCopy",
				"lib": "elasticEui"
			},
			"required": [
				"length",
				"pop",
				"push",
				"concat",
				"join",
				"reverse",
				"shift",
				"slice",
				"sort",
				"splice",
				"unshift",
				"indexOf",
				"lastIndexOf",
				"every",
				"some",
				"forEach",
				"map",
				"filter",
				"reduce",
				"reduceRight",
				"find",
				"findIndex",
				"fill",
				"copyWithin",
				"entries",
				"keys",
				"values",
				"includes",
				"flatMap",
				"flat",
				"__@iterator@43",
				"__@unscopables@327"
			],
			"props": {
				"length": {
					"name": "length",
					"type": "number",
					"description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
					"parent": "Array"
				},
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of an array.",
					"parent": "Array"
				},
				"toLocaleString": {
					"name": "toLocaleString",
					"type": "Event",
					"description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
					"parent": "Array"
				},
				"pop": {
					"name": "pop",
					"type": "Event",
					"description": "Removes the last element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"push": {
					"name": "push",
					"type": "Event",
					"description": "Appends new elements to the end of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"concat": {
					"name": "concat",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Combines two or more arrays. This method returns a new array without modifying any existing arrays.",
					"parent": "Array"
				},
				"join": {
					"name": "join",
					"type": "Event",
					"description": "Adds all the elements of an array into a string, separated by the specified separator string.",
					"parent": "Array"
				},
				"reverse": {
					"name": "reverse",
					"type": "Event",
					"description": "Reverses the elements in an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"shift": {
					"name": "shift",
					"type": "Event",
					"description": "Removes the first element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a copy of a section of an array. For both start and end, a negative index can be used to indicate an offset from the end of the array. For example, -2 refers to the second to last element of the array.",
					"parent": "Array"
				},
				"sort": {
					"name": "sort",
					"type": "Event",
					"description": "Sorts an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"splice": {
					"name": "splice",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
					"parent": "Array"
				},
				"unshift": {
					"name": "unshift",
					"type": "Event",
					"description": "Inserts new elements at the start of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"every": {
					"name": "every",
					"type": "Event",
					"description": "Determines whether all the members of an array satisfy the specified test.",
					"parent": "Array"
				},
				"some": {
					"name": "some",
					"type": "Event",
					"description": "Determines whether the specified callback function returns true for any element of an array.",
					"parent": "Array"
				},
				"forEach": {
					"name": "forEach",
					"type": "Event",
					"description": "Performs the specified action for each element in an array.",
					"parent": "Array"
				},
				"map": {
					"name": "map",
					"type": "Event",
					"description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
					"parent": "Array"
				},
				"filter": {
					"name": "filter",
					"type": "Event",
					"description": "Returns the elements of an array that meet the condition specified in a callback function.",
					"parent": "Array"
				},
				"reduce": {
					"name": "reduce",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"reduceRight": {
					"name": "reduceRight",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"find": {
					"name": "find",
					"description": "Returns the value of the first element in the array where predicate is true, and undefined otherwise.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"findIndex": {
					"name": "findIndex",
					"type": "Event",
					"description": "Returns the index of the first element in the array where predicate is true, and -1 otherwise.",
					"parent": "Array"
				},
				"fill": {
					"name": "fill",
					"type": "Event",
					"description": "Changes all array elements from start to end index to a static value and returns the modified array",
					"parent": "Array"
				},
				"copyWithin": {
					"name": "copyWithin",
					"type": "Event",
					"description": "Returns the this object after copying a section of the array identified by start and end to the same array starting at position target",
					"parent": "Array"
				},
				"entries": {
					"name": "entries",
					"type": "Event",
					"description": "Returns an iterable of key, value pairs for every entry in the array",
					"parent": "Array"
				},
				"keys": {
					"name": "keys",
					"type": "Event",
					"description": "Returns an iterable of keys in the array",
					"parent": "Array"
				},
				"values": {
					"name": "values",
					"type": "Event",
					"description": "Returns an iterable of values in the array",
					"parent": "Array"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Determines whether an array includes a certain element, returning true or false as appropriate.",
					"parent": "Array"
				},
				"flatMap": {
					"name": "flatMap",
					"description": "Calls a defined callback function on each element of an array. Then, flattens the result into a new array. This is identical to a map followed by flat with depth 1.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"flat": {
					"name": "flat",
					"type": "Event",
					"description": "Returns a new array with all sub-array elements concatenated into it recursively up to the specified depth.",
					"parent": "Array"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "Array"
				},
				"__@unscopables@327": {
					"name": "__@unscopables@327",
					"type": "Event",
					"description": "Returns an object whose properties have the value true when they will be absent when used in a with statement.",
					"parent": "Array"
				}
			},
			"relativePath": "src/components/drag_and_drop/services.ts"
		},
		"ElasticEui_euiDragDropMove": {
			"id": "ElasticEui_euiDragDropMove",
			"name": "EuiDragDropMove",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiDragDropMove",
				"lib": "elasticEui"
			},
			"required": [
				"length",
				"pop",
				"push",
				"concat",
				"join",
				"reverse",
				"shift",
				"slice",
				"sort",
				"splice",
				"unshift",
				"indexOf",
				"lastIndexOf",
				"every",
				"some",
				"forEach",
				"map",
				"filter",
				"reduce",
				"reduceRight",
				"find",
				"findIndex",
				"fill",
				"copyWithin",
				"entries",
				"keys",
				"values",
				"includes",
				"flatMap",
				"flat",
				"__@iterator@43",
				"__@unscopables@327"
			],
			"props": {
				"length": {
					"name": "length",
					"type": "number",
					"description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
					"parent": "Array"
				},
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of an array.",
					"parent": "Array"
				},
				"toLocaleString": {
					"name": "toLocaleString",
					"type": "Event",
					"description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
					"parent": "Array"
				},
				"pop": {
					"name": "pop",
					"type": "Event",
					"description": "Removes the last element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"push": {
					"name": "push",
					"type": "Event",
					"description": "Appends new elements to the end of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"concat": {
					"name": "concat",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Combines two or more arrays. This method returns a new array without modifying any existing arrays.",
					"parent": "Array"
				},
				"join": {
					"name": "join",
					"type": "Event",
					"description": "Adds all the elements of an array into a string, separated by the specified separator string.",
					"parent": "Array"
				},
				"reverse": {
					"name": "reverse",
					"type": "Event",
					"description": "Reverses the elements in an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"shift": {
					"name": "shift",
					"type": "Event",
					"description": "Removes the first element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a copy of a section of an array. For both start and end, a negative index can be used to indicate an offset from the end of the array. For example, -2 refers to the second to last element of the array.",
					"parent": "Array"
				},
				"sort": {
					"name": "sort",
					"type": "Event",
					"description": "Sorts an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"splice": {
					"name": "splice",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
					"parent": "Array"
				},
				"unshift": {
					"name": "unshift",
					"type": "Event",
					"description": "Inserts new elements at the start of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"every": {
					"name": "every",
					"type": "Event",
					"description": "Determines whether all the members of an array satisfy the specified test.",
					"parent": "Array"
				},
				"some": {
					"name": "some",
					"type": "Event",
					"description": "Determines whether the specified callback function returns true for any element of an array.",
					"parent": "Array"
				},
				"forEach": {
					"name": "forEach",
					"type": "Event",
					"description": "Performs the specified action for each element in an array.",
					"parent": "Array"
				},
				"map": {
					"name": "map",
					"type": "Event",
					"description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
					"parent": "Array"
				},
				"filter": {
					"name": "filter",
					"type": "Event",
					"description": "Returns the elements of an array that meet the condition specified in a callback function.",
					"parent": "Array"
				},
				"reduce": {
					"name": "reduce",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"reduceRight": {
					"name": "reduceRight",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"find": {
					"name": "find",
					"description": "Returns the value of the first element in the array where predicate is true, and undefined otherwise.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"findIndex": {
					"name": "findIndex",
					"type": "Event",
					"description": "Returns the index of the first element in the array where predicate is true, and -1 otherwise.",
					"parent": "Array"
				},
				"fill": {
					"name": "fill",
					"type": "Event",
					"description": "Changes all array elements from start to end index to a static value and returns the modified array",
					"parent": "Array"
				},
				"copyWithin": {
					"name": "copyWithin",
					"type": "Event",
					"description": "Returns the this object after copying a section of the array identified by start and end to the same array starting at position target",
					"parent": "Array"
				},
				"entries": {
					"name": "entries",
					"type": "Event",
					"description": "Returns an iterable of key, value pairs for every entry in the array",
					"parent": "Array"
				},
				"keys": {
					"name": "keys",
					"type": "Event",
					"description": "Returns an iterable of keys in the array",
					"parent": "Array"
				},
				"values": {
					"name": "values",
					"type": "Event",
					"description": "Returns an iterable of values in the array",
					"parent": "Array"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Determines whether an array includes a certain element, returning true or false as appropriate.",
					"parent": "Array"
				},
				"flatMap": {
					"name": "flatMap",
					"description": "Calls a defined callback function on each element of an array. Then, flattens the result into a new array. This is identical to a map followed by flat with depth 1.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"flat": {
					"name": "flat",
					"type": "Event",
					"description": "Returns a new array with all sub-array elements concatenated into it recursively up to the specified depth.",
					"parent": "Array"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "Array"
				},
				"__@unscopables@327": {
					"name": "__@unscopables@327",
					"type": "Event",
					"description": "Returns an object whose properties have the value true when they will be absent when used in a with statement.",
					"parent": "Array"
				}
			},
			"relativePath": "src/components/drag_and_drop/services.ts"
		},
		"ElasticEui_euiDragDropReorder": {
			"id": "ElasticEui_euiDragDropReorder",
			"name": "EuiDragDropReorder",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiDragDropReorder",
				"lib": "elasticEui"
			},
			"required": [
				"length",
				"pop",
				"push",
				"concat",
				"join",
				"reverse",
				"shift",
				"slice",
				"sort",
				"splice",
				"unshift",
				"indexOf",
				"lastIndexOf",
				"every",
				"some",
				"forEach",
				"map",
				"filter",
				"reduce",
				"reduceRight",
				"find",
				"findIndex",
				"fill",
				"copyWithin",
				"entries",
				"keys",
				"values",
				"includes",
				"flatMap",
				"flat",
				"__@iterator@43",
				"__@unscopables@327"
			],
			"props": {
				"length": {
					"name": "length",
					"type": "number",
					"description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
					"parent": "Array"
				},
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of an array.",
					"parent": "Array"
				},
				"toLocaleString": {
					"name": "toLocaleString",
					"type": "Event",
					"description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
					"parent": "Array"
				},
				"pop": {
					"name": "pop",
					"type": "Event",
					"description": "Removes the last element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"push": {
					"name": "push",
					"type": "Event",
					"description": "Appends new elements to the end of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"concat": {
					"name": "concat",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Combines two or more arrays. This method returns a new array without modifying any existing arrays.",
					"parent": "Array"
				},
				"join": {
					"name": "join",
					"type": "Event",
					"description": "Adds all the elements of an array into a string, separated by the specified separator string.",
					"parent": "Array"
				},
				"reverse": {
					"name": "reverse",
					"type": "Event",
					"description": "Reverses the elements in an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"shift": {
					"name": "shift",
					"type": "Event",
					"description": "Removes the first element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a copy of a section of an array. For both start and end, a negative index can be used to indicate an offset from the end of the array. For example, -2 refers to the second to last element of the array.",
					"parent": "Array"
				},
				"sort": {
					"name": "sort",
					"type": "Event",
					"description": "Sorts an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"splice": {
					"name": "splice",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
					"parent": "Array"
				},
				"unshift": {
					"name": "unshift",
					"type": "Event",
					"description": "Inserts new elements at the start of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"every": {
					"name": "every",
					"type": "Event",
					"description": "Determines whether all the members of an array satisfy the specified test.",
					"parent": "Array"
				},
				"some": {
					"name": "some",
					"type": "Event",
					"description": "Determines whether the specified callback function returns true for any element of an array.",
					"parent": "Array"
				},
				"forEach": {
					"name": "forEach",
					"type": "Event",
					"description": "Performs the specified action for each element in an array.",
					"parent": "Array"
				},
				"map": {
					"name": "map",
					"type": "Event",
					"description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
					"parent": "Array"
				},
				"filter": {
					"name": "filter",
					"type": "Event",
					"description": "Returns the elements of an array that meet the condition specified in a callback function.",
					"parent": "Array"
				},
				"reduce": {
					"name": "reduce",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"reduceRight": {
					"name": "reduceRight",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"find": {
					"name": "find",
					"description": "Returns the value of the first element in the array where predicate is true, and undefined otherwise.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"findIndex": {
					"name": "findIndex",
					"type": "Event",
					"description": "Returns the index of the first element in the array where predicate is true, and -1 otherwise.",
					"parent": "Array"
				},
				"fill": {
					"name": "fill",
					"type": "Event",
					"description": "Changes all array elements from start to end index to a static value and returns the modified array",
					"parent": "Array"
				},
				"copyWithin": {
					"name": "copyWithin",
					"type": "Event",
					"description": "Returns the this object after copying a section of the array identified by start and end to the same array starting at position target",
					"parent": "Array"
				},
				"entries": {
					"name": "entries",
					"type": "Event",
					"description": "Returns an iterable of key, value pairs for every entry in the array",
					"parent": "Array"
				},
				"keys": {
					"name": "keys",
					"type": "Event",
					"description": "Returns an iterable of keys in the array",
					"parent": "Array"
				},
				"values": {
					"name": "values",
					"type": "Event",
					"description": "Returns an iterable of values in the array",
					"parent": "Array"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Determines whether an array includes a certain element, returning true or false as appropriate.",
					"parent": "Array"
				},
				"flatMap": {
					"name": "flatMap",
					"description": "Calls a defined callback function on each element of an array. Then, flattens the result into a new array. This is identical to a map followed by flat with depth 1.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"flat": {
					"name": "flat",
					"type": "Event",
					"description": "Returns a new array with all sub-array elements concatenated into it recursively up to the specified depth.",
					"parent": "Array"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "Array"
				},
				"__@unscopables@327": {
					"name": "__@unscopables@327",
					"type": "Event",
					"description": "Returns an object whose properties have the value true when they will be absent when used in a with statement.",
					"parent": "Array"
				}
			},
			"relativePath": "src/components/drag_and_drop/services.ts"
		},
		"ElasticEui_DraggableLocation": {
			"id": "ElasticEui_DraggableLocation",
			"name": "DraggableLocation",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "DraggableLocation",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "node_modules/react-beautiful-dnd/dist/react-beautiful-dnd.cjs.js"
		},
		"ElasticEui_DraggableProps": {
			"id": "ElasticEui_DraggableProps",
			"name": "DraggableProps",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "DraggableProps",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "node_modules/react-beautiful-dnd/dist/react-beautiful-dnd.cjs.js"
		},
		"ElasticEui_DraggableProvidedDragHandleProps": {
			"id": "ElasticEui_DraggableProvidedDragHandleProps",
			"name": "DraggableProvidedDragHandleProps",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "DraggableProvidedDragHandleProps",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "node_modules/react-beautiful-dnd/dist/react-beautiful-dnd.cjs.js"
		},
		"ElasticEui_DragDropContextProps": {
			"id": "ElasticEui_DragDropContextProps",
			"name": "DragDropContextProps",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "DragDropContextProps",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "node_modules/react-beautiful-dnd/dist/react-beautiful-dnd.cjs.js"
		},
		"ElasticEui_DragStart": {
			"id": "ElasticEui_DragStart",
			"name": "DragStart",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "DragStart",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "node_modules/react-beautiful-dnd/dist/react-beautiful-dnd.cjs.js"
		},
		"ElasticEui_DroppableProps": {
			"id": "ElasticEui_DroppableProps",
			"name": "DroppableProps",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "DroppableProps",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "node_modules/react-beautiful-dnd/dist/react-beautiful-dnd.cjs.js"
		},
		"ElasticEui_DropResult": {
			"id": "ElasticEui_DropResult",
			"name": "DropResult",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "DropResult",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "node_modules/react-beautiful-dnd/dist/react-beautiful-dnd.cjs.js"
		},
		"ElasticEui_ResponderProvided": {
			"id": "ElasticEui_ResponderProvided",
			"name": "ResponderProvided",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "ResponderProvided",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "node_modules/react-beautiful-dnd/dist/react-beautiful-dnd.cjs.js"
		},
		"ElasticEui_EuiEmptyPrompt": {
			"id": "ElasticEui_EuiEmptyPrompt",
			"name": "EuiEmptyPrompt",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiEmptyPrompt",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"primary",
						"accent",
						"success",
						"warning",
						"danger",
						"subdued",
						"plain",
						"transparent"
					],
					"default": "transparent",
					"description": "Background color of the panel; Usually a lightened form of the brand colors",
					"parent": "_EuiPanelProps"
				},
				"element": {
					"name": "element",
					"type": "string",
					"enum": [
						"div"
					],
					"parent": "_EuiPanelDivlike"
				},
				"hasBorder": {
					"name": "hasBorder",
					"type": "boolean",
					"description": "Adds a slight 1px border on all edges. Only works when color=plain | transparent Default is undefined and will default to that themes panel style",
					"parent": "_EuiPanelProps"
				},
				"hasShadow": {
					"name": "hasShadow",
					"type": "boolean",
					"description": "Adds a medium shadow to the panel; Only works when color=plain",
					"parent": "_EuiPanelProps"
				},
				"iconType": {
					"name": "iconType",
					"type": "string",
					"parent": "EuiEmptyPromptProps"
				},
				"iconColor": {
					"name": "iconColor",
					"type": "string",
					"description": "Color for iconType when passed as an IconType",
					"parent": "EuiEmptyPromptProps"
				},
				"icon": {
					"name": "icon",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Custom icon replacing the one generated by iconType",
					"parent": "EuiEmptyPromptProps"
				},
				"title": {
					"name": "title",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Requires passing a single element that gets wrapped in an EuiTitle. Recommendation is a heading, preferrably an <h2> if in its own section",
					"parent": "EuiEmptyPromptProps"
				},
				"titleSize": {
					"name": "titleSize",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs",
						"l",
						"xxxs",
						"xxs"
					],
					"default": "m",
					"description": "Choose from one of the EuiTitle.size options",
					"parent": "EuiEmptyPromptProps"
				},
				"body": {
					"name": "body",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Gets wrapped in a subdued EuiText block. Recommendation is to pass typical text elements like <p>",
					"parent": "EuiEmptyPromptProps"
				},
				"actions": {
					"name": "actions",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Pass a single or an array of actions (buttons) that get stacked at the bottom. Recommendation is to pass the primary action first and secondary actions as empty buttons",
					"parent": "EuiEmptyPromptProps"
				},
				"footer": {
					"name": "footer",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Optionally provide a footer. Accepts any combination of elements.",
					"parent": "EuiEmptyPromptProps"
				},
				"layout": {
					"name": "layout",
					"type": "string",
					"enum": [
						"horizontal",
						"vertical"
					],
					"default": "vertical",
					"description": "Sets the layout. When horizontal the icon goes to the right column.",
					"parent": "EuiEmptyPromptProps"
				},
				"paddingSize": {
					"name": "paddingSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l"
					],
					"default": "l",
					"description": "Padding applied around the content and footer.",
					"parent": "EuiEmptyPromptProps"
				}
			},
			"relativePath": "src/components/empty_prompt/empty_prompt.tsx"
		},
		"ElasticEui_EuiErrorBoundary": {
			"id": "ElasticEui_EuiErrorBoundary",
			"name": "EuiErrorBoundary",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiErrorBoundary",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/error_boundary/error_boundary.tsx"
		},
		"ElasticEui_EuiExpression": {
			"id": "ElasticEui_EuiExpression",
			"name": "EuiExpression",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiExpression",
				"lib": "elasticEui"
			},
			"required": [
				"description"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"description": {
					"name": "description",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "First part of the expression",
					"parent": "EuiExpressionProps"
				},
				"descriptionProps": {
					"name": "descriptionProps",
					"type": "unknown",
					"parent": "EuiExpressionProps"
				},
				"value": {
					"name": "value",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Second part of the expression",
					"parent": "EuiExpressionProps"
				},
				"valueProps": {
					"name": "valueProps",
					"type": "unknown",
					"parent": "EuiExpressionProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"primary",
						"accent",
						"success",
						"warning",
						"danger",
						"subdued"
					],
					"default": "success",
					"description": "Color of the description",
					"parent": "EuiExpressionProps"
				},
				"uppercase": {
					"name": "uppercase",
					"type": "boolean",
					"default": false,
					"description": "Should the description auto-uppercase?",
					"parent": "EuiExpressionProps"
				},
				"isActive": {
					"name": "isActive",
					"type": "boolean",
					"default": false,
					"description": "Adds an solid border at the bottom",
					"parent": "EuiExpressionProps"
				},
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"description": "Turns the component into a button and adds an editable style border at the bottom",
					"parent": "EuiExpressionProps"
				},
				"display": {
					"name": "display",
					"type": "string",
					"enum": [
						"inline",
						"columns"
					],
					"default": "inline",
					"description": "Sets the display style for the expression. Defaults to inline",
					"parent": "EuiExpressionProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"default": false,
					"description": "Forces color to display as danger and shows an alert icon",
					"parent": "EuiExpressionProps"
				},
				"descriptionWidth": {
					"name": "descriptionWidth",
					"type": "string",
					"default": "20%",
					"description": "Sets a custom width for the description when using the columns layout. Set to a number for a custom width in px. Set to a string for a custom width in custom measurement. Defaults to 20%",
					"parent": "EuiExpressionProps"
				},
				"textWrap": {
					"name": "textWrap",
					"type": "string",
					"enum": [
						"truncate",
						"break-word"
					],
					"default": "break-word",
					"description": "Sets how to handle the wrapping of long text.",
					"parent": "EuiExpressionProps"
				}
			},
			"relativePath": "src/components/expression/expression.tsx"
		},
		"ElasticEui_EuiFilterGroup": {
			"id": "ElasticEui_EuiFilterGroup",
			"name": "EuiFilterGroup",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFilterGroup",
				"lib": "elasticEui"
			},
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"default": false,
					"description": "Expand the whole bar to fill its parents width",
					"parent": "EuiFilterGroupProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"description": "When true, creates a shorter height filter group matching that of compressed form controls",
					"parent": "EuiFilterGroupProps"
				}
			},
			"relativePath": "src/components/filter_group/filter_group.tsx"
		},
		"ElasticEui_EuiFilterButton": {
			"id": "ElasticEui_EuiFilterButton",
			"name": "EuiFilterButton",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFilterButton",
				"lib": "elasticEui"
			},
			"props": {
				"hasActiveFilters": {
					"name": "hasActiveFilters",
					"type": "boolean",
					"description": "Bolds the button if true",
					"parent": "EuiFilterButtonProps"
				},
				"numFilters": {
					"name": "numFilters",
					"type": "number",
					"description": "Pass the total number of filters available and it will add a subdued notification badge showing the number",
					"parent": "EuiFilterButtonProps"
				},
				"numActiveFilters": {
					"name": "numActiveFilters",
					"type": "number",
					"description": "Pass the number of selected filters and it will add a bright notification badge showing the number",
					"parent": "EuiFilterButtonProps"
				},
				"isSelected": {
					"name": "isSelected",
					"type": "boolean",
					"description": "Applies a visual state to the button useful when using with a popover. Applies the boolean state as the aria-pressed property to create a toggle button. Only use when the readable text does not change between states.*",
					"parent": "EuiFilterButtonProps"
				},
				"grow": {
					"name": "grow",
					"type": "boolean",
					"default": false,
					"description": "Should the button grow to fill its container, best used for dropdown buttons",
					"parent": "EuiFilterButtonProps"
				},
				"withNext": {
					"name": "withNext",
					"type": "boolean",
					"description": "Remove border after button, good for opposite filters",
					"parent": "EuiFilterButtonProps"
				},
				"noDivider": {
					"name": "noDivider",
					"type": "boolean",
					"description": "_DEPRECATED: use withNext_ Remove border after button, good for opposite filters",
					"parent": "EuiFilterButtonProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"primary",
						"success",
						"warning",
						"danger",
						"ghost",
						"text"
					],
					"default": "text",
					"description": "Any of our named colors",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"description": "disabled is also allowed",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"description": "Force disables the button and changes the icon to a loading spinner",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"contentProps": {
					"name": "contentProps",
					"type": "unknown",
					"description": "Object of props passed to the <span/> wrapping the buttons content",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"iconType": {
					"name": "iconType",
					"type": "string",
					"description": "Any type accepted by EuiIcon",
					"parent": "EuiButtonContentProps"
				},
				"iconSide": {
					"name": "iconSide",
					"type": "string",
					"enum": [
						"left",
						"right"
					],
					"default": "right",
					"description": "Can only be one side left or right",
					"parent": "EuiButtonContentProps"
				},
				"textProps": {
					"name": "textProps",
					"type": "unknown",
					"description": "Object of props passed to the <span/> wrapping the contents text/children only (not icon)",
					"parent": "EuiButtonContentProps"
				},
				"iconSize": {
					"name": "iconSize",
					"type": "string",
					"enum": [
						"s",
						"m"
					],
					"parent": "EuiButtonContentProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"href": {
					"name": "href",
					"type": "string",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"parent": "PropsForButton"
				},
				"download": {
					"name": "download",
					"type": "unknown",
					"parent": "AnchorHTMLAttributes"
				},
				"hrefLang": {
					"name": "hrefLang",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"media": {
					"name": "media",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"ping": {
					"name": "ping",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"rel": {
					"name": "rel",
					"type": "string",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"target": {
					"name": "target",
					"type": "string",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"type": {
					"name": "type",
					"type": "string",
					"enum": [
						"button",
						"submit"
					],
					"default": "button",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"referrerPolicy": {
					"name": "referrerPolicy",
					"type": "string",
					"enum": [
						"",
						"no-referrer",
						"no-referrer-when-downgrade",
						"origin",
						"origin-when-cross-origin",
						"same-origin",
						"strict-origin",
						"strict-origin-when-cross-origin",
						"unsafe-url"
					],
					"parent": "AnchorHTMLAttributes"
				},
				"buttonRef": {
					"name": "buttonRef",
					"type": "Event",
					"parent": "CommonEuiButtonEmptyProps"
				}
			},
			"relativePath": "src/components/filter_group/filter_button.tsx"
		},
		"ElasticEui_EuiFilterSelectItem": {
			"id": "ElasticEui_EuiFilterSelectItem",
			"name": "EuiFilterSelectItem",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFilterSelectItem",
				"lib": "elasticEui"
			},
			"props": {
				"checked": {
					"name": "checked",
					"type": "string",
					"enum": [
						"off",
						"on"
					],
					"parent": "EuiFilterSelectItemProps"
				},
				"showIcons": {
					"name": "showIcons",
					"type": "boolean",
					"default": false,
					"parent": "EuiFilterSelectItemProps"
				},
				"isFocused": {
					"name": "isFocused",
					"type": "boolean",
					"parent": "EuiFilterSelectItemProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/filter_group/filter_select_item.tsx"
		},
		"ElasticEui_EuiFacetButton": {
			"id": "ElasticEui_EuiFacetButton",
			"name": "EuiFacetButton",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFacetButton",
				"lib": "elasticEui"
			},
			"props": {
				"buttonRef": {
					"name": "buttonRef",
					"type": "Event",
					"parent": "EuiFacetButtonProps"
				},
				"children": {
					"name": "children",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "ReactNode to render as this components content",
					"parent": "EuiFacetButtonProps"
				},
				"icon": {
					"name": "icon",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Any node, but preferably a EuiIcon or EuiAvatar",
					"parent": "EuiFacetButtonProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"default": false,
					"parent": "EuiFacetButtonProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"default": false,
					"description": "Adds/swaps for loading spinner & disables",
					"parent": "EuiFacetButtonProps"
				},
				"isSelected": {
					"name": "isSelected",
					"type": "boolean",
					"default": false,
					"description": "Changes visual of button to indicate its currently selected",
					"parent": "EuiFacetButtonProps"
				},
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"parent": "EuiFacetButtonProps"
				},
				"quantity": {
					"name": "quantity",
					"type": "number",
					"description": "Adds a notification indicator for displaying the quantity provided",
					"parent": "EuiFacetButtonProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/facet/facet_button.tsx"
		},
		"ElasticEui_EuiFacetGroup": {
			"id": "ElasticEui_EuiFacetGroup",
			"name": "EuiFacetGroup",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFacetGroup",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"layout": {
					"name": "layout",
					"type": "string",
					"enum": [
						"horizontal",
						"vertical"
					],
					"default": "vertical",
					"description": "Vertically in a column, or horizontally in one wrapping line",
					"parent": "EuiFacetGroupProps"
				},
				"gutterSize": {
					"name": "gutterSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l"
					],
					"default": "m",
					"description": "Distance between facet buttons. Horizontal layout always adds more distance horizontally between buttons.",
					"parent": "EuiFacetGroupProps"
				}
			},
			"relativePath": "src/components/facet/facet_group.tsx"
		},
		"ElasticEui_EuiFlexGroup": {
			"id": "ElasticEui_EuiFlexGroup",
			"name": "EuiFlexGroup",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFlexGroup",
				"lib": "elasticEui"
			},
			"props": {
				"alignItems": {
					"name": "alignItems",
					"type": "string",
					"enum": [
						"baseline",
						"stretch",
						"center",
						"flexStart",
						"flexEnd"
					],
					"default": "stretch",
					"parent": "EuiFlexGroupProps"
				},
				"component": {
					"name": "component",
					"type": "string",
					"enum": [
						"div",
						"span"
					],
					"default": "div",
					"parent": "EuiFlexGroupProps"
				},
				"direction": {
					"name": "direction",
					"type": "string",
					"enum": [
						"row",
						"column",
						"rowReverse",
						"columnReverse"
					],
					"default": "row",
					"parent": "EuiFlexGroupProps"
				},
				"gutterSize": {
					"name": "gutterSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"xs",
						"l",
						"xl"
					],
					"default": "l",
					"parent": "EuiFlexGroupProps"
				},
				"justifyContent": {
					"name": "justifyContent",
					"type": "string",
					"enum": [
						"center",
						"flexStart",
						"flexEnd",
						"spaceBetween",
						"spaceAround",
						"spaceEvenly"
					],
					"default": "flexStart",
					"parent": "EuiFlexGroupProps"
				},
				"responsive": {
					"name": "responsive",
					"type": "boolean",
					"default": false,
					"parent": "EuiFlexGroupProps"
				},
				"wrap": {
					"name": "wrap",
					"type": "boolean",
					"default": false,
					"parent": "EuiFlexGroupProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"ref": {
					"name": "ref",
					"type": "Event",
					"parent": "RefAttributes"
				}
			},
			"relativePath": "src/components/flex/flex_group.tsx"
		},
		"ElasticEui_EuiFlexGrid": {
			"id": "ElasticEui_EuiFlexGrid",
			"name": "EuiFlexGrid",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFlexGrid",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"columns": {
					"name": "columns",
					"type": "number",
					"enum": [
						0,
						1,
						2,
						3,
						4
					],
					"default": 0,
					"description": "Number of columns 1-4, pass 0 for normal display",
					"parent": "EuiFlexGridProps"
				},
				"direction": {
					"name": "direction",
					"type": "string",
					"enum": [
						"row",
						"column"
					],
					"default": "row",
					"description": "Flex layouts default to left-right then top-down (row). Change this prop to column to create a top-down then left-right display. Only works with column count of 1-4.",
					"parent": "EuiFlexGridProps"
				},
				"gutterSize": {
					"name": "gutterSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l",
						"xl"
					],
					"default": "l",
					"description": "Space between flex items",
					"parent": "EuiFlexGridProps"
				},
				"responsive": {
					"name": "responsive",
					"type": "boolean",
					"default": false,
					"description": "Force each item to be display block on smaller screens",
					"parent": "EuiFlexGridProps"
				},
				"component": {
					"name": "component",
					"type": "string",
					"enum": [
						"symbol",
						"object",
						"article",
						"button",
						"dialog",
						"figure",
						"form",
						"img",
						"link",
						"main",
						"menu",
						"menuitem",
						"option",
						"switch",
						"table",
						"text",
						"style",
						"slot",
						"title",
						"s",
						"filter",
						"image",
						"stop",
						"time",
						"div",
						"fieldset",
						"legend",
						"big",
						"small",
						"sub",
						"sup",
						"clipPath",
						"mask",
						"path",
						"label",
						"a",
						"span",
						"input",
						"abbr",
						"address",
						"area",
						"aside",
						"audio",
						"b",
						"base",
						"bdi",
						"bdo",
						"blockquote",
						"body",
						"br",
						"canvas",
						"caption",
						"cite",
						"code",
						"col",
						"colgroup",
						"data",
						"datalist",
						"dd",
						"del",
						"details",
						"dfn",
						"dl",
						"dt",
						"em",
						"embed",
						"figcaption",
						"footer",
						"h1",
						"h2",
						"h3",
						"h4",
						"h5",
						"h6",
						"head",
						"header",
						"hgroup",
						"hr",
						"html",
						"i",
						"iframe",
						"ins",
						"kbd",
						"keygen",
						"li",
						"map",
						"mark",
						"meta",
						"meter",
						"nav",
						"noscript",
						"ol",
						"optgroup",
						"output",
						"p",
						"param",
						"picture",
						"pre",
						"progress",
						"q",
						"rp",
						"rt",
						"ruby",
						"samp",
						"script",
						"section",
						"select",
						"source",
						"strong",
						"summary",
						"template",
						"tbody",
						"td",
						"textarea",
						"tfoot",
						"th",
						"thead",
						"tr",
						"track",
						"u",
						"ul",
						"var",
						"video",
						"wbr",
						"webview",
						"circle",
						"pattern",
						"noindex",
						"svg",
						"animate",
						"animateMotion",
						"animateTransform",
						"defs",
						"desc",
						"ellipse",
						"feBlend",
						"feColorMatrix",
						"feComponentTransfer",
						"feComposite",
						"feConvolveMatrix",
						"feDiffuseLighting",
						"feDisplacementMap",
						"feDistantLight",
						"feDropShadow",
						"feFlood",
						"feFuncA",
						"feFuncB",
						"feFuncG",
						"feFuncR",
						"feGaussianBlur",
						"feImage",
						"feMerge",
						"feMergeNode",
						"feMorphology",
						"feOffset",
						"fePointLight",
						"feSpecularLighting",
						"feSpotLight",
						"feTile",
						"feTurbulence",
						"foreignObject",
						"g",
						"line",
						"linearGradient",
						"marker",
						"metadata",
						"mpath",
						"polygon",
						"polyline",
						"radialGradient",
						"rect",
						"textPath",
						"tspan",
						"use",
						"view"
					],
					"description": "The tag to render",
					"parent": "EuiFlexGridProps"
				}
			},
			"relativePath": "src/components/flex/flex_grid.tsx"
		},
		"ElasticEui_EuiFlexItem": {
			"id": "ElasticEui_EuiFlexItem",
			"name": "EuiFlexItem",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFlexItem",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"grow": {
					"name": "grow",
					"type": "number",
					"enum": [
						1,
						2,
						3,
						4,
						5,
						6,
						8,
						7,
						9,
						10
					],
					"default": 1,
					"parent": "EuiFlexItemProps"
				},
				"component": {
					"name": "component",
					"type": "string",
					"enum": [
						"symbol",
						"object",
						"article",
						"button",
						"dialog",
						"figure",
						"form",
						"img",
						"link",
						"main",
						"menu",
						"menuitem",
						"option",
						"switch",
						"table",
						"text",
						"style",
						"slot",
						"title",
						"s",
						"filter",
						"image",
						"stop",
						"time",
						"div",
						"fieldset",
						"legend",
						"big",
						"small",
						"sub",
						"sup",
						"clipPath",
						"mask",
						"path",
						"label",
						"a",
						"span",
						"input",
						"abbr",
						"address",
						"area",
						"aside",
						"audio",
						"b",
						"base",
						"bdi",
						"bdo",
						"blockquote",
						"body",
						"br",
						"canvas",
						"caption",
						"cite",
						"code",
						"col",
						"colgroup",
						"data",
						"datalist",
						"dd",
						"del",
						"details",
						"dfn",
						"dl",
						"dt",
						"em",
						"embed",
						"figcaption",
						"footer",
						"h1",
						"h2",
						"h3",
						"h4",
						"h5",
						"h6",
						"head",
						"header",
						"hgroup",
						"hr",
						"html",
						"i",
						"iframe",
						"ins",
						"kbd",
						"keygen",
						"li",
						"map",
						"mark",
						"meta",
						"meter",
						"nav",
						"noscript",
						"ol",
						"optgroup",
						"output",
						"p",
						"param",
						"picture",
						"pre",
						"progress",
						"q",
						"rp",
						"rt",
						"ruby",
						"samp",
						"script",
						"section",
						"select",
						"source",
						"strong",
						"summary",
						"template",
						"tbody",
						"td",
						"textarea",
						"tfoot",
						"th",
						"thead",
						"tr",
						"track",
						"u",
						"ul",
						"var",
						"video",
						"wbr",
						"webview",
						"circle",
						"pattern",
						"noindex",
						"svg",
						"animate",
						"animateMotion",
						"animateTransform",
						"defs",
						"desc",
						"ellipse",
						"feBlend",
						"feColorMatrix",
						"feComponentTransfer",
						"feComposite",
						"feConvolveMatrix",
						"feDiffuseLighting",
						"feDisplacementMap",
						"feDistantLight",
						"feDropShadow",
						"feFlood",
						"feFuncA",
						"feFuncB",
						"feFuncG",
						"feFuncR",
						"feGaussianBlur",
						"feImage",
						"feMerge",
						"feMergeNode",
						"feMorphology",
						"feOffset",
						"fePointLight",
						"feSpecularLighting",
						"feSpotLight",
						"feTile",
						"feTurbulence",
						"foreignObject",
						"g",
						"line",
						"linearGradient",
						"marker",
						"metadata",
						"mpath",
						"polygon",
						"polyline",
						"radialGradient",
						"rect",
						"textPath",
						"tspan",
						"use",
						"view"
					],
					"parent": "EuiFlexItemProps"
				}
			},
			"relativePath": "src/components/flex/flex_item.tsx"
		},
		"ElasticEui_EuiFlyout": {
			"id": "ElasticEui_EuiFlyout",
			"name": "EuiFlyout",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFlyout",
				"lib": "elasticEui"
			},
			"required": [
				"onClose"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"as": {
					"name": "as",
					"type": "string",
					"enum": [
						"symbol",
						"object",
						"article",
						"button",
						"dialog",
						"figure",
						"form",
						"img",
						"link",
						"main",
						"menu",
						"menuitem",
						"option",
						"switch",
						"table",
						"text",
						"style",
						"slot",
						"title",
						"s",
						"filter",
						"image",
						"stop",
						"time",
						"div",
						"fieldset",
						"legend",
						"big",
						"small",
						"sub",
						"sup",
						"clipPath",
						"mask",
						"path",
						"label",
						"a",
						"span",
						"input",
						"abbr",
						"address",
						"area",
						"aside",
						"audio",
						"b",
						"base",
						"bdi",
						"bdo",
						"blockquote",
						"body",
						"br",
						"canvas",
						"caption",
						"cite",
						"code",
						"col",
						"colgroup",
						"data",
						"datalist",
						"dd",
						"del",
						"details",
						"dfn",
						"dl",
						"dt",
						"em",
						"embed",
						"figcaption",
						"footer",
						"h1",
						"h2",
						"h3",
						"h4",
						"h5",
						"h6",
						"head",
						"header",
						"hgroup",
						"hr",
						"html",
						"i",
						"iframe",
						"ins",
						"kbd",
						"keygen",
						"li",
						"map",
						"mark",
						"meta",
						"meter",
						"nav",
						"noscript",
						"ol",
						"optgroup",
						"output",
						"p",
						"param",
						"picture",
						"pre",
						"progress",
						"q",
						"rp",
						"rt",
						"ruby",
						"samp",
						"script",
						"section",
						"select",
						"source",
						"strong",
						"summary",
						"template",
						"tbody",
						"td",
						"textarea",
						"tfoot",
						"th",
						"thead",
						"tr",
						"track",
						"u",
						"ul",
						"var",
						"video",
						"wbr",
						"webview",
						"circle",
						"pattern",
						"noindex",
						"svg",
						"animate",
						"animateMotion",
						"animateTransform",
						"defs",
						"desc",
						"ellipse",
						"feBlend",
						"feColorMatrix",
						"feComponentTransfer",
						"feComposite",
						"feConvolveMatrix",
						"feDiffuseLighting",
						"feDisplacementMap",
						"feDistantLight",
						"feDropShadow",
						"feFlood",
						"feFuncA",
						"feFuncB",
						"feFuncG",
						"feFuncR",
						"feGaussianBlur",
						"feImage",
						"feMerge",
						"feMergeNode",
						"feMorphology",
						"feOffset",
						"fePointLight",
						"feSpecularLighting",
						"feSpotLight",
						"feTile",
						"feTurbulence",
						"foreignObject",
						"g",
						"line",
						"linearGradient",
						"marker",
						"metadata",
						"mpath",
						"polygon",
						"polyline",
						"radialGradient",
						"rect",
						"textPath",
						"tspan",
						"use",
						"view"
					],
					"description": "Sets the HTML element for EuiFlyout",
					"parent": "Props"
				},
				"onClose": {
					"name": "onClose",
					"type": "Event",
					"parent": "_EuiFlyoutProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"description": "Defines the width of the panel. Pass a predefined size of s | m | l, or pass any number/string compatible with the CSS width attribute",
					"parent": "_EuiFlyoutProps"
				},
				"maxWidth": {
					"name": "maxWidth",
					"type": "string",
					"description": "Sets the max-width of the panel, set to true to use the default size, set to false to not restrict the width, set to a number for a custom width in px, set to a string for a custom width in custom measurement.",
					"parent": "_EuiFlyoutProps"
				},
				"paddingSize": {
					"name": "paddingSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l"
					],
					"description": "Customize the padding around the content of the flyout header, body and footer",
					"parent": "_EuiFlyoutProps"
				},
				"ownFocus": {
					"name": "ownFocus",
					"type": "boolean",
					"description": "Adds an EuiOverlayMask and wraps in an EuiPortal",
					"parent": "_EuiFlyoutProps"
				},
				"hideCloseButton": {
					"name": "hideCloseButton",
					"type": "boolean",
					"description": "Hides the default close button. You must provide another close button somewhere within the flyout.",
					"parent": "_EuiFlyoutProps"
				},
				"closeButtonAriaLabel": {
					"name": "closeButtonAriaLabel",
					"type": "string",
					"description": "Specify an aria-label for the close button of the flyout. Default is Close this dialog.",
					"parent": "_EuiFlyoutProps"
				},
				"closeButtonProps": {
					"name": "closeButtonProps",
					"type": "unknown",
					"description": "Extends EuiButtonIconProps onto the close button",
					"parent": "_EuiFlyoutProps"
				},
				"closeButtonPosition": {
					"name": "closeButtonPosition",
					"type": "string",
					"enum": [
						"inside",
						"outside"
					],
					"description": "Position of close button. inside: Floating to just inside the flyout, always top right; outside: Floating just outside the flyout near the top (side dependent on side). Helpful when the close button may cover other interactable content.",
					"parent": "_EuiFlyoutProps"
				},
				"maskProps": {
					"name": "maskProps",
					"type": "unknown",
					"description": "Adjustments to the EuiOverlayMask that is added when ownFocus = true",
					"parent": "_EuiFlyoutProps"
				},
				"type": {
					"name": "type",
					"type": "string",
					"enum": [
						"push",
						"overlay"
					],
					"description": "How to display the the flyout in relation to the body content; push keeps it visible, pushing the <body> content via padding",
					"parent": "_EuiFlyoutProps"
				},
				"outsideClickCloses": {
					"name": "outsideClickCloses",
					"type": "boolean",
					"description": "Forces this interaction on the mask overlay or body content. Defaults depend on ownFocus and type values",
					"parent": "_EuiFlyoutProps"
				},
				"side": {
					"name": "side",
					"type": "string",
					"enum": [
						"left",
						"right"
					],
					"description": "Which side of the window to attach to. The left option should only be used for navigation.",
					"parent": "_EuiFlyoutProps"
				},
				"role": {
					"name": "role",
					"type": "string",
					"description": "Defaults to dialog which is best for most cases of the flyout. Otherwise pass in your own, aria-role, or null to remove it and use the semantic as element instead",
					"parent": "_EuiFlyoutProps"
				},
				"pushMinBreakpoint": {
					"name": "pushMinBreakpoint",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs",
						"l",
						"xl"
					],
					"description": "Named breakpoint or pixel value for customizing the minimum window width to enable the push type",
					"parent": "_EuiFlyoutProps"
				},
				"style": {
					"name": "style",
					"type": "object",
					"parent": "_EuiFlyoutProps"
				}
			},
			"relativePath": "src/components/flyout/flyout.tsx"
		},
		"ElasticEui_EuiFlyoutBody": {
			"id": "ElasticEui_EuiFlyoutBody",
			"name": "EuiFlyoutBody",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFlyoutBody",
				"lib": "elasticEui"
			},
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"banner": {
					"name": "banner",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Use to display a banner at the top of the body. It is suggested to use EuiCallOut for it.",
					"parent": "EuiFlyoutBodyProps"
				}
			},
			"relativePath": "src/components/flyout/flyout_body.tsx"
		},
		"ElasticEui_EuiFlyoutFooter": {
			"id": "ElasticEui_EuiFlyoutFooter",
			"name": "EuiFlyoutFooter",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFlyoutFooter",
				"lib": "elasticEui"
			},
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/flyout/flyout_footer.tsx"
		},
		"ElasticEui_EuiFlyoutHeader": {
			"id": "ElasticEui_EuiFlyoutHeader",
			"name": "EuiFlyoutHeader",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFlyoutHeader",
				"lib": "elasticEui"
			},
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"hasBorder": {
					"name": "hasBorder",
					"type": "boolean",
					"default": false,
					"parent": "EuiFlyoutHeaderProps"
				}
			},
			"relativePath": "src/components/flyout/flyout_header.tsx"
		},
		"ElasticEui_EuiFocusTrap": {
			"id": "ElasticEui_EuiFocusTrap",
			"name": "EuiFocusTrap",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFocusTrap",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"style": {
					"name": "style",
					"type": "object",
					"parent": "ReactFocusOnProps"
				},
				"autoFocus": {
					"name": "autoFocus",
					"type": "boolean",
					"default": true,
					"description": "[focus-lock] control autofocus",
					"parent": "ReactFocusOnProps"
				},
				"as": {
					"name": "as",
					"type": "string",
					"default": "div",
					"description": "allows replacement of the host node",
					"parent": "ReactFocusOnProps"
				},
				"onClickOutside": {
					"name": "onClickOutside",
					"type": "Event",
					"description": "action to perform on click outside",
					"parent": "CommonProps"
				},
				"scrollLock": {
					"name": "scrollLock",
					"type": "boolean",
					"default": false,
					"description": "Controls scroll lock behavior",
					"parent": "ReactFocusOnProps"
				},
				"focusLock": {
					"name": "focusLock",
					"type": "boolean",
					"description": "Controls focus lock behavior",
					"parent": "ReactFocusOnProps"
				},
				"returnFocus": {
					"name": "returnFocus",
					"type": "boolean",
					"default": true,
					"description": "[focus-lock] control returnFocus",
					"parent": "ReactFocusOnProps"
				},
				"shouldIgnore": {
					"name": "shouldIgnore",
					"type": "Event",
					"description": "[focus-lock] allows ignoring focus on some elements",
					"parent": "ReactFocusOnProps"
				},
				"onEscapeKey": {
					"name": "onEscapeKey",
					"type": "Event",
					"description": "action to perform on Esc key press",
					"parent": "CommonProps"
				},
				"onActivation": {
					"name": "onActivation",
					"type": "Event",
					"description": "callback on lock activation",
					"parent": "CommonProps"
				},
				"onDeactivation": {
					"name": "onDeactivation",
					"type": "Event",
					"description": "callback on lock deactivation",
					"parent": "CommonProps"
				},
				"noIsolation": {
					"name": "noIsolation",
					"type": "boolean",
					"default": false,
					"description": "[scroll-lock] control isolation",
					"parent": "CommonProps"
				},
				"inert": {
					"name": "inert",
					"type": "boolean",
					"default": false,
					"description": "[scroll-lock] full page inert (event suppression)",
					"parent": "CommonProps"
				},
				"allowPinchZoom": {
					"name": "allowPinchZoom",
					"type": "boolean",
					"default": false,
					"description": "[scroll-lock] allows scroll based zoom",
					"parent": "CommonProps"
				},
				"shards": {
					"name": "shards",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "a list of elements which should be considered as a part of the lock",
					"parent": "CommonProps"
				},
				"clickOutsideDisables": {
					"name": "clickOutsideDisables",
					"type": "boolean",
					"default": false,
					"description": "Clicking outside the trap area will disable the trap",
					"parent": "EuiFocusTrapInterface"
				},
				"initialFocus": {
					"name": "initialFocus",
					"type": "string",
					"description": "Reference to element that will get focus when the trap is initiated",
					"parent": "EuiFocusTrapInterface"
				},
				"disabled": {
					"name": "disabled",
					"type": "boolean",
					"default": false,
					"parent": "EuiFocusTrapInterface"
				}
			},
			"relativePath": "src/components/focus_trap/focus_trap.tsx"
		},
		"ElasticEui_EuiCheckbox": {
			"id": "ElasticEui_EuiCheckbox",
			"name": "EuiCheckbox",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiCheckbox",
				"lib": "elasticEui"
			},
			"required": [
				"id",
				"onChange"
			],
			"props": {
				"id": {
					"name": "id",
					"type": "string",
					"parent": "EuiCheckboxProps"
				},
				"checked": {
					"name": "checked",
					"type": "boolean",
					"default": false,
					"parent": "EuiCheckboxProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"parent": "EuiCheckboxProps"
				},
				"inputRef": {
					"name": "inputRef",
					"type": "Event",
					"parent": "EuiCheckboxProps"
				},
				"label": {
					"name": "label",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"parent": "EuiCheckboxProps"
				},
				"type": {
					"name": "type",
					"type": "string",
					"enum": [
						"inList"
					],
					"parent": "EuiCheckboxProps"
				},
				"disabled": {
					"name": "disabled",
					"type": "boolean",
					"default": false,
					"parent": "EuiCheckboxProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"default": false,
					"description": "when true creates a shorter height checkbox row",
					"parent": "EuiCheckboxProps"
				},
				"indeterminate": {
					"name": "indeterminate",
					"type": "boolean",
					"default": false,
					"parent": "EuiCheckboxProps"
				},
				"labelProps": {
					"name": "labelProps",
					"type": "unknown",
					"description": "Object of props passed to the <label/>",
					"parent": "EuiCheckboxProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/form/checkbox/checkbox.tsx"
		},
		"ElasticEui_EuiCheckboxGroup": {
			"id": "ElasticEui_EuiCheckboxGroup",
			"name": "EuiCheckboxGroup",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiCheckboxGroup",
				"lib": "elasticEui"
			},
			"required": [
				"onChange"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"options": {
					"name": "options",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"default": [],
					"parent": "EuiCheckboxGroupProps"
				},
				"idToSelectedMap": {
					"name": "idToSelectedMap",
					"type": "unknown",
					"parent": "EuiCheckboxGroupProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"parent": "EuiCheckboxGroupProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"description": "Tightens up the spacing between checkbox rows and sends down the compressed prop to the checkbox itself",
					"parent": "EuiCheckboxGroupProps"
				},
				"disabled": {
					"name": "disabled",
					"type": "boolean",
					"parent": "EuiCheckboxGroupProps"
				},
				"legend": {
					"name": "legend",
					"type": "unknown",
					"description": "Adds an EuiFormLegend element as the first child If the individual labels for each radio do not provide a sufficient description, add a legend. Wraps the group in a EuiFormFieldset which adds an EuiLegend for titling the whole group. Accepts an EuiFormLegendProps shape.",
					"parent": "EuiFormFieldsetProps"
				}
			},
			"relativePath": "src/components/form/checkbox/checkbox_group.tsx"
		},
		"ElasticEui_EuiDescribedFormGroup": {
			"id": "ElasticEui_EuiDescribedFormGroup",
			"name": "EuiDescribedFormGroup",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiDescribedFormGroup",
				"lib": "elasticEui"
			},
			"required": [
				"title"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"gutterSize": {
					"name": "gutterSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"xs",
						"l",
						"xl"
					],
					"default": "l",
					"description": "Passed to EuiFlexGroup.",
					"parent": "EuiDescribedFormGroupProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"default": false,
					"description": "Expand to fill 100% of the parent. Default max-width is 800px.",
					"parent": "EuiDescribedFormGroupProps"
				},
				"ratio": {
					"name": "ratio",
					"type": "string",
					"enum": [
						"half",
						"third",
						"quarter"
					],
					"default": "half",
					"description": "Width ratio of description column compared to field column. Can be used in conjunction with fullWidth and may require fullWidth to be applied to child elements.",
					"parent": "EuiDescribedFormGroupProps"
				},
				"title": {
					"name": "title",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "For better accessibility, its recommended to use an HTML heading.",
					"parent": "EuiDescribedFormGroupProps"
				},
				"titleSize": {
					"name": "titleSize",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs",
						"l",
						"xxxs",
						"xxs"
					],
					"default": "xs",
					"description": "Adjust the visual size of the EuiTitle that wraps title.",
					"parent": "EuiDescribedFormGroupProps"
				},
				"description": {
					"name": "description",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Added as a child of EuiText.",
					"parent": "EuiDescribedFormGroupProps"
				},
				"descriptionFlexItemProps": {
					"name": "descriptionFlexItemProps",
					"type": "unknown",
					"description": "For customizing the description container. Extended from EuiFlexItem.",
					"parent": "EuiDescribedFormGroupProps"
				},
				"fieldFlexItemProps": {
					"name": "fieldFlexItemProps",
					"type": "unknown",
					"description": "For customizing the field container. Extended from EuiFlexItem.",
					"parent": "EuiDescribedFormGroupProps"
				}
			},
			"relativePath": "src/components/form/described_form_group/described_form_group.tsx"
		},
		"ElasticEui_EuiFieldNumber": {
			"id": "ElasticEui_EuiFieldNumber",
			"name": "EuiFieldNumber",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFieldNumber",
				"lib": "elasticEui"
			},
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"icon": {
					"name": "icon",
					"type": "string",
					"parent": "EuiFieldNumberProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"parent": "EuiFieldNumberProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"default": false,
					"parent": "EuiFieldNumberProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"default": false,
					"parent": "EuiFieldNumberProps"
				},
				"readOnly": {
					"name": "readOnly",
					"type": "boolean",
					"parent": "EuiFieldNumberProps"
				},
				"min": {
					"name": "min",
					"type": "number",
					"parent": "EuiFieldNumberProps"
				},
				"max": {
					"name": "max",
					"type": "number",
					"parent": "EuiFieldNumberProps"
				},
				"step": {
					"name": "step",
					"type": "string",
					"enum": [
						"any"
					],
					"description": "Specifies the granularity that the value must adhere to. Accepts a number or the string any for no stepping to allow for any value. Defaults to 1",
					"parent": "EuiFieldNumberProps"
				},
				"inputRef": {
					"name": "inputRef",
					"type": "Event",
					"parent": "EuiFieldNumberProps"
				},
				"prepend": {
					"name": "prepend",
					"type": "string",
					"description": "Creates an input group with element(s) coming before input. string | ReactElement or an array of these",
					"parent": "EuiFieldNumberProps"
				},
				"append": {
					"name": "append",
					"type": "string",
					"description": "Creates an input group with element(s) coming after input. string | ReactElement or an array of these",
					"parent": "EuiFieldNumberProps"
				},
				"controlOnly": {
					"name": "controlOnly",
					"type": "boolean",
					"description": "Completely removes form control layout wrapper and ignores icon, prepend, and append. Best used inside EuiFormControlLayoutDelimited.",
					"parent": "EuiFieldNumberProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"default": false,
					"description": "when true creates a shorter height input",
					"parent": "EuiFieldNumberProps"
				}
			},
			"relativePath": "src/components/form/field_number/field_number.tsx"
		},
		"ElasticEui_EuiFieldPassword": {
			"id": "ElasticEui_EuiFieldPassword",
			"name": "EuiFieldPassword",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFieldPassword",
				"lib": "elasticEui"
			},
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"parent": "EuiFieldPasswordProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"default": false,
					"parent": "EuiFieldPasswordProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"default": false,
					"parent": "EuiFieldPasswordProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"default": false,
					"parent": "EuiFieldPasswordProps"
				},
				"inputRef": {
					"name": "inputRef",
					"type": "Event",
					"parent": "EuiFieldPasswordProps"
				},
				"prepend": {
					"name": "prepend",
					"type": "string",
					"description": "Creates an input group with element(s) coming before input. string | ReactElement or an array of these",
					"parent": "EuiFieldPasswordProps"
				},
				"append": {
					"name": "append",
					"type": "string",
					"description": "Creates an input group with element(s) coming after input. string | ReactElement or an array of these",
					"parent": "EuiFieldPasswordProps"
				},
				"value": {
					"name": "value",
					"type": "string",
					"parent": "EuiFieldPasswordProps"
				},
				"type": {
					"name": "type",
					"type": "string",
					"enum": [
						"text",
						"password",
						"dual"
					],
					"default": "password",
					"description": "Change the type of input for manually handling obfuscation. The dual option adds the ability to toggle the obfuscation of the input by adding an icon button as the first append element",
					"parent": "EuiFieldPasswordProps"
				},
				"dualToggleProps": {
					"name": "dualToggleProps",
					"type": "unknown",
					"description": "Additional props to apply to the dual toggle. Extends EuiButtonIcon",
					"parent": "EuiFieldPasswordProps"
				}
			},
			"relativePath": "src/components/form/field_password/field_password.tsx"
		},
		"ElasticEui_EuiFieldSearch": {
			"id": "ElasticEui_EuiFieldSearch",
			"name": "EuiFieldSearch",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFieldSearch",
				"lib": "elasticEui"
			},
			"props": {
				"name": {
					"name": "name",
					"type": "string",
					"parent": "EuiFieldSearchProps"
				},
				"id": {
					"name": "id",
					"type": "string",
					"parent": "EuiFieldSearchProps"
				},
				"placeholder": {
					"name": "placeholder",
					"type": "string",
					"parent": "EuiFieldSearchProps"
				},
				"value": {
					"name": "value",
					"type": "string",
					"parent": "EuiFieldSearchProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"parent": "EuiFieldSearchProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"default": false,
					"parent": "EuiFieldSearchProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"default": false,
					"parent": "EuiFieldSearchProps"
				},
				"onSearch": {
					"name": "onSearch",
					"type": "Event",
					"description": "Called when the user presses [Enter] OR on change if the incremental prop is true. If you dont need the on[Enter] functionality, prefer using onChange",
					"parent": "EuiFieldSearchProps"
				},
				"incremental": {
					"name": "incremental",
					"type": "boolean",
					"default": false,
					"description": "When true the search will be executed (that is, the onSearch will be called) as the user types.",
					"parent": "EuiFieldSearchProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"default": false,
					"description": "when true creates a shorter height input",
					"parent": "EuiFieldSearchProps"
				},
				"inputRef": {
					"name": "inputRef",
					"type": "Event",
					"parent": "EuiFieldSearchProps"
				},
				"isClearable": {
					"name": "isClearable",
					"type": "boolean",
					"default": false,
					"description": "Shows a button that quickly clears any input",
					"parent": "EuiFieldSearchProps"
				},
				"prepend": {
					"name": "prepend",
					"type": "string",
					"description": "Creates an input group with element(s) coming before input string | ReactElement or an array of these",
					"parent": "EuiFieldSearchProps"
				},
				"append": {
					"name": "append",
					"type": "string",
					"description": "Creates an input group with element(s) coming after input. string | ReactElement or an array of these",
					"parent": "EuiFieldSearchProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/form/field_search/field_search.tsx"
		},
		"ElasticEui_EuiFieldText": {
			"id": "ElasticEui_EuiFieldText",
			"name": "EuiFieldText",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFieldText",
				"lib": "elasticEui"
			},
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"icon": {
					"name": "icon",
					"type": "string",
					"parent": "EuiFieldTextProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"parent": "EuiFieldTextProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"default": false,
					"parent": "EuiFieldTextProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"parent": "EuiFieldTextProps"
				},
				"inputRef": {
					"name": "inputRef",
					"type": "Event",
					"parent": "EuiFieldTextProps"
				},
				"prepend": {
					"name": "prepend",
					"type": "string",
					"description": "Creates an input group with element(s) coming before input. string | ReactElement or an array of these",
					"parent": "EuiFieldTextProps"
				},
				"append": {
					"name": "append",
					"type": "string",
					"description": "Creates an input group with element(s) coming after input. string | ReactElement or an array of these",
					"parent": "EuiFieldTextProps"
				},
				"controlOnly": {
					"name": "controlOnly",
					"type": "boolean",
					"description": "Completely removes form control layout wrapper and ignores icon, prepend, and append. Best used inside EuiFormControlLayoutDelimited.",
					"parent": "EuiFieldTextProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"description": "when true creates a shorter height input",
					"parent": "EuiFieldTextProps"
				}
			},
			"relativePath": "src/components/form/field_text/field_text.tsx"
		},
		"ElasticEui_EuiFilePicker": {
			"id": "ElasticEui_EuiFilePicker",
			"name": "EuiFilePicker",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFilePicker",
				"lib": "elasticEui"
			},
			"props": {
				"id": {
					"name": "id",
					"type": "string",
					"parent": "EuiFilePickerProps"
				},
				"name": {
					"name": "name",
					"type": "string",
					"parent": "EuiFilePickerProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "EuiFilePickerProps"
				},
				"initialPromptText": {
					"name": "initialPromptText",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "The content that appears in the dropzone if no file is attached",
					"parent": "EuiFilePickerProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"description": "Use as a callback to access the HTML FileList API",
					"parent": "EuiFilePickerProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"default": false,
					"description": "Reduces the size to a typical (compressed) input",
					"parent": "EuiFilePickerProps"
				},
				"display": {
					"name": "display",
					"type": "string",
					"enum": [
						"default",
						"large"
					],
					"default": "large",
					"description": "Size or type of display; default for normal height, similar to other controls; large for taller size",
					"parent": "EuiFilePickerProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"parent": "EuiFilePickerProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"parent": "EuiFilePickerProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"parent": "EuiFilePickerProps"
				},
				"disabled": {
					"name": "disabled",
					"type": "boolean",
					"parent": "EuiFilePickerProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/form/file_picker/file_picker.tsx"
		},
		"ElasticEui_EuiForm": {
			"id": "ElasticEui_EuiForm",
			"name": "EuiForm",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiForm",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"component": {
					"name": "component",
					"type": "string",
					"enum": [
						"form",
						"div"
					],
					"default": "div",
					"description": "Which HTML element to render div or form",
					"parent": "EuiFormProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"parent": "EuiFormProps"
				},
				"error": {
					"name": "error",
					"type": "string",
					"parent": "EuiFormProps"
				},
				"invalidCallout": {
					"name": "invalidCallout",
					"type": "string",
					"enum": [
						"none",
						"above"
					],
					"default": "above",
					"description": "Where to display the callout with the list of errors",
					"parent": "EuiFormProps"
				}
			},
			"relativePath": "src/components/form/form.tsx"
		},
		"ElasticEui_EuiFormControlLayout": {
			"id": "ElasticEui_EuiFormControlLayout",
			"name": "EuiFormControlLayout",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFormControlLayout",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"prepend": {
					"name": "prepend",
					"type": "string",
					"description": "Creates an input group with element(s) coming before children. string | ReactElement or an array of these",
					"parent": "EuiFormControlLayoutProps"
				},
				"append": {
					"name": "append",
					"type": "string",
					"description": "Creates an input group with element(s) coming after children. string | ReactElement or an array of these",
					"parent": "EuiFormControlLayoutProps"
				},
				"icon": {
					"name": "icon",
					"type": "string",
					"parent": "EuiFormControlLayoutProps"
				},
				"clear": {
					"name": "clear",
					"type": "unknown",
					"parent": "EuiFormControlLayoutProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"parent": "EuiFormControlLayoutProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"parent": "EuiFormControlLayoutProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"parent": "EuiFormControlLayoutProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"parent": "EuiFormControlLayoutProps"
				},
				"readOnly": {
					"name": "readOnly",
					"type": "boolean",
					"parent": "EuiFormControlLayoutProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"parent": "EuiFormControlLayoutProps"
				},
				"isDropdown": {
					"name": "isDropdown",
					"type": "boolean",
					"description": "Controls the adding of and visibility of a down arrow icon",
					"parent": "EuiFormControlLayoutProps"
				},
				"inputId": {
					"name": "inputId",
					"type": "string",
					"description": "Connects the prepend and append labels to the input",
					"parent": "EuiFormControlLayoutProps"
				},
				"children": {
					"name": "children",
					"type": "array",
					"items": {
						"type": "Node"
					}
				}
			},
			"relativePath": "src/components/form/form_control_layout/form_control_layout.tsx"
		},
		"ElasticEui_EuiFormControlLayoutDelimited": {
			"id": "ElasticEui_EuiFormControlLayoutDelimited",
			"name": "EuiFormControlLayoutDelimited",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFormControlLayoutDelimited",
				"lib": "elasticEui"
			},
			"required": [
				"startControl",
				"endControl"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"prepend": {
					"name": "prepend",
					"type": "string",
					"description": "Creates an input group with element(s) coming before children. string | ReactElement or an array of these",
					"parent": "EuiFormControlLayoutProps"
				},
				"append": {
					"name": "append",
					"type": "string",
					"description": "Creates an input group with element(s) coming after children. string | ReactElement or an array of these",
					"parent": "EuiFormControlLayoutProps"
				},
				"icon": {
					"name": "icon",
					"type": "string",
					"parent": "EuiFormControlLayoutProps"
				},
				"clear": {
					"name": "clear",
					"type": "unknown",
					"parent": "EuiFormControlLayoutProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"parent": "EuiFormControlLayoutProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"parent": "EuiFormControlLayoutProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"parent": "EuiFormControlLayoutProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"parent": "EuiFormControlLayoutProps"
				},
				"readOnly": {
					"name": "readOnly",
					"type": "boolean",
					"parent": "EuiFormControlLayoutProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"parent": "EuiFormControlLayoutProps"
				},
				"isDropdown": {
					"name": "isDropdown",
					"type": "boolean",
					"description": "Controls the adding of and visibility of a down arrow icon",
					"parent": "EuiFormControlLayoutProps"
				},
				"inputId": {
					"name": "inputId",
					"type": "string",
					"description": "Connects the prepend and append labels to the input",
					"parent": "EuiFormControlLayoutProps"
				},
				"startControl": {
					"name": "startControl",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Left side control",
					"parent": "EuiFormControlLayoutDelimitedProps"
				},
				"endControl": {
					"name": "endControl",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Right side control",
					"parent": "EuiFormControlLayoutDelimitedProps"
				},
				"delimiter": {
					"name": "delimiter",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"default": "→",
					"description": "The center content. Accepts a string to be wrapped in a subdued EuiText or a single ReactElement",
					"parent": "EuiFormControlLayoutDelimitedProps"
				}
			},
			"relativePath": "src/components/form/form_control_layout/form_control_layout_delimited.tsx"
		},
		"ElasticEui_EuiFormErrorText": {
			"id": "ElasticEui_EuiFormErrorText",
			"name": "EuiFormErrorText",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFormErrorText",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/form/form_error_text/form_error_text.tsx"
		},
		"ElasticEui_EuiFormFieldset": {
			"id": "ElasticEui_EuiFormFieldset",
			"name": "EuiFormFieldset",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFormFieldset",
				"lib": "elasticEui"
			},
			"props": {
				"legend": {
					"name": "legend",
					"type": "unknown",
					"description": "Adds an EuiFormLegend element as the first child",
					"parent": "EuiFormFieldsetProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/form/form_fieldset/form_fieldset.tsx"
		},
		"ElasticEui_EuiFormLegend": {
			"id": "ElasticEui_EuiFormLegend",
			"name": "EuiFormLegend",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFormLegend",
				"lib": "elasticEui"
			},
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"display": {
					"name": "display",
					"type": "string",
					"enum": [
						"hidden",
						"visible"
					],
					"default": "visible",
					"description": "For a hidden legend that is still visible to the screen reader, set to hidden",
					"parent": "EuiFormLegendProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"parent": "EuiFormLegendProps"
				}
			},
			"relativePath": "src/components/form/form_fieldset/form_legend.tsx"
		},
		"ElasticEui_EuiFormHelpText": {
			"id": "ElasticEui_EuiFormHelpText",
			"name": "EuiFormHelpText",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFormHelpText",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/form/form_help_text/form_help_text.tsx"
		},
		"ElasticEui_EuiFormLabel": {
			"id": "ElasticEui_EuiFormLabel",
			"name": "EuiFormLabel",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFormLabel",
				"lib": "elasticEui"
			},
			"props": {
				"form": {
					"name": "form",
					"type": "string",
					"parent": "LabelHTMLAttributes"
				},
				"htmlFor": {
					"name": "htmlFor",
					"type": "string",
					"parent": "LabelHTMLAttributes"
				},
				"type": {
					"name": "type",
					"type": "string",
					"enum": [
						"legend",
						"label"
					],
					"default": "label",
					"description": "Default type is a label but can be changed to a legend if using inside a fieldset.",
					"parent": "_EuiFormLegendProps"
				},
				"isFocused": {
					"name": "isFocused",
					"type": "boolean",
					"parent": "EuiFormLabelCommonProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"parent": "EuiFormLabelCommonProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"description": "Changes cursor to default.",
					"parent": "EuiFormLabelCommonProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/form/form_label/form_label.tsx"
		},
		"ElasticEui_EuiFormRow": {
			"id": "ElasticEui_EuiFormRow",
			"name": "EuiFormRow",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiFormRow",
				"lib": "elasticEui"
			},
			"props": {
				"labelType": {
					"name": "labelType",
					"type": "string",
					"enum": [
						"legend",
						"label"
					],
					"default": "label",
					"description": "Defaults to rendering a <label> but if passed legend for labelType, will render both a <legend> and the surrounding container as a <fieldset>",
					"parent": "LegendProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"display": {
					"name": "display",
					"type": "string",
					"enum": [
						"row",
						"center",
						"rowCompressed",
						"columnCompressed",
						"centerCompressed",
						"columnCompressedSwitch"
					],
					"default": "row",
					"description": "When rowCompressed, just tightens up the spacing; Set to columnCompressed if compressed and horizontal layout is needed. Set to center or centerCompressed to align non-input content better with inline rows. Set to columnCompressedSwitch if the form control being passed as the child is a switch.",
					"parent": "EuiFormRowCommonProps"
				},
				"hasEmptyLabelSpace": {
					"name": "hasEmptyLabelSpace",
					"type": "boolean",
					"default": false,
					"parent": "EuiFormRowCommonProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"default": false,
					"parent": "EuiFormRowCommonProps"
				},
				"describedByIds": {
					"name": "describedByIds",
					"type": "array",
					"items": {
						"type": "string"
					},
					"default": [],
					"description": "IDs of additional elements that should be part of childrens aria-describedby",
					"parent": "EuiFormRowCommonProps"
				},
				"hasChildLabel": {
					"name": "hasChildLabel",
					"type": "boolean",
					"default": false,
					"description": "Escape hatch to not render duplicate labels if the child also renders a label",
					"parent": "EuiFormRowCommonProps"
				},
				"children": {
					"name": "children",
					"type": "array",
					"description": "ReactElement to render as this components content",
					"items": {
						"type": "Node"
					},
					"parent": "EuiFormRowCommonProps"
				},
				"label": {
					"name": "label",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"parent": "EuiFormRowCommonProps"
				},
				"labelAppend": {
					"name": "labelAppend",
					"type": "unknown",
					"description": "Adds an extra node to the right of the form label without being contained inside the form label. Good for things like documentation links.",
					"parent": "EuiFormRowCommonProps"
				},
				"id": {
					"name": "id",
					"type": "string",
					"parent": "EuiFormRowCommonProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"parent": "EuiFormRowCommonProps"
				},
				"error": {
					"name": "error",
					"type": "string",
					"parent": "EuiFormRowCommonProps"
				},
				"helpText": {
					"name": "helpText",
					"type": "string",
					"description": "Adds a single node/string or an array of nodes/strings below the input",
					"parent": "EuiFormRowCommonProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"description": "Passed along to the label element; and to the child field element when disabled doesnt already exist on the child field element.",
					"parent": "EuiFormRowCommonProps"
				}
			},
			"relativePath": "src/components/form/form_row/form_row.tsx"
		},
		"ElasticEui_EuiRadio": {
			"id": "ElasticEui_EuiRadio",
			"name": "EuiRadio",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiRadio",
				"lib": "elasticEui"
			},
			"required": [
				"onChange"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"label": {
					"name": "label",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"parent": "idWithLabel"
				},
				"id": {
					"name": "id",
					"type": "string",
					"parent": "withId"
				},
				"autoFocus": {
					"name": "autoFocus",
					"type": "boolean",
					"parent": "RadioProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"description": "When true creates a shorter height radio row",
					"parent": "RadioProps"
				},
				"name": {
					"name": "name",
					"type": "string",
					"parent": "RadioProps"
				},
				"value": {
					"name": "value",
					"type": "string",
					"parent": "RadioProps"
				},
				"checked": {
					"name": "checked",
					"type": "boolean",
					"parent": "RadioProps"
				},
				"disabled": {
					"name": "disabled",
					"type": "boolean",
					"parent": "RadioProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"parent": "RadioProps"
				},
				"labelProps": {
					"name": "labelProps",
					"type": "unknown",
					"description": "Object of props passed to the <label/>",
					"parent": "RadioProps"
				}
			},
			"relativePath": "src/components/form/radio/radio.tsx"
		},
		"ElasticEui_EuiRadioGroup": {
			"id": "ElasticEui_EuiRadioGroup",
			"name": "EuiRadioGroup",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiRadioGroup",
				"lib": "elasticEui"
			},
			"required": [
				"onChange"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"disabled": {
					"name": "disabled",
					"type": "boolean",
					"parent": "EuiRadioGroupProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"description": "Tightens up the spacing between radio rows and sends down the compressed prop to the radio itself",
					"parent": "EuiRadioGroupProps"
				},
				"name": {
					"name": "name",
					"type": "string",
					"parent": "EuiRadioGroupProps"
				},
				"options": {
					"name": "options",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"default": [],
					"parent": "EuiRadioGroupProps"
				},
				"idSelected": {
					"name": "idSelected",
					"type": "string",
					"parent": "EuiRadioGroupProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"parent": "EuiRadioGroupProps"
				},
				"legend": {
					"name": "legend",
					"type": "unknown",
					"description": "Adds an EuiFormLegend element as the first child If the individual labels for each radio do not provide a sufficient description, add a legend. Wraps the group in a EuiFormFieldset which adds an EuiLegend for titling the whole group. Accepts an EuiFormLegendProps shape.",
					"parent": "EuiFormFieldsetProps"
				}
			},
			"relativePath": "src/components/form/radio/radio_group.tsx"
		},
		"ElasticEui_EuiDualRange": {
			"id": "ElasticEui_EuiDualRange",
			"name": "EuiDualRange",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiDualRange",
				"lib": "elasticEui"
			},
			"required": [
				"value",
				"onChange"
			],
			"props": {
				"value": {
					"name": "value",
					"type": "unknown",
					"parent": "EuiDualRangeProps"
				},
				"onBlur": {
					"name": "onBlur",
					"type": "Event",
					"parent": "EuiDualRangeProps"
				},
				"onFocus": {
					"name": "onFocus",
					"type": "Event",
					"parent": "EuiDualRangeProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"parent": "EuiDualRangeProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"default": false,
					"parent": "EuiDualRangeProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"parent": "EuiDualRangeProps"
				},
				"levels": {
					"name": "levels",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"default": [],
					"description": "Create colored indicators for certain intervals",
					"parent": "EuiDualRangeProps"
				},
				"showLabels": {
					"name": "showLabels",
					"type": "boolean",
					"default": false,
					"description": "Shows static min/max labels on the sides of the range slider",
					"parent": "EuiDualRangeProps"
				},
				"showInput": {
					"name": "showInput",
					"type": "string",
					"enum": [
						"inputWithPopover"
					],
					"default": false,
					"description": "Pass true to displays an extra input control for direct manipulation. Pass inputWithPopover to only show the input but show the range in a dropdown.",
					"parent": "EuiDualRangeProps"
				},
				"tickInterval": {
					"name": "tickInterval",
					"type": "number",
					"description": "Modifies the number of tick marks and at what interval",
					"parent": "EuiDualRangeProps"
				},
				"ticks": {
					"name": "ticks",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Specified ticks at specified values",
					"parent": "EuiDualRangeProps"
				},
				"prepend": {
					"name": "prepend",
					"type": "string",
					"description": "Creates an input group with element(s) coming before input.  Will only show if showInput = inputWithPopover. string | ReactElement or an array of these",
					"parent": "EuiDualRangeProps"
				},
				"append": {
					"name": "append",
					"type": "string",
					"description": "Creates an input group with element(s) coming after input. Will only show if showInput = inputWithPopover. string | ReactElement or an array of these",
					"parent": "EuiDualRangeProps"
				},
				"minInputProps": {
					"name": "minInputProps",
					"type": "unknown",
					"description": "Intended to be uses with aria attributes. Some attributes may be overwritten.",
					"parent": "EuiDualRangeProps"
				},
				"maxInputProps": {
					"name": "maxInputProps",
					"type": "unknown",
					"description": "Intended to be uses with aria attributes. Some attributes may be overwritten.",
					"parent": "EuiDualRangeProps"
				},
				"isDraggable": {
					"name": "isDraggable",
					"type": "boolean",
					"description": "Creates a draggble highlighted range area",
					"parent": "EuiDualRangeProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"default": false,
					"description": "Will only show if showInput = inputWithPopover",
					"parent": "EuiDualRangeProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"default": false,
					"parent": "EuiRangeSliderProps"
				},
				"hasFocus": {
					"name": "hasFocus",
					"type": "boolean",
					"parent": "EuiRangeSliderProps"
				},
				"showRange": {
					"name": "showRange",
					"type": "boolean",
					"default": false,
					"parent": "EuiRangeSliderProps"
				},
				"showTicks": {
					"name": "showTicks",
					"type": "boolean",
					"default": false,
					"parent": "EuiRangeSliderProps"
				}
			},
			"relativePath": "src/components/form/range/dual_range.tsx"
		},
		"ElasticEui_EuiRange": {
			"id": "ElasticEui_EuiRange",
			"name": "EuiRange",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiRange",
				"lib": "elasticEui"
			},
			"required": [
				"value"
			],
			"props": {
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"default": false,
					"description": "when true creates a shorter height input",
					"parent": "EuiRangeProps"
				},
				"readOnly": {
					"name": "readOnly",
					"type": "boolean",
					"parent": "EuiRangeProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"default": false,
					"parent": "EuiRangeProps"
				},
				"id": {
					"name": "id",
					"type": "string",
					"parent": "EuiRangeProps"
				},
				"levels": {
					"name": "levels",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"default": [],
					"description": "Create colored indicators for certain intervals",
					"parent": "EuiRangeProps"
				},
				"step": {
					"name": "step",
					"type": "number",
					"default": 1,
					"description": "Specifies the granularity that the value must adhere to. Accepts a number or the string any for no stepping to allow for any value. Defaults to 1",
					"parent": "EuiRangeProps"
				},
				"showInput": {
					"name": "showInput",
					"type": "string",
					"enum": [
						"inputWithPopover"
					],
					"default": false,
					"description": "Pass true to displays an extra input control for direct manipulation. Pass inputWithPopover to only show the input but show the range in a dropdown.",
					"parent": "EuiRangeProps"
				},
				"showLabels": {
					"name": "showLabels",
					"type": "boolean",
					"default": false,
					"description": "Shows static min/max labels on the sides of the range slider",
					"parent": "EuiRangeProps"
				},
				"showRange": {
					"name": "showRange",
					"type": "boolean",
					"default": false,
					"description": "Shows a thick line from min to value",
					"parent": "EuiRangeProps"
				},
				"showTicks": {
					"name": "showTicks",
					"type": "boolean",
					"default": false,
					"description": "Shows clickable tick marks and labels at the given interval (step/tickInterval)",
					"parent": "EuiRangeProps"
				},
				"showValue": {
					"name": "showValue",
					"type": "boolean",
					"default": false,
					"description": "Shows a tooltip styled value",
					"parent": "EuiRangeProps"
				},
				"ticks": {
					"name": "ticks",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Specified ticks at specified values",
					"parent": "EuiRangeProps"
				},
				"tickInterval": {
					"name": "tickInterval",
					"type": "number",
					"description": "Modifies the number of tick marks and at what interval",
					"parent": "EuiRangeProps"
				},
				"valueAppend": {
					"name": "valueAppend",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Appends to the tooltip",
					"parent": "EuiRangeProps"
				},
				"valuePrepend": {
					"name": "valuePrepend",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Prepends to the tooltip",
					"parent": "EuiRangeProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"default": false,
					"description": "Will only show if showInput = inputWithPopover",
					"parent": "EuiRangeProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"parent": "EuiRangeProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"value": {
					"name": "value",
					"type": "string",
					"parent": "EuiRangeInputProps"
				},
				"max": {
					"name": "max",
					"type": "number",
					"default": 100,
					"parent": "EuiRangeInputProps"
				},
				"min": {
					"name": "min",
					"type": "number",
					"default": 0,
					"parent": "EuiRangeInputProps"
				},
				"icon": {
					"name": "icon",
					"type": "string",
					"parent": "EuiFieldNumberProps"
				},
				"inputRef": {
					"name": "inputRef",
					"type": "Event",
					"parent": "EuiFieldNumberProps"
				},
				"side": {
					"name": "side",
					"type": "string",
					"enum": [
						"max",
						"min"
					],
					"parent": "EuiRangeInputProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"parent": "EuiFieldNumberProps"
				},
				"prepend": {
					"name": "prepend",
					"type": "string",
					"description": "Creates an input group with element(s) coming before input. string | ReactElement or an array of these",
					"parent": "EuiFieldNumberProps"
				},
				"append": {
					"name": "append",
					"type": "string",
					"description": "Creates an input group with element(s) coming after input. string | ReactElement or an array of these",
					"parent": "EuiFieldNumberProps"
				},
				"controlOnly": {
					"name": "controlOnly",
					"type": "boolean",
					"description": "Completely removes form control layout wrapper and ignores icon, prepend, and append. Best used inside EuiFormControlLayoutDelimited.",
					"parent": "EuiFieldNumberProps"
				},
				"autoSize": {
					"name": "autoSize",
					"type": "boolean",
					"parent": "EuiRangeInputProps"
				}
			},
			"relativePath": "src/components/form/range/range.tsx"
		},
		"ElasticEui_EuiSelect": {
			"id": "ElasticEui_EuiSelect",
			"name": "EuiSelect",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiSelect",
				"lib": "elasticEui"
			},
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"options": {
					"name": "options",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"default": [],
					"parent": "EuiSelectProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"parent": "EuiSelectProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"default": false,
					"parent": "EuiSelectProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"default": false,
					"parent": "EuiSelectProps"
				},
				"hasNoInitialSelection": {
					"name": "hasNoInitialSelection",
					"type": "boolean",
					"default": false,
					"description": "Simulates no selection by creating an empty, selected, hidden first option",
					"parent": "EuiSelectProps"
				},
				"inputRef": {
					"name": "inputRef",
					"type": "Event",
					"parent": "EuiSelectProps"
				},
				"value": {
					"name": "value",
					"type": "string",
					"parent": "EuiSelectProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"default": false,
					"description": "when true creates a shorter height input",
					"parent": "EuiSelectProps"
				},
				"prepend": {
					"name": "prepend",
					"type": "string",
					"description": "Creates an input group with element(s) coming before select. string | ReactElement or an array of these",
					"parent": "EuiSelectProps"
				},
				"append": {
					"name": "append",
					"type": "string",
					"description": "Creates an input group with element(s) coming after select. string | ReactElement or an array of these",
					"parent": "EuiSelectProps"
				}
			},
			"relativePath": "src/components/form/select/select.tsx"
		},
		"ElasticEui_EuiSuperSelect": {
			"id": "ElasticEui_EuiSuperSelect",
			"name": "EuiSuperSelect",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiSuperSelect",
				"lib": "elasticEui"
			},
			"required": [
				"options"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"default": false,
					"parent": "EuiSuperSelectControlProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"default": false,
					"parent": "EuiSuperSelectControlProps"
				},
				"name": {
					"name": "name",
					"type": "string",
					"parent": "EuiSuperSelectControlProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"default": false,
					"parent": "EuiSuperSelectControlProps"
				},
				"readOnly": {
					"name": "readOnly",
					"type": "boolean",
					"parent": "EuiSuperSelectControlProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"default": false,
					"parent": "EuiSuperSelectControlProps"
				},
				"prepend": {
					"name": "prepend",
					"type": "string",
					"description": "Creates an input group with element(s) coming before input. string | ReactElement or an array of these",
					"parent": "EuiSuperSelectControlProps"
				},
				"append": {
					"name": "append",
					"type": "string",
					"description": "Creates an input group with element(s) coming after input. string | ReactElement or an array of these",
					"parent": "EuiSuperSelectControlProps"
				},
				"screenReaderId": {
					"name": "screenReaderId",
					"type": "string",
					"description": "Creates a semantic label ID for the div[role=listbox] thats opened on click or keypress. __Generated and passed down by EuiSuperSelect.__",
					"parent": "EuiSuperSelectControlProps"
				},
				"options": {
					"name": "options",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Pass an array of options that must at least include: value: storing unique value of item, inputDisplay: what shows inside the form input when selected dropdownDisplay (optional): what shows for the item in the dropdown",
					"parent": "EuiSuperSelectProps"
				},
				"valueOfSelected": {
					"name": "valueOfSelected",
					"type": "string",
					"parent": "EuiSuperSelectProps"
				},
				"itemClassName": {
					"name": "itemClassName",
					"type": "string",
					"description": "Classes for the context menu item",
					"parent": "EuiSuperSelectProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"description": "You must pass an onChange function to handle the update of the value",
					"parent": "EuiSuperSelectProps"
				},
				"onFocus": {
					"name": "onFocus",
					"type": "Event",
					"parent": "EuiSuperSelectProps"
				},
				"onBlur": {
					"name": "onBlur",
					"type": "Event",
					"parent": "EuiSuperSelectProps"
				},
				"hasDividers": {
					"name": "hasDividers",
					"type": "boolean",
					"default": false,
					"description": "Change to true if you want horizontal lines between options. This is best used when options are multi-line.",
					"parent": "EuiSuperSelectProps"
				},
				"itemLayoutAlign": {
					"name": "itemLayoutAlign",
					"type": "string",
					"enum": [
						"top",
						"bottom",
						"center"
					],
					"description": "Change EuiContextMenuItem layout position of icon",
					"parent": "EuiSuperSelectProps"
				},
				"isOpen": {
					"name": "isOpen",
					"type": "boolean",
					"description": "Controls whether the options are shown. Default: false",
					"parent": "EuiSuperSelectProps"
				},
				"popoverProps": {
					"name": "popoverProps",
					"type": "unknown",
					"description": "Optional props to pass to the underlying [EuiPopover](/#/layout/popover). Allows fine-grained control of the popover dropdown menu, including repositionOnScroll for EuiSuperSelects used within scrollable containers, and customizing popover panel styling.  Does not accept a nested popoverProps.isOpen property - use the top level isOpen API instead.",
					"parent": "EuiSuperSelectProps"
				}
			},
			"relativePath": "src/components/form/super_select/super_select.tsx"
		},
		"ElasticEui_EuiSuperSelectControl": {
			"id": "ElasticEui_EuiSuperSelectControl",
			"name": "EuiSuperSelectControl",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiSuperSelectControl",
				"lib": "elasticEui"
			},
			"props": {
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"default": false,
					"parent": "EuiSuperSelectControlProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"default": false,
					"parent": "EuiSuperSelectControlProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"default": false,
					"parent": "EuiSuperSelectControlProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"default": false,
					"parent": "EuiSuperSelectControlProps"
				},
				"readOnly": {
					"name": "readOnly",
					"type": "boolean",
					"parent": "EuiSuperSelectControlProps"
				},
				"name": {
					"name": "name",
					"type": "string",
					"parent": "EuiSuperSelectControlProps"
				},
				"value": {
					"name": "value",
					"type": "string",
					"parent": "EuiSuperSelectControlProps"
				},
				"options": {
					"name": "options",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"default": [],
					"parent": "EuiSuperSelectControlProps"
				},
				"prepend": {
					"name": "prepend",
					"type": "string",
					"description": "Creates an input group with element(s) coming before input. string | ReactElement or an array of these",
					"parent": "EuiSuperSelectControlProps"
				},
				"append": {
					"name": "append",
					"type": "string",
					"description": "Creates an input group with element(s) coming after input. string | ReactElement or an array of these",
					"parent": "EuiSuperSelectControlProps"
				},
				"screenReaderId": {
					"name": "screenReaderId",
					"type": "string",
					"description": "Creates a semantic label ID for the div[role=listbox] thats opened on click or keypress. __Generated and passed down by EuiSuperSelect.__",
					"parent": "EuiSuperSelectControlProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/form/super_select/super_select_control.tsx"
		},
		"ElasticEui_EuiSwitch": {
			"id": "ElasticEui_EuiSwitch",
			"name": "EuiSwitch",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiSwitch",
				"lib": "elasticEui"
			},
			"required": [
				"label",
				"checked",
				"onChange"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"showLabel": {
					"name": "showLabel",
					"type": "boolean",
					"default": false,
					"description": "Whether to render the render the text label",
					"parent": "EuiSwitchProps"
				},
				"label": {
					"name": "label",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Must be a string if showLabel prop is false",
					"parent": "EuiSwitchProps"
				},
				"checked": {
					"name": "checked",
					"type": "boolean",
					"parent": "EuiSwitchProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"parent": "EuiSwitchProps"
				},
				"disabled": {
					"name": "disabled",
					"type": "boolean",
					"parent": "EuiSwitchProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"parent": "EuiSwitchProps"
				},
				"type": {
					"name": "type",
					"type": "string",
					"enum": [
						"button",
						"submit",
						"reset"
					],
					"default": "button",
					"parent": "EuiSwitchProps"
				},
				"labelProps": {
					"name": "labelProps",
					"type": "unknown",
					"description": "Object of props passed to the labels <span/>",
					"parent": "EuiSwitchProps"
				}
			},
			"relativePath": "src/components/form/switch/switch.tsx"
		},
		"ElasticEui_EuiTextArea": {
			"id": "ElasticEui_EuiTextArea",
			"name": "EuiTextArea",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTextArea",
				"lib": "elasticEui"
			},
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"parent": "EuiTextAreaProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"default": false,
					"parent": "EuiTextAreaProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"parent": "EuiTextAreaProps"
				},
				"resize": {
					"name": "resize",
					"type": "string",
					"enum": [
						"none",
						"both",
						"horizontal",
						"vertical"
					],
					"default": "vertical",
					"description": "Which direction, if at all, should the textarea resize",
					"parent": "EuiTextAreaProps"
				},
				"inputRef": {
					"name": "inputRef",
					"type": "Event",
					"parent": "EuiTextAreaProps"
				}
			},
			"relativePath": "src/components/form/text_area/text_area.tsx"
		},
		"ElasticEui_EuiValidatableControl": {
			"id": "ElasticEui_EuiValidatableControl",
			"name": "EuiValidatableControl",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiValidatableControl",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"parent": "EuiValidatableControlProps"
				},
				"children": {
					"name": "children",
					"type": "array",
					"description": "ReactNode to render as this components content",
					"items": {
						"type": "Node"
					},
					"parent": "EuiValidatableControlProps"
				}
			},
			"relativePath": "src/components/form/validatable_control/validatable_control.tsx"
		},
		"ElasticEui_EuiHeader": {
			"id": "ElasticEui_EuiHeader",
			"name": "EuiHeader",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiHeader",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"sections": {
					"name": "sections",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "An array of objects to wrap in a #EuiHeaderSection. Each section is spaced using space-between. See #EuiHeaderSectionsProp for object details. This prop disregards the prop children if both are passed.",
					"parent": "EuiHeaderProps"
				},
				"position": {
					"name": "position",
					"type": "string",
					"enum": [
						"static",
						"fixed"
					],
					"default": "static",
					"description": "Helper that positions the header against the window body and adds the correct amount of top padding to the window when in fixed mode",
					"parent": "EuiHeaderProps"
				},
				"theme": {
					"name": "theme",
					"type": "string",
					"enum": [
						"default",
						"dark"
					],
					"default": "default",
					"description": "The default will inherit its coloring from the light or dark theme. Or, force the header into pseudo dark theme for all themes.",
					"parent": "EuiHeaderProps"
				}
			},
			"relativePath": "src/components/header/header.tsx"
		},
		"ElasticEui_EuiHeaderAlert": {
			"id": "ElasticEui_EuiHeaderAlert",
			"name": "EuiHeaderAlert",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiHeaderAlert",
				"lib": "elasticEui"
			},
			"required": [
				"date",
				"title"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"action": {
					"name": "action",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Adds a link to the alert.",
					"parent": "EuiHeaderAlertProps"
				},
				"date": {
					"name": "date",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"parent": "EuiHeaderAlertProps"
				},
				"text": {
					"name": "text",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"parent": "EuiHeaderAlertProps"
				},
				"title": {
					"name": "title",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"parent": "EuiHeaderAlertProps"
				},
				"badge": {
					"name": "badge",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Accepts an EuiBadge that displays on the alert",
					"parent": "EuiHeaderAlertProps"
				}
			},
			"relativePath": "src/components/header/header_alert/header_alert.tsx"
		},
		"ElasticEui_EuiHeaderBreadcrumbs": {
			"id": "ElasticEui_EuiHeaderBreadcrumbs",
			"name": "EuiHeaderBreadcrumbs",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiHeaderBreadcrumbs",
				"lib": "elasticEui"
			},
			"required": [
				"breadcrumbs"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"responsive": {
					"name": "responsive",
					"type": "boolean",
					"description": "Hides extra (above the max) breadcrumbs under a collapsed item as the window gets smaller. Pass a custom #EuiBreadcrumbResponsiveMaxCount object to change the number of breadcrumbs to show at the particular breakpoints.  Pass false to turn this behavior off.  Default: { xs: 1, s: 2, m: 4 }",
					"parent": "EuiBreadcrumbsProps"
				},
				"truncate": {
					"name": "truncate",
					"type": "boolean",
					"description": "Forces all breadcrumbs to single line and truncates each breadcrumb to a particular width, except for the last item",
					"parent": "EuiBreadcrumbsProps"
				},
				"max": {
					"name": "max",
					"type": "number",
					"description": "Collapses the inner items past the maximum set here into a single ellipses item. Omitting or passing a 0 value will show all breadcrumbs.",
					"parent": "EuiBreadcrumbsProps"
				},
				"breadcrumbs": {
					"name": "breadcrumbs",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "The array of individual #EuiBreadcrumb items",
					"parent": "EuiBreadcrumbsProps"
				}
			},
			"relativePath": "src/components/header/header_breadcrumbs/header_breadcrumbs.tsx"
		},
		"ElasticEui_EuiHeaderLink": {
			"id": "ElasticEui_EuiHeaderLink",
			"name": "EuiHeaderLink",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiHeaderLink",
				"lib": "elasticEui"
			},
			"props": {
				"download": {
					"name": "download",
					"type": "unknown",
					"parent": "AnchorHTMLAttributes"
				},
				"hrefLang": {
					"name": "hrefLang",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"media": {
					"name": "media",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"ping": {
					"name": "ping",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"referrerPolicy": {
					"name": "referrerPolicy",
					"type": "string",
					"enum": [
						"",
						"no-referrer",
						"no-referrer-when-downgrade",
						"origin",
						"origin-when-cross-origin",
						"same-origin",
						"strict-origin",
						"strict-origin-when-cross-origin",
						"unsafe-url"
					],
					"parent": "AnchorHTMLAttributes"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"primary",
						"success",
						"warning",
						"danger",
						"ghost",
						"text"
					],
					"description": "Any of our named colors",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs"
					],
					"parent": "CommonEuiButtonEmptyProps"
				},
				"flush": {
					"name": "flush",
					"type": "string",
					"enum": [
						"left",
						"right",
						"both"
					],
					"description": "Ensure the text of the button sits flush to the left, right, or both sides of its container",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"description": "disabled is also allowed",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"description": "Force disables the button and changes the icon to a loading spinner",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"isSelected": {
					"name": "isSelected",
					"type": "boolean",
					"description": "Applies the boolean state as the aria-pressed property to create a toggle button. Only use when the readable text does not change between states.*",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"href": {
					"name": "href",
					"type": "string",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"target": {
					"name": "target",
					"type": "string",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"rel": {
					"name": "rel",
					"type": "string",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"type": {
					"name": "type",
					"type": "string",
					"enum": [
						"button",
						"submit"
					],
					"parent": "CommonEuiButtonEmptyProps"
				},
				"buttonRef": {
					"name": "buttonRef",
					"type": "Event",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"contentProps": {
					"name": "contentProps",
					"type": "unknown",
					"description": "Object of props passed to the <span/> wrapping the buttons content",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"iconType": {
					"name": "iconType",
					"type": "string",
					"description": "Any type accepted by EuiIcon",
					"parent": "EuiButtonContentProps"
				},
				"iconSide": {
					"name": "iconSide",
					"type": "string",
					"enum": [
						"left",
						"right"
					],
					"description": "Can only be one side left or right",
					"parent": "EuiButtonContentProps"
				},
				"textProps": {
					"name": "textProps",
					"type": "unknown",
					"description": "Object of props passed to the <span/> wrapping the contents text/children only (not icon)",
					"parent": "EuiButtonContentProps"
				},
				"iconSize": {
					"name": "iconSize",
					"type": "string",
					"enum": [
						"s",
						"m"
					],
					"parent": "EuiButtonContentProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"parent": "PropsForButton"
				},
				"isActive": {
					"name": "isActive",
					"type": "boolean",
					"description": "Simple prop to update color based on active state. Can be overridden with color",
					"parent": "EuiHeaderLinkProps"
				}
			},
			"relativePath": "src/components/header/header_links/header_link.tsx"
		},
		"ElasticEui_EuiHeaderLinks": {
			"id": "ElasticEui_EuiHeaderLinks",
			"name": "EuiHeaderLinks",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiHeaderLinks",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"gutterSize": {
					"name": "gutterSize",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs",
						"l"
					],
					"default": "s",
					"description": "Spacing between direct children",
					"parent": "EuiHeaderLinksProps"
				},
				"popoverBreakpoints": {
					"name": "popoverBreakpoints",
					"type": "string",
					"enum": [
						"none",
						"all"
					],
					"default": "[xs, s]",
					"description": "A list of named breakpoints at which to show the popover version",
					"parent": "EuiHeaderLinksProps"
				},
				"popoverButtonProps": {
					"name": "popoverButtonProps",
					"type": "unknown",
					"description": "Extend the functionality of the EuiPopover.button which is a EuiHeaderSectionItemButton. With the addition of iconType to change the display icon which defaults to apps",
					"parent": "EuiHeaderLinksProps"
				},
				"popoverProps": {
					"name": "popoverProps",
					"type": "unknown",
					"description": "Extend the functionality of the EuiPopover",
					"parent": "EuiHeaderLinksProps"
				}
			},
			"relativePath": "src/components/header/header_links/header_links.tsx"
		},
		"ElasticEui_EuiHeaderLogo": {
			"id": "ElasticEui_EuiHeaderLogo",
			"name": "EuiHeaderLogo",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiHeaderLogo",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"download": {
					"name": "download",
					"type": "unknown",
					"parent": "AnchorHTMLAttributes"
				},
				"href": {
					"name": "href",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"hrefLang": {
					"name": "hrefLang",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"media": {
					"name": "media",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"ping": {
					"name": "ping",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"rel": {
					"name": "rel",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"target": {
					"name": "target",
					"type": "string",
					"enum": [
						"_self",
						"_blank",
						"_parent",
						"_top"
					],
					"parent": "AnchorHTMLAttributes"
				},
				"type": {
					"name": "type",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"referrerPolicy": {
					"name": "referrerPolicy",
					"type": "string",
					"enum": [
						"",
						"no-referrer",
						"no-referrer-when-downgrade",
						"origin",
						"origin-when-cross-origin",
						"same-origin",
						"strict-origin",
						"strict-origin-when-cross-origin",
						"unsafe-url"
					],
					"parent": "AnchorHTMLAttributes"
				},
				"iconType": {
					"name": "iconType",
					"type": "string",
					"default": "logoElastic",
					"parent": "EuiHeaderLogoProps"
				},
				"iconTitle": {
					"name": "iconTitle",
					"type": "string",
					"default": "Elastic",
					"parent": "EuiHeaderLogoProps"
				}
			},
			"relativePath": "src/components/header/header_logo.tsx"
		},
		"ElasticEui_EuiHeaderSection": {
			"id": "ElasticEui_EuiHeaderSection",
			"name": "EuiHeaderSection",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiHeaderSection",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"side": {
					"name": "side",
					"type": "string",
					"enum": [
						"left",
						"right"
					],
					"default": "left",
					"parent": "EuiHeaderSectionProps"
				},
				"grow": {
					"name": "grow",
					"type": "boolean",
					"default": false,
					"parent": "EuiHeaderSectionProps"
				}
			},
			"relativePath": "src/components/header/header_section/header_section.tsx"
		},
		"ElasticEui_EuiHeaderSectionItem": {
			"id": "ElasticEui_EuiHeaderSectionItem",
			"name": "EuiHeaderSectionItem",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiHeaderSectionItem",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"border": {
					"name": "border",
					"type": "string",
					"enum": [
						"none",
						"left",
						"right"
					],
					"default": "left",
					"description": "Side to display a short border on. Not supported in Amsterdam theme.",
					"parent": "EuiHeaderSectionItemProps"
				},
				"children": {
					"name": "children",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "ReactNode to render as this components content",
					"parent": "EuiHeaderSectionItemProps"
				}
			},
			"relativePath": "src/components/header/header_section/header_section_item.tsx"
		},
		"ElasticEui_EuiHeaderSectionItemButton": {
			"id": "ElasticEui_EuiHeaderSectionItemButton",
			"name": "EuiHeaderSectionItemButton",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiHeaderSectionItemButton",
				"lib": "elasticEui"
			},
			"props": {
				"download": {
					"name": "download",
					"type": "unknown",
					"parent": "AnchorHTMLAttributes"
				},
				"hrefLang": {
					"name": "hrefLang",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"media": {
					"name": "media",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"ping": {
					"name": "ping",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"referrerPolicy": {
					"name": "referrerPolicy",
					"type": "string",
					"enum": [
						"",
						"no-referrer",
						"no-referrer-when-downgrade",
						"origin",
						"origin-when-cross-origin",
						"same-origin",
						"strict-origin",
						"strict-origin-when-cross-origin",
						"unsafe-url"
					],
					"parent": "AnchorHTMLAttributes"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"primary",
						"success",
						"warning",
						"danger",
						"ghost",
						"text"
					],
					"description": "Any of our named colors",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs"
					],
					"parent": "CommonEuiButtonEmptyProps"
				},
				"flush": {
					"name": "flush",
					"type": "string",
					"enum": [
						"left",
						"right",
						"both"
					],
					"description": "Ensure the text of the button sits flush to the left, right, or both sides of its container",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"description": "disabled is also allowed",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"description": "Force disables the button and changes the icon to a loading spinner",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"isSelected": {
					"name": "isSelected",
					"type": "boolean",
					"description": "Applies the boolean state as the aria-pressed property to create a toggle button. Only use when the readable text does not change between states.*",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"href": {
					"name": "href",
					"type": "string",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"target": {
					"name": "target",
					"type": "string",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"rel": {
					"name": "rel",
					"type": "string",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"type": {
					"name": "type",
					"type": "string",
					"enum": [
						"button",
						"submit"
					],
					"parent": "CommonEuiButtonEmptyProps"
				},
				"buttonRef": {
					"name": "buttonRef",
					"type": "Event",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"contentProps": {
					"name": "contentProps",
					"type": "unknown",
					"description": "Object of props passed to the <span/> wrapping the buttons content",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"iconType": {
					"name": "iconType",
					"type": "string",
					"description": "Any type accepted by EuiIcon",
					"parent": "EuiButtonContentProps"
				},
				"iconSide": {
					"name": "iconSide",
					"type": "string",
					"enum": [
						"left",
						"right"
					],
					"description": "Can only be one side left or right",
					"parent": "EuiButtonContentProps"
				},
				"textProps": {
					"name": "textProps",
					"type": "unknown",
					"description": "Object of props passed to the <span/> wrapping the contents text/children only (not icon)",
					"parent": "EuiButtonContentProps"
				},
				"iconSize": {
					"name": "iconSize",
					"type": "string",
					"enum": [
						"s",
						"m"
					],
					"parent": "EuiButtonContentProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"parent": "PropsForButton"
				},
				"notification": {
					"name": "notification",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Inserts the node into a EuiBadgeNotification and places it appropriately against the button. Or pass true to render a simple dot",
					"parent": "EuiHeaderSectionItemButtonProps"
				},
				"notificationColor": {
					"name": "notificationColor",
					"type": "string",
					"enum": [
						"accent",
						"subdued"
					],
					"default": "accent",
					"description": "Changes the color of the notification background",
					"parent": "EuiHeaderSectionItemButtonProps"
				},
				"ref": {
					"name": "ref",
					"type": "Event",
					"parent": "RefAttributes"
				}
			},
			"relativePath": "src/components/header/header_section/header_section_item_button.tsx"
		},
		"ElasticEui_EuiHealth": {
			"id": "ElasticEui_EuiHealth",
			"name": "EuiHealth",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiHealth",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"description": "Sets the color of the dot icon. It accepts any IconColor: default, primary, success, accent, warning, danger, text, subdued or ghost; or any valid CSS color value as a string",
					"parent": "EuiHealthProps"
				},
				"textSize": {
					"name": "textSize",
					"type": "string",
					"enum": [
						"inherit",
						"s",
						"m",
						"xs"
					],
					"default": "s",
					"description": "Matches the text scales of EuiText. The inherit style will get its font size from the parent element",
					"parent": "EuiHealthProps"
				}
			},
			"relativePath": "src/components/health/health.tsx"
		},
		"ElasticEui_EuiHighlight": {
			"id": "ElasticEui_EuiHighlight",
			"name": "EuiHighlight",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiHighlight",
				"lib": "elasticEui"
			},
			"required": [
				"search"
			],
			"props": {
				"hasScreenReaderHelpText": {
					"name": "hasScreenReaderHelpText",
					"type": "boolean",
					"default": false,
					"description": "Set to false to remove the CSS :before and :after screen reader helper text",
					"parent": "EuiMarkProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"search": {
					"name": "search",
					"type": "string",
					"description": "What to search for",
					"parent": "EuiHighlightProps"
				},
				"strict": {
					"name": "strict",
					"type": "boolean",
					"default": false,
					"description": "Should the search be strict or not",
					"parent": "EuiHighlightProps"
				},
				"highlightAll": {
					"name": "highlightAll",
					"type": "boolean",
					"default": false,
					"description": "Should highlight all matches",
					"parent": "EuiHighlightProps"
				}
			},
			"relativePath": "src/components/highlight/highlight.tsx"
		},
		"ElasticEui_EuiHorizontalRule": {
			"id": "ElasticEui_EuiHorizontalRule",
			"name": "EuiHorizontalRule",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiHorizontalRule",
				"lib": "elasticEui"
			},
			"props": {
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"full",
						"half",
						"quarter"
					],
					"default": "full",
					"description": "Defines the width of the HR.",
					"parent": "EuiHorizontalRuleProps"
				},
				"margin": {
					"name": "margin",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"xs",
						"l",
						"xl",
						"xxl"
					],
					"default": "l",
					"parent": "EuiHorizontalRuleProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/horizontal_rule/horizontal_rule.tsx"
		},
		"ElasticEui_EuiIcon": {
			"id": "ElasticEui_EuiIcon",
			"name": "EuiIcon",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiIcon",
				"lib": "elasticEui"
			},
			"required": [
				"type"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"string": {
					"name": "string",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"role": {
					"name": "role",
					"type": "string",
					"enum": [
						"alert",
						"alertdialog",
						"application",
						"article",
						"banner",
						"button",
						"cell",
						"checkbox",
						"columnheader",
						"combobox",
						"complementary",
						"contentinfo",
						"definition",
						"dialog",
						"directory",
						"document",
						"feed",
						"figure",
						"form",
						"grid",
						"gridcell",
						"group",
						"heading",
						"img",
						"link",
						"list",
						"listbox",
						"listitem",
						"log",
						"main",
						"marquee",
						"math",
						"menu",
						"menubar",
						"menuitem",
						"menuitemcheckbox",
						"menuitemradio",
						"navigation",
						"none",
						"note",
						"option",
						"presentation",
						"progressbar",
						"radio",
						"radiogroup",
						"region",
						"row",
						"rowgroup",
						"rowheader",
						"scrollbar",
						"search",
						"searchbox",
						"separator",
						"slider",
						"spinbutton",
						"status",
						"switch",
						"tab",
						"table",
						"tablist",
						"tabpanel",
						"term",
						"textbox",
						"timer",
						"toolbar",
						"tooltip",
						"tree",
						"treegrid",
						"treeitem"
					],
					"parent": "SVGAttributes"
				},
				"tabIndex": {
					"name": "tabIndex",
					"type": "number",
					"parent": "SVGAttributes"
				},
				"fill": {
					"name": "fill",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"style": {
					"name": "style",
					"type": "object",
					"parent": "SVGAttributes"
				},
				"href": {
					"name": "href",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"media": {
					"name": "media",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"target": {
					"name": "target",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"id": {
					"name": "id",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"lang": {
					"name": "lang",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"name": {
					"name": "name",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"origin": {
					"name": "origin",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"filter": {
					"name": "filter",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"scale": {
					"name": "scale",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"display": {
					"name": "display",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"height": {
					"name": "height",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"width": {
					"name": "width",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"max": {
					"name": "max",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"method": {
					"name": "method",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"min": {
					"name": "min",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"crossOrigin": {
					"name": "crossOrigin",
					"type": "string",
					"enum": [
						"",
						"anonymous",
						"use-credentials"
					],
					"parent": "SVGAttributes"
				},
				"accentHeight": {
					"name": "accentHeight",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"accumulate": {
					"name": "accumulate",
					"type": "string",
					"enum": [
						"none",
						"sum"
					],
					"parent": "SVGAttributes"
				},
				"additive": {
					"name": "additive",
					"type": "string",
					"enum": [
						"replace",
						"sum"
					],
					"parent": "SVGAttributes"
				},
				"alignmentBaseline": {
					"name": "alignmentBaseline",
					"type": "string",
					"enum": [
						"inherit",
						"auto",
						"alphabetic",
						"hanging",
						"ideographic",
						"mathematical",
						"baseline",
						"before-edge",
						"text-before-edge",
						"middle",
						"central",
						"after-edge",
						"text-after-edge"
					],
					"parent": "SVGAttributes"
				},
				"allowReorder": {
					"name": "allowReorder",
					"type": "string",
					"enum": [
						"yes",
						"no"
					],
					"parent": "SVGAttributes"
				},
				"alphabetic": {
					"name": "alphabetic",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"amplitude": {
					"name": "amplitude",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"arabicForm": {
					"name": "arabicForm",
					"type": "string",
					"enum": [
						"initial",
						"medial",
						"terminal",
						"isolated"
					],
					"parent": "SVGAttributes"
				},
				"ascent": {
					"name": "ascent",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"attributeName": {
					"name": "attributeName",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"attributeType": {
					"name": "attributeType",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"autoReverse": {
					"name": "autoReverse",
					"type": "string",
					"enum": [
						"true",
						"false"
					],
					"parent": "SVGAttributes"
				},
				"azimuth": {
					"name": "azimuth",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"baseFrequency": {
					"name": "baseFrequency",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"baselineShift": {
					"name": "baselineShift",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"baseProfile": {
					"name": "baseProfile",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"bbox": {
					"name": "bbox",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"begin": {
					"name": "begin",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"bias": {
					"name": "bias",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"by": {
					"name": "by",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"calcMode": {
					"name": "calcMode",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"capHeight": {
					"name": "capHeight",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"clip": {
					"name": "clip",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"clipPath": {
					"name": "clipPath",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"clipPathUnits": {
					"name": "clipPathUnits",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"clipRule": {
					"name": "clipRule",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"colorInterpolation": {
					"name": "colorInterpolation",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"colorInterpolationFilters": {
					"name": "colorInterpolationFilters",
					"type": "string",
					"enum": [
						"inherit",
						"auto",
						"sRGB",
						"linearRGB"
					],
					"parent": "SVGAttributes"
				},
				"colorProfile": {
					"name": "colorProfile",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"colorRendering": {
					"name": "colorRendering",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"contentScriptType": {
					"name": "contentScriptType",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"contentStyleType": {
					"name": "contentStyleType",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"cursor": {
					"name": "cursor",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"cx": {
					"name": "cx",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"cy": {
					"name": "cy",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"d": {
					"name": "d",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"decelerate": {
					"name": "decelerate",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"descent": {
					"name": "descent",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"diffuseConstant": {
					"name": "diffuseConstant",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"direction": {
					"name": "direction",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"divisor": {
					"name": "divisor",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"dominantBaseline": {
					"name": "dominantBaseline",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"dur": {
					"name": "dur",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"dx": {
					"name": "dx",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"dy": {
					"name": "dy",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"edgeMode": {
					"name": "edgeMode",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"elevation": {
					"name": "elevation",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"enableBackground": {
					"name": "enableBackground",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"end": {
					"name": "end",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"exponent": {
					"name": "exponent",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"externalResourcesRequired": {
					"name": "externalResourcesRequired",
					"type": "string",
					"enum": [
						"true",
						"false"
					],
					"parent": "SVGAttributes"
				},
				"fillOpacity": {
					"name": "fillOpacity",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"fillRule": {
					"name": "fillRule",
					"type": "string",
					"enum": [
						"inherit",
						"nonzero",
						"evenodd"
					],
					"parent": "SVGAttributes"
				},
				"filterRes": {
					"name": "filterRes",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"filterUnits": {
					"name": "filterUnits",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"floodColor": {
					"name": "floodColor",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"floodOpacity": {
					"name": "floodOpacity",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"focusable": {
					"name": "focusable",
					"type": "string",
					"enum": [
						"true",
						"false",
						"auto"
					],
					"parent": "SVGAttributes"
				},
				"fontFamily": {
					"name": "fontFamily",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"fontSize": {
					"name": "fontSize",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"fontSizeAdjust": {
					"name": "fontSizeAdjust",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"fontStretch": {
					"name": "fontStretch",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"fontStyle": {
					"name": "fontStyle",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"fontVariant": {
					"name": "fontVariant",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"fontWeight": {
					"name": "fontWeight",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"format": {
					"name": "format",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"fr": {
					"name": "fr",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"from": {
					"name": "from",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"fx": {
					"name": "fx",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"fy": {
					"name": "fy",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"g1": {
					"name": "g1",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"g2": {
					"name": "g2",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"glyphName": {
					"name": "glyphName",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"glyphOrientationHorizontal": {
					"name": "glyphOrientationHorizontal",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"glyphOrientationVertical": {
					"name": "glyphOrientationVertical",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"glyphRef": {
					"name": "glyphRef",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"gradientTransform": {
					"name": "gradientTransform",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"gradientUnits": {
					"name": "gradientUnits",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"hanging": {
					"name": "hanging",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"horizAdvX": {
					"name": "horizAdvX",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"horizOriginX": {
					"name": "horizOriginX",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"ideographic": {
					"name": "ideographic",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"imageRendering": {
					"name": "imageRendering",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"in2": {
					"name": "in2",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"in": {
					"name": "in",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"intercept": {
					"name": "intercept",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"k1": {
					"name": "k1",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"k2": {
					"name": "k2",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"k3": {
					"name": "k3",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"k4": {
					"name": "k4",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"k": {
					"name": "k",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"kernelMatrix": {
					"name": "kernelMatrix",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"kernelUnitLength": {
					"name": "kernelUnitLength",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"kerning": {
					"name": "kerning",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"keyPoints": {
					"name": "keyPoints",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"keySplines": {
					"name": "keySplines",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"keyTimes": {
					"name": "keyTimes",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"lengthAdjust": {
					"name": "lengthAdjust",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"letterSpacing": {
					"name": "letterSpacing",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"lightingColor": {
					"name": "lightingColor",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"limitingConeAngle": {
					"name": "limitingConeAngle",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"local": {
					"name": "local",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"markerEnd": {
					"name": "markerEnd",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"markerHeight": {
					"name": "markerHeight",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"markerMid": {
					"name": "markerMid",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"markerStart": {
					"name": "markerStart",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"markerUnits": {
					"name": "markerUnits",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"markerWidth": {
					"name": "markerWidth",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"mask": {
					"name": "mask",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"maskContentUnits": {
					"name": "maskContentUnits",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"maskUnits": {
					"name": "maskUnits",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"mathematical": {
					"name": "mathematical",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"mode": {
					"name": "mode",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"numOctaves": {
					"name": "numOctaves",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"offset": {
					"name": "offset",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"opacity": {
					"name": "opacity",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"operator": {
					"name": "operator",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"order": {
					"name": "order",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"orient": {
					"name": "orient",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"orientation": {
					"name": "orientation",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"overflow": {
					"name": "overflow",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"overlinePosition": {
					"name": "overlinePosition",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"overlineThickness": {
					"name": "overlineThickness",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"paintOrder": {
					"name": "paintOrder",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"panose1": {
					"name": "panose1",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"path": {
					"name": "path",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"pathLength": {
					"name": "pathLength",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"patternContentUnits": {
					"name": "patternContentUnits",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"patternTransform": {
					"name": "patternTransform",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"patternUnits": {
					"name": "patternUnits",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"pointerEvents": {
					"name": "pointerEvents",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"points": {
					"name": "points",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"pointsAtX": {
					"name": "pointsAtX",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"pointsAtY": {
					"name": "pointsAtY",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"pointsAtZ": {
					"name": "pointsAtZ",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"preserveAlpha": {
					"name": "preserveAlpha",
					"type": "string",
					"enum": [
						"true",
						"false"
					],
					"parent": "SVGAttributes"
				},
				"preserveAspectRatio": {
					"name": "preserveAspectRatio",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"primitiveUnits": {
					"name": "primitiveUnits",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"r": {
					"name": "r",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"radius": {
					"name": "radius",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"refX": {
					"name": "refX",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"refY": {
					"name": "refY",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"renderingIntent": {
					"name": "renderingIntent",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"repeatCount": {
					"name": "repeatCount",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"repeatDur": {
					"name": "repeatDur",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"requiredExtensions": {
					"name": "requiredExtensions",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"requiredFeatures": {
					"name": "requiredFeatures",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"restart": {
					"name": "restart",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"result": {
					"name": "result",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"rotate": {
					"name": "rotate",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"rx": {
					"name": "rx",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"ry": {
					"name": "ry",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"seed": {
					"name": "seed",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"shapeRendering": {
					"name": "shapeRendering",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"slope": {
					"name": "slope",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"spacing": {
					"name": "spacing",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"specularConstant": {
					"name": "specularConstant",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"specularExponent": {
					"name": "specularExponent",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"speed": {
					"name": "speed",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"spreadMethod": {
					"name": "spreadMethod",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"startOffset": {
					"name": "startOffset",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"stdDeviation": {
					"name": "stdDeviation",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"stemh": {
					"name": "stemh",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"stemv": {
					"name": "stemv",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"stitchTiles": {
					"name": "stitchTiles",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"stopColor": {
					"name": "stopColor",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"stopOpacity": {
					"name": "stopOpacity",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"strikethroughPosition": {
					"name": "strikethroughPosition",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"strikethroughThickness": {
					"name": "strikethroughThickness",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"stroke": {
					"name": "stroke",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"strokeDasharray": {
					"name": "strokeDasharray",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"strokeDashoffset": {
					"name": "strokeDashoffset",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"strokeLinecap": {
					"name": "strokeLinecap",
					"type": "string",
					"enum": [
						"inherit",
						"butt",
						"round",
						"square"
					],
					"parent": "SVGAttributes"
				},
				"strokeLinejoin": {
					"name": "strokeLinejoin",
					"type": "string",
					"enum": [
						"inherit",
						"round",
						"miter",
						"bevel"
					],
					"parent": "SVGAttributes"
				},
				"strokeMiterlimit": {
					"name": "strokeMiterlimit",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"strokeOpacity": {
					"name": "strokeOpacity",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"strokeWidth": {
					"name": "strokeWidth",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"surfaceScale": {
					"name": "surfaceScale",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"systemLanguage": {
					"name": "systemLanguage",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"tableValues": {
					"name": "tableValues",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"targetX": {
					"name": "targetX",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"targetY": {
					"name": "targetY",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"textAnchor": {
					"name": "textAnchor",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"textDecoration": {
					"name": "textDecoration",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"textLength": {
					"name": "textLength",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"textRendering": {
					"name": "textRendering",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"to": {
					"name": "to",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"transform": {
					"name": "transform",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"u1": {
					"name": "u1",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"u2": {
					"name": "u2",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"underlinePosition": {
					"name": "underlinePosition",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"underlineThickness": {
					"name": "underlineThickness",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"unicode": {
					"name": "unicode",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"unicodeBidi": {
					"name": "unicodeBidi",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"unicodeRange": {
					"name": "unicodeRange",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"unitsPerEm": {
					"name": "unitsPerEm",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"vAlphabetic": {
					"name": "vAlphabetic",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"values": {
					"name": "values",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"vectorEffect": {
					"name": "vectorEffect",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"version": {
					"name": "version",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"vertAdvY": {
					"name": "vertAdvY",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"vertOriginX": {
					"name": "vertOriginX",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"vertOriginY": {
					"name": "vertOriginY",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"vHanging": {
					"name": "vHanging",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"vIdeographic": {
					"name": "vIdeographic",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"viewBox": {
					"name": "viewBox",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"viewTarget": {
					"name": "viewTarget",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"visibility": {
					"name": "visibility",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"vMathematical": {
					"name": "vMathematical",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"widths": {
					"name": "widths",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"wordSpacing": {
					"name": "wordSpacing",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"writingMode": {
					"name": "writingMode",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"x1": {
					"name": "x1",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"x2": {
					"name": "x2",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"x": {
					"name": "x",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"xChannelSelector": {
					"name": "xChannelSelector",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"xHeight": {
					"name": "xHeight",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"xlinkActuate": {
					"name": "xlinkActuate",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"xlinkArcrole": {
					"name": "xlinkArcrole",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"xlinkHref": {
					"name": "xlinkHref",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"xlinkRole": {
					"name": "xlinkRole",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"xlinkShow": {
					"name": "xlinkShow",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"xlinkTitle": {
					"name": "xlinkTitle",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"xlinkType": {
					"name": "xlinkType",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"xmlBase": {
					"name": "xmlBase",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"xmlLang": {
					"name": "xmlLang",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"xmlns": {
					"name": "xmlns",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"xmlnsXlink": {
					"name": "xmlnsXlink",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"xmlSpace": {
					"name": "xmlSpace",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"y1": {
					"name": "y1",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"y2": {
					"name": "y2",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"y": {
					"name": "y",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"yChannelSelector": {
					"name": "yChannelSelector",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"z": {
					"name": "z",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"zoomAndPan": {
					"name": "zoomAndPan",
					"type": "string",
					"parent": "SVGAttributes"
				},
				"type": {
					"name": "type",
					"type": "string",
					"description": "Enum is any of the named icons listed in the docs, string is usually a URL to an SVG file, and elementType is any React SVG component",
					"parent": "EuiIconProps",
					"enum": [
						"accessibility",
						"addDataApp",
						"advancedSettingsApp",
						"agentApp",
						"aggregate",
						"alert",
						"analyzeEvent",
						"annotation",
						"apmApp",
						"apmTrace",
						"appSearchApp",
						"apps",
						"arrowDown",
						"arrowLeft",
						"arrowRight",
						"arrowUp",
						"arrowStart",
						"arrowEnd",
						"asterisk",
						"auditbeatApp",
						"beaker",
						"bell",
						"bellSlash",
						"bolt",
						"boxesHorizontal",
						"boxesVertical",
						"branch",
						"branchUser",
						"broom",
						"brush",
						"bug",
						"bullseye",
						"calendar",
						"canvasApp",
						"casesApp",
						"check",
						"checkInCircleFilled",
						"cheer",
						"classificationJob",
						"clock",
						"cloudDrizzle",
						"cloudStormy",
						"cloudSunny",
						"codeApp",
						"color",
						"compute",
						"console",
						"consoleApp",
						"continuityAbove",
						"continuityAboveBelow",
						"continuityBelow",
						"continuityWithin",
						"controlsHorizontal",
						"controlsVertical",
						"copy",
						"copyClipboard",
						"createAdvancedJob",
						"createMultiMetricJob",
						"createPopulationJob",
						"createSingleMetricJob",
						"cross",
						"crossClusterReplicationApp",
						"crossInACircleFilled",
						"crosshairs",
						"currency",
						"cut",
						"dashboardApp",
						"dataVisualizer",
						"database",
						"desktop",
						"devToolsApp",
						"discoverApp",
						"document",
						"documentEdit",
						"documentation",
						"documents",
						"dot",
						"doubleArrowLeft",
						"doubleArrowRight",
						"download",
						"editorAlignCenter",
						"editorAlignLeft",
						"editorAlignRight",
						"editorBold",
						"editorChecklist",
						"editorCodeBlock",
						"editorComment",
						"editorDistributeHorizontal",
						"editorDistributeVertical",
						"editorHeading",
						"editorItalic",
						"editorItemAlignBottom",
						"editorItemAlignCenter",
						"editorItemAlignLeft",
						"editorItemAlignMiddle",
						"editorItemAlignRight",
						"editorItemAlignTop",
						"editorLink",
						"editorOrderedList",
						"editorPositionBottomLeft",
						"editorPositionBottomRight",
						"editorPositionTopLeft",
						"editorPositionTopRight",
						"editorRedo",
						"editorStrike",
						"editorTable",
						"editorUnderline",
						"editorUndo",
						"editorUnorderedList",
						"email",
						"empty",
						"emsApp",
						"eql",
						"eraser",
						"exit",
						"expand",
						"expandMini",
						"exportAction",
						"eye",
						"eyeClosed",
						"faceHappy",
						"faceNeutral",
						"faceSad",
						"filebeatApp",
						"filter",
						"flag",
						"fleetApp",
						"fold",
						"folderCheck",
						"folderClosed",
						"folderExclamation",
						"folderOpen",
						"frameNext",
						"framePrevious",
						"fullScreen",
						"fullScreenExit",
						"function",
						"gear",
						"gisApp",
						"glasses",
						"globe",
						"grab",
						"grabHorizontal",
						"graphApp",
						"grid",
						"grokApp",
						"heart",
						"heartbeatApp",
						"heatmap",
						"help",
						"home",
						"iInCircle",
						"image",
						"importAction",
						"indexClose",
						"indexEdit",
						"indexFlush",
						"indexManagementApp",
						"indexMapping",
						"indexOpen",
						"indexPatternApp",
						"indexRollupApp",
						"indexRuntime",
						"indexSettings",
						"inputOutput",
						"inspect",
						"invert",
						"ip",
						"keyboardShortcut",
						"kqlField",
						"kqlFunction",
						"kqlOperand",
						"kqlSelector",
						"kqlValue",
						"layers",
						"lensApp",
						"lettering",
						"lineDashed",
						"lineDotted",
						"lineSolid",
						"link",
						"list",
						"listAdd",
						"lock",
						"lockOpen",
						"logoAWS",
						"logoAWSMono",
						"logoAerospike",
						"logoApache",
						"logoAppSearch",
						"logoAzure",
						"logoAzureMono",
						"logoBeats",
						"logoBusinessAnalytics",
						"logoCeph",
						"logoCloud",
						"logoCloudEnterprise",
						"logoCode",
						"logoCodesandbox",
						"logoCouchbase",
						"logoDocker",
						"logoDropwizard",
						"logoElastic",
						"logoElasticStack",
						"logoElasticsearch",
						"logoEnterpriseSearch",
						"logoEtcd",
						"logoGCP",
						"logoGCPMono",
						"logoGithub",
						"logoGmail",
						"logoGolang",
						"logoGoogleG",
						"logoHAproxy",
						"logoIBM",
						"logoIBMMono",
						"logoKafka",
						"logoKibana",
						"logoKubernetes",
						"logoLogging",
						"logoLogstash",
						"logoMaps",
						"logoMemcached",
						"logoMetrics",
						"logoMongodb",
						"logoMySQL",
						"logoNginx",
						"logoObservability",
						"logoOsquery",
						"logoPhp",
						"logoPostgres",
						"logoPrometheus",
						"logoRabbitmq",
						"logoRedis",
						"logoSecurity",
						"logoSiteSearch",
						"logoSketch",
						"logoSlack",
						"logoUptime",
						"logoWebhook",
						"logoWindows",
						"logoWorkplaceSearch",
						"logsApp",
						"logstashFilter",
						"logstashIf",
						"logstashInput",
						"logstashOutput",
						"logstashQueue",
						"machineLearningApp",
						"magnet",
						"magnifyWithExclamation",
						"magnifyWithMinus",
						"magnifyWithPlus",
						"managementApp",
						"mapMarker",
						"memory",
						"menu",
						"menuDown",
						"menuLeft",
						"menuRight",
						"menuUp",
						"merge",
						"metricbeatApp",
						"metricsApp",
						"minimize",
						"minus",
						"minusInCircle",
						"minusInCircleFilled",
						"mobile",
						"monitoringApp",
						"moon",
						"nested",
						"node",
						"notebookApp",
						"number",
						"offline",
						"online",
						"outlierDetectionJob",
						"package",
						"packetbeatApp",
						"pageSelect",
						"pagesSelect",
						"paperClip",
						"partial",
						"pause",
						"payment",
						"pencil",
						"percent",
						"pin",
						"pinFilled",
						"pipelineApp",
						"play",
						"playFilled",
						"plus",
						"plusInCircle",
						"plusInCircleFilled",
						"popout",
						"push",
						"questionInCircle",
						"quote",
						"recentlyViewedApp",
						"refresh",
						"regressionJob",
						"reporter",
						"reportingApp",
						"returnKey",
						"save",
						"savedObjectsApp",
						"scale",
						"search",
						"searchProfilerApp",
						"securityAnalyticsApp",
						"securityApp",
						"securitySignal",
						"securitySignalDetected",
						"securitySignalResolved",
						"sessionViewer",
						"shard",
						"share",
						"snowflake",
						"sortDown",
						"sortLeft",
						"sortRight",
						"sortUp",
						"sortable",
						"spacesApp",
						"sqlApp",
						"starEmpty",
						"starEmptySpace",
						"starFilled",
						"starFilledSpace",
						"starMinusEmpty",
						"starMinusFilled",
						"starPlusEmpty",
						"starPlusFilled",
						"stats",
						"stop",
						"stopFilled",
						"stopSlash",
						"storage",
						"string",
						"submodule",
						"sun",
						"swatchInput",
						"symlink",
						"tableDensityCompact",
						"tableDensityExpanded",
						"tableDensityNormal",
						"tableOfContents",
						"tag",
						"tear",
						"temperature",
						"timeline",
						"timelionApp",
						"timeRefresh",
						"timeslider",
						"training",
						"trash",
						"unfold",
						"unlink",
						"upgradeAssistantApp",
						"uptimeApp",
						"user",
						"users",
						"usersRolesApp",
						"vector",
						"videoPlayer",
						"visArea",
						"visAreaStacked",
						"visBarHorizontal",
						"visBarHorizontalStacked",
						"visBarVertical",
						"visBarVerticalStacked",
						"visGauge",
						"visGoal",
						"visLine",
						"visMapCoordinate",
						"visMapRegion",
						"visMetric",
						"visPie",
						"visTable",
						"visTagCloud",
						"visText",
						"visTimelion",
						"visVega",
						"visVisualBuilder",
						"visualizeApp",
						"watchesApp",
						"wordWrap",
						"wordWrapDisabled",
						"workplaceSearchApp",
						"wrench",
						"tokenClass",
						"tokenProperty",
						"tokenEnum",
						"tokenVariable",
						"tokenMethod",
						"tokenAnnotation",
						"tokenException",
						"tokenInterface",
						"tokenParameter",
						"tokenField",
						"tokenElement",
						"tokenFunction",
						"tokenBoolean",
						"tokenString",
						"tokenArray",
						"tokenNumber",
						"tokenConstant",
						"tokenObject",
						"tokenEvent",
						"tokenKey",
						"tokenNull",
						"tokenStruct",
						"tokenPackage",
						"tokenOperator",
						"tokenEnumMember",
						"tokenRepo",
						"tokenSymbol",
						"tokenFile",
						"tokenModule",
						"tokenNamespace",
						"tokenDate",
						"tokenIP",
						"tokenNested",
						"tokenAlias",
						"tokenShape",
						"tokenGeo",
						"tokenRange",
						"tokenBinary",
						"tokenJoin",
						"tokenPercolator",
						"tokenFlattened",
						"tokenRankFeature",
						"tokenRankFeatures",
						"tokenKeyword",
						"tokenTag",
						"tokenCompletionSuggester",
						"tokenDenseVector",
						"tokenText",
						"tokenTokenCount",
						"tokenSearchType",
						"tokenHistogram"
					]
				},
				"color": {
					"name": "color",
					"type": "string",
					"description": "One of EUIs color palette or a valid CSS color value https://developer.mozilla.org/en-US/docs/Web/CSS/color_value. Note that coloring only works if your SVG is removed of fill attributes.",
					"parent": "EuiIconProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m",
						"l",
						"xl",
						"original",
						"xxl"
					],
					"description": "Note that every size other than original assumes the provided SVG sits on a square viewbox.",
					"parent": "EuiIconProps"
				},
				"title": {
					"name": "title",
					"type": "string",
					"description": "Descriptive title for naming the icon based on its use",
					"parent": "EuiIconProps"
				},
				"titleId": {
					"name": "titleId",
					"type": "string",
					"description": "A unique identifier for the title element",
					"parent": "EuiIconProps"
				},
				"onIconLoad": {
					"name": "onIconLoad",
					"type": "Event",
					"description": "Callback when the icon has been loaded & rendered",
					"parent": "EuiIconProps"
				}
			},
			"relativePath": "src/components/icon/icon.tsx"
		},
		"ElasticEui_ICON_TYPES": {
			"id": "ElasticEui_ICON_TYPES",
			"name": "Types",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "ICON_TYPES",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/components/icon/icon.tsx"
		},
		"ElasticEui_ICON_SIZES": {
			"id": "ElasticEui_ICON_SIZES",
			"name": "Sizes",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "ICON_SIZES",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/components/icon/icon.tsx"
		},
		"ElasticEui_ICON_COLORS": {
			"id": "ElasticEui_ICON_COLORS",
			"name": "Colors",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "ICON_COLORS",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/components/icon/icon.tsx"
		},
		"ElasticEui_EuiImage": {
			"id": "ElasticEui_EuiImage",
			"name": "EuiImage",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiImage",
				"lib": "elasticEui"
			},
			"required": [
				"alt"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"src": {
					"name": "src",
					"type": "string",
					"description": "Requires either src or url but defaults to using src if both are provided",
					"parent": "_EuiImageSrcOrUrl"
				},
				"url": {
					"name": "url",
					"type": "string",
					"parent": "_EuiImageSrcOrUrl"
				},
				"referrerPolicy": {
					"name": "referrerPolicy",
					"type": "string",
					"enum": [
						"",
						"no-referrer",
						"no-referrer-when-downgrade",
						"origin",
						"origin-when-cross-origin",
						"same-origin",
						"strict-origin",
						"strict-origin-when-cross-origin",
						"unsafe-url"
					],
					"parent": "ImgHTMLAttributes"
				},
				"height": {
					"name": "height",
					"type": "string",
					"parent": "ImgHTMLAttributes"
				},
				"width": {
					"name": "width",
					"type": "string",
					"parent": "ImgHTMLAttributes"
				},
				"crossOrigin": {
					"name": "crossOrigin",
					"type": "string",
					"enum": [
						"",
						"anonymous",
						"use-credentials"
					],
					"parent": "ImgHTMLAttributes"
				},
				"useMap": {
					"name": "useMap",
					"type": "string",
					"parent": "ImgHTMLAttributes"
				},
				"decoding": {
					"name": "decoding",
					"type": "string",
					"enum": [
						"auto",
						"async",
						"sync"
					],
					"parent": "ImgHTMLAttributes"
				},
				"loading": {
					"name": "loading",
					"type": "string",
					"enum": [
						"eager",
						"lazy"
					],
					"parent": "ImgHTMLAttributes"
				},
				"sizes": {
					"name": "sizes",
					"type": "string",
					"parent": "ImgHTMLAttributes"
				},
				"srcSet": {
					"name": "srcSet",
					"type": "string",
					"parent": "ImgHTMLAttributes"
				},
				"alt": {
					"name": "alt",
					"type": "string",
					"description": "Separate from the caption is a title on the alt tag itself. This one is required for accessibility.",
					"parent": "EuiImageProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"default": "original",
					"description": "Accepts s / m / l / xl / original / fullWidth / or a CSS size of number or string. fullWidth will set the figure to stretch to 100% of its container. string and number types will max both the width or height, whichever is greater.",
					"parent": "EuiImageProps"
				},
				"fullScreenIconColor": {
					"name": "fullScreenIconColor",
					"type": "string",
					"enum": [
						"dark",
						"light"
					],
					"default": "light",
					"description": "Changes the color of the icon that floats above the image when it can be clicked to fullscreen. The default value of light is fine unless your image has a white background, in which case you should change it to dark.",
					"parent": "EuiImageProps"
				},
				"caption": {
					"name": "caption",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Provides the visible caption to the image",
					"parent": "EuiImageProps"
				},
				"hasShadow": {
					"name": "hasShadow",
					"type": "boolean",
					"description": "When set to true (default) will apply a slight shadow to the image",
					"parent": "EuiImageProps"
				},
				"allowFullScreen": {
					"name": "allowFullScreen",
					"type": "boolean",
					"description": "When set to true will make the image clickable to a larger version",
					"parent": "EuiImageProps"
				},
				"float": {
					"name": "float",
					"type": "string",
					"enum": [
						"left",
						"right"
					],
					"description": "Float the image to the left or right. Useful in large text blocks.",
					"parent": "EuiImageProps"
				},
				"margin": {
					"name": "margin",
					"type": "string",
					"enum": [
						"s",
						"m",
						"l",
						"xl"
					],
					"description": "Margin around the image.",
					"parent": "EuiImageProps"
				}
			},
			"relativePath": "src/components/image/image.tsx"
		},
		"ElasticEui_useInnerText": {
			"id": "ElasticEui_useInnerText",
			"name": "UseInnerText",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useInnerText",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/components/inner_text/inner_text.tsx"
		},
		"ElasticEui_EuiInnerText": {
			"id": "ElasticEui_EuiInnerText",
			"name": "EuiInnerText",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiInnerText",
				"lib": "elasticEui"
			},
			"props": {
				"children": {
					"name": "children",
					"type": "Event",
					"description": "ReactNode to render as this components content",
					"parent": "EuiInnerTextProps"
				},
				"fallback": {
					"name": "fallback",
					"type": "string",
					"parent": "EuiInnerTextProps"
				}
			},
			"relativePath": "src/components/inner_text/inner_text.tsx"
		},
		"ElasticEui_useRenderToText": {
			"id": "ElasticEui_useRenderToText",
			"name": "UseRenderToText",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useRenderToText",
				"lib": "elasticEui"
			},
			"required": [
				"charAt",
				"charCodeAt",
				"concat",
				"indexOf",
				"lastIndexOf",
				"localeCompare",
				"match",
				"replace",
				"search",
				"slice",
				"split",
				"substring",
				"toLowerCase",
				"toLocaleLowerCase",
				"toUpperCase",
				"toLocaleUpperCase",
				"trim",
				"length",
				"substr",
				"codePointAt",
				"includes",
				"endsWith",
				"normalize",
				"repeat",
				"startsWith",
				"anchor",
				"big",
				"blink",
				"bold",
				"fixed",
				"fontcolor",
				"fontsize",
				"italics",
				"link",
				"small",
				"strike",
				"sub",
				"sup",
				"padStart",
				"padEnd",
				"trimEnd",
				"trimStart",
				"trimLeft",
				"trimRight",
				"matchAll",
				"replaceAll",
				"__@iterator@43",
				"toFixed",
				"toExponential",
				"toPrecision",
				"type",
				"props",
				"key"
			],
			"props": {
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of a string. Returns a string representation of an object.",
					"parent": "String"
				},
				"charAt": {
					"name": "charAt",
					"type": "Event",
					"description": "Returns the character at the specified index.",
					"parent": "String"
				},
				"charCodeAt": {
					"name": "charCodeAt",
					"type": "Event",
					"description": "Returns the Unicode value of the character at the specified location.",
					"parent": "String"
				},
				"concat": {
					"name": "concat",
					"type": "Event",
					"description": "Returns a string that contains the concatenation of two or more strings.",
					"parent": "String"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the position of the first occurrence of a substring.",
					"parent": "String"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the last occurrence of a substring in the string.",
					"parent": "String"
				},
				"localeCompare": {
					"name": "localeCompare",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Determines whether two strings are equivalent in the current locale. Determines whether two strings are equivalent in the current or specified locale.",
					"parent": "String"
				},
				"match": {
					"name": "match",
					"type": "unknown",
					"description": "Matches a string with a regular expression, and returns an array containing the results of that search. Matches a string or an object that supports being matched against, and returns an array containing the results of that search, or null if no matches are found.",
					"parent": "String"
				},
				"replace": {
					"name": "replace",
					"description": "Replaces text in a string, using a regular expression or search string. Replaces first match with string or all matches with RegExp. Replaces text in a string, using an object that supports replacement within a string.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "String"
				},
				"search": {
					"name": "search",
					"type": "unknown",
					"description": "Finds the first substring match in a regular expression search.",
					"parent": "String"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a section of a string.",
					"parent": "String"
				},
				"split": {
					"name": "split",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Split a string into substrings using the specified separator and return them as an array.",
					"parent": "String"
				},
				"substring": {
					"name": "substring",
					"type": "Event",
					"description": "Returns the substring at the specified location within a String object.",
					"parent": "String"
				},
				"toLowerCase": {
					"name": "toLowerCase",
					"type": "Event",
					"description": "Converts all the alphabetic characters in a string to lowercase.",
					"parent": "String"
				},
				"toLocaleLowerCase": {
					"name": "toLocaleLowerCase",
					"description": "Converts all alphabetic characters to lowercase, taking into account the host environments current locale.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "String"
				},
				"toUpperCase": {
					"name": "toUpperCase",
					"type": "Event",
					"description": "Converts all the alphabetic characters in a string to uppercase.",
					"parent": "String"
				},
				"toLocaleUpperCase": {
					"name": "toLocaleUpperCase",
					"description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environments current locale.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "String"
				},
				"trim": {
					"name": "trim",
					"type": "Event",
					"description": "Removes the leading and trailing white space and line terminator characters from a string.",
					"parent": "String"
				},
				"length": {
					"name": "length",
					"type": "number",
					"description": "Returns the length of a String object.",
					"parent": "String"
				},
				"substr": {
					"name": "substr",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"valueOf": {
					"name": "valueOf",
					"type": "Event",
					"description": "Returns the primitive value of the specified object.",
					"parent": "String"
				},
				"codePointAt": {
					"name": "codePointAt",
					"type": "Event",
					"description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point value of the UTF-16 encoded code point starting at the string element at position pos in the String resulting from converting this object to a String. If there is no element at that position, the result is undefined. If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
					"parent": "String"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Returns true if searchString appears as a substring of the result of converting this object to a String, at one or more positions that are greater than or equal to position; otherwise, returns false.",
					"parent": "String"
				},
				"endsWith": {
					"name": "endsWith",
					"type": "Event",
					"description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at endPosition – length(this). Otherwise returns false.",
					"parent": "String"
				},
				"normalize": {
					"name": "normalize",
					"type": "unknown",
					"description": "Returns the String value result of normalizing the string into the normalization form named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
					"parent": "String"
				},
				"repeat": {
					"name": "repeat",
					"type": "Event",
					"description": "Returns a String value that is made from count copies appended together. If count is 0, the empty string is returned.",
					"parent": "String"
				},
				"startsWith": {
					"name": "startsWith",
					"type": "Event",
					"description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at position. Otherwise returns false.",
					"parent": "String"
				},
				"anchor": {
					"name": "anchor",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"big": {
					"name": "big",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"blink": {
					"name": "blink",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"bold": {
					"name": "bold",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fixed": {
					"name": "fixed",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fontcolor": {
					"name": "fontcolor",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fontsize": {
					"name": "fontsize",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"italics": {
					"name": "italics",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"link": {
					"name": "link",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"small": {
					"name": "small",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"strike": {
					"name": "strike",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"sub": {
					"name": "sub",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"sup": {
					"name": "sup",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"padStart": {
					"name": "padStart",
					"type": "Event",
					"description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the start (left) of the current string.",
					"parent": "String"
				},
				"padEnd": {
					"name": "padEnd",
					"type": "Event",
					"description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string.",
					"parent": "String"
				},
				"trimEnd": {
					"name": "trimEnd",
					"type": "Event",
					"description": "Removes the trailing white space and line terminator characters from a string.",
					"parent": "String"
				},
				"trimStart": {
					"name": "trimStart",
					"type": "Event",
					"description": "Removes the leading white space and line terminator characters from a string.",
					"parent": "String"
				},
				"trimLeft": {
					"name": "trimLeft",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility. Use `trimStart` instead",
					"parent": "String"
				},
				"trimRight": {
					"name": "trimRight",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility. Use `trimEnd` instead",
					"parent": "String"
				},
				"matchAll": {
					"name": "matchAll",
					"type": "Event",
					"description": "Matches a string with a regular expression, and returns an iterable of matches containing the results of that search.",
					"parent": "String"
				},
				"replaceAll": {
					"name": "replaceAll",
					"description": "Replace all instances of a substring in a string, using a regular expression or search string.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "String"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "String"
				},
				"toFixed": {
					"name": "toFixed",
					"type": "Event",
					"description": "Returns a string representing a number in fixed-point notation.",
					"parent": "Number"
				},
				"toExponential": {
					"name": "toExponential",
					"type": "Event",
					"description": "Returns a string containing a number represented in exponential notation.",
					"parent": "Number"
				},
				"toPrecision": {
					"name": "toPrecision",
					"type": "Event",
					"description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
					"parent": "Number"
				},
				"toLocaleString": {
					"name": "toLocaleString",
					"type": "Event",
					"description": "Returns a date converted to a string using the current locale. Converts a number to a string by using the current or specified locale.",
					"parent": "Object"
				},
				"type": {
					"name": "type",
					"type": "string",
					"parent": "ReactElement"
				},
				"props": {
					"name": "props",
					"type": "unknown",
					"parent": "ReactElement"
				},
				"key": {
					"name": "key",
					"type": "string",
					"parent": "ReactElement"
				}
			},
			"relativePath": "src/components/inner_text/render_to_text.tsx"
		},
		"ElasticEui_EuiI18n": {
			"id": "ElasticEui_EuiI18n",
			"name": "EuiI18n",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiI18n",
				"lib": "elasticEui"
			},
			"props": {
				"default": {
					"name": "default",
					"type": "string",
					"parent": "I18nTokenShape"
				},
				"values": {
					"name": "values",
					"type": "object",
					"parent": "I18nTokenShape"
				},
				"token": {
					"name": "token",
					"type": "string",
					"parent": "I18nTokenShape"
				},
				"tokens": {
					"name": "tokens",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "I18nTokensShape"
				},
				"defaults": {
					"name": "defaults",
					"type": "unknown",
					"parent": "I18nTokensShape"
				}
			},
			"relativePath": "src/components/i18n/i18n.tsx"
		},
		"ElasticEui_useEuiI18n": {
			"id": "ElasticEui_useEuiI18n",
			"name": "UseEuiI18n",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useEuiI18n",
				"lib": "elasticEui"
			},
			"required": [
				"length",
				"pop",
				"push",
				"concat",
				"join",
				"reverse",
				"shift",
				"slice",
				"sort",
				"splice",
				"unshift",
				"indexOf",
				"lastIndexOf",
				"every",
				"some",
				"forEach",
				"map",
				"filter",
				"reduce",
				"reduceRight",
				"find",
				"findIndex",
				"fill",
				"copyWithin",
				"entries",
				"keys",
				"values",
				"includes",
				"flatMap",
				"flat",
				"__@iterator@43",
				"__@unscopables@327"
			],
			"props": {
				"length": {
					"name": "length",
					"type": "number",
					"description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
					"parent": "Array"
				},
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of an array.",
					"parent": "Array"
				},
				"toLocaleString": {
					"name": "toLocaleString",
					"type": "Event",
					"description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
					"parent": "Array"
				},
				"pop": {
					"name": "pop",
					"type": "Event",
					"description": "Removes the last element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"push": {
					"name": "push",
					"type": "Event",
					"description": "Appends new elements to the end of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"concat": {
					"name": "concat",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Combines two or more arrays. This method returns a new array without modifying any existing arrays.",
					"parent": "Array"
				},
				"join": {
					"name": "join",
					"type": "Event",
					"description": "Adds all the elements of an array into a string, separated by the specified separator string.",
					"parent": "Array"
				},
				"reverse": {
					"name": "reverse",
					"type": "Event",
					"description": "Reverses the elements in an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"shift": {
					"name": "shift",
					"type": "Event",
					"description": "Removes the first element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a copy of a section of an array. For both start and end, a negative index can be used to indicate an offset from the end of the array. For example, -2 refers to the second to last element of the array.",
					"parent": "Array"
				},
				"sort": {
					"name": "sort",
					"type": "Event",
					"description": "Sorts an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"splice": {
					"name": "splice",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
					"parent": "Array"
				},
				"unshift": {
					"name": "unshift",
					"type": "Event",
					"description": "Inserts new elements at the start of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"every": {
					"name": "every",
					"type": "Event",
					"description": "Determines whether all the members of an array satisfy the specified test.",
					"parent": "Array"
				},
				"some": {
					"name": "some",
					"type": "Event",
					"description": "Determines whether the specified callback function returns true for any element of an array.",
					"parent": "Array"
				},
				"forEach": {
					"name": "forEach",
					"type": "Event",
					"description": "Performs the specified action for each element in an array.",
					"parent": "Array"
				},
				"map": {
					"name": "map",
					"type": "Event",
					"description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
					"parent": "Array"
				},
				"filter": {
					"name": "filter",
					"type": "Event",
					"description": "Returns the elements of an array that meet the condition specified in a callback function.",
					"parent": "Array"
				},
				"reduce": {
					"name": "reduce",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"reduceRight": {
					"name": "reduceRight",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"find": {
					"name": "find",
					"description": "Returns the value of the first element in the array where predicate is true, and undefined otherwise.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"findIndex": {
					"name": "findIndex",
					"type": "Event",
					"description": "Returns the index of the first element in the array where predicate is true, and -1 otherwise.",
					"parent": "Array"
				},
				"fill": {
					"name": "fill",
					"type": "Event",
					"description": "Changes all array elements from start to end index to a static value and returns the modified array",
					"parent": "Array"
				},
				"copyWithin": {
					"name": "copyWithin",
					"type": "Event",
					"description": "Returns the this object after copying a section of the array identified by start and end to the same array starting at position target",
					"parent": "Array"
				},
				"entries": {
					"name": "entries",
					"type": "Event",
					"description": "Returns an iterable of key, value pairs for every entry in the array",
					"parent": "Array"
				},
				"keys": {
					"name": "keys",
					"type": "Event",
					"description": "Returns an iterable of keys in the array",
					"parent": "Array"
				},
				"values": {
					"name": "values",
					"type": "Event",
					"description": "Returns an iterable of values in the array",
					"parent": "Array"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Determines whether an array includes a certain element, returning true or false as appropriate.",
					"parent": "Array"
				},
				"flatMap": {
					"name": "flatMap",
					"description": "Calls a defined callback function on each element of an array. Then, flattens the result into a new array. This is identical to a map followed by flat with depth 1.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"flat": {
					"name": "flat",
					"type": "Event",
					"description": "Returns a new array with all sub-array elements concatenated into it recursively up to the specified depth.",
					"parent": "Array"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "Array"
				},
				"__@unscopables@327": {
					"name": "__@unscopables@327",
					"type": "Event",
					"description": "Returns an object whose properties have the value true when they will be absent when used in a with statement.",
					"parent": "Array"
				}
			},
			"relativePath": "src/components/i18n/i18n.tsx"
		},
		"ElasticEui_EuiI18nNumber": {
			"id": "ElasticEui_EuiI18nNumber",
			"name": "EuiI18nNumber",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiI18nNumber",
				"lib": "elasticEui"
			},
			"props": {
				"value": {
					"name": "value",
					"type": "number",
					"parent": "EuiI18nNumberValueShape"
				},
				"values": {
					"name": "values",
					"type": "array",
					"items": {
						"type": "number"
					},
					"parent": "EuiI18nNumberValuesShape"
				},
				"children": {
					"name": "children",
					"type": "Event",
					"description": "ReactNode to render as this components content",
					"parent": "EuiI18nNumberValuesShape"
				}
			},
			"relativePath": "src/components/i18n/i18n_number.tsx"
		},
		"ElasticEui_EuiLoadingElastic": {
			"id": "ElasticEui_EuiLoadingElastic",
			"name": "EuiLoadingElastic",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiLoadingElastic",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"m",
						"l",
						"xl",
						"xxl"
					],
					"default": "m",
					"parent": "EuiLoadingElasticProps"
				}
			},
			"relativePath": "src/components/loading/loading_elastic.tsx"
		},
		"ElasticEui_EuiLoadingChart": {
			"id": "ElasticEui_EuiLoadingChart",
			"name": "EuiLoadingChart",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiLoadingChart",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"m",
						"l",
						"xl"
					],
					"default": "m",
					"parent": "EuiLoadingChartProps"
				},
				"mono": {
					"name": "mono",
					"type": "boolean",
					"default": false,
					"parent": "EuiLoadingChartProps"
				}
			},
			"relativePath": "src/components/loading/loading_chart.tsx"
		},
		"ElasticEui_EuiLoadingContent": {
			"id": "ElasticEui_EuiLoadingContent",
			"name": "EuiLoadingContent",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiLoadingContent",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"lines": {
					"name": "lines",
					"type": "number",
					"enum": [
						1,
						2,
						3,
						4,
						5,
						6,
						8,
						7,
						9,
						10
					],
					"default": 3,
					"parent": "EuiLoadingContentProps"
				}
			},
			"relativePath": "src/components/loading/loading_content.tsx"
		},
		"ElasticEui_EuiLoadingSpinner": {
			"id": "ElasticEui_EuiLoadingSpinner",
			"name": "EuiLoadingSpinner",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiLoadingSpinner",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m",
						"l",
						"xl",
						"xxl"
					],
					"default": "m",
					"parent": "EuiLoadingSpinnerProps"
				}
			},
			"relativePath": "src/components/loading/loading_spinner.tsx"
		},
		"ElasticEui_EuiLoadingLogo": {
			"id": "ElasticEui_EuiLoadingLogo",
			"name": "EuiLoadingLogo",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiLoadingLogo",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"m",
						"l",
						"xl"
					],
					"default": "m",
					"parent": "EuiLoadingLogoProps"
				},
				"logo": {
					"name": "logo",
					"type": "string",
					"default": "logoKibana",
					"description": "While this component should be restricted to using logo icons, it works with any IconType",
					"parent": "EuiLoadingLogoProps"
				}
			},
			"relativePath": "src/components/loading/loading_logo.tsx"
		},
		"ElasticEui_EuiKeyPadMenu": {
			"id": "ElasticEui_EuiKeyPadMenu",
			"name": "EuiKeyPadMenu",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiKeyPadMenu",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"checkable": {
					"name": "checkable",
					"type": "boolean",
					"description": "Renders the the group as a fieldset. Set to true to customize the labelling, or pass an #EuiKeyPadMenuCheckableProps object to add a legend or ariaLegend",
					"parent": "EuiKeyPadMenuProps"
				}
			},
			"relativePath": "src/components/key_pad_menu/key_pad_menu.tsx"
		},
		"ElasticEui_EuiKeyPadMenuItem": {
			"id": "ElasticEui_EuiKeyPadMenuItem",
			"name": "EuiKeyPadMenuItem",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiKeyPadMenuItem",
				"lib": "elasticEui"
			},
			"required": [
				"label"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"htmlFor": {
					"name": "htmlFor",
					"type": "string",
					"parent": "LabelHTMLAttributes"
				},
				"href": {
					"name": "href",
					"type": "string",
					"parent": "PropsForAnchor"
				},
				"download": {
					"name": "download",
					"type": "unknown",
					"parent": "AnchorHTMLAttributes"
				},
				"hrefLang": {
					"name": "hrefLang",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"media": {
					"name": "media",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"ping": {
					"name": "ping",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"rel": {
					"name": "rel",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"target": {
					"name": "target",
					"type": "string",
					"enum": [
						"_self",
						"_blank",
						"_parent",
						"_top"
					],
					"parent": "AnchorHTMLAttributes"
				},
				"referrerPolicy": {
					"name": "referrerPolicy",
					"type": "string",
					"enum": [
						"",
						"no-referrer",
						"no-referrer-when-downgrade",
						"origin",
						"origin-when-cross-origin",
						"same-origin",
						"strict-origin",
						"strict-origin-when-cross-origin",
						"unsafe-url"
					],
					"parent": "AnchorHTMLAttributes"
				},
				"id": {
					"name": "id",
					"type": "string",
					"description": "One will be generated if not provided",
					"parent": "EuiKeyPadMenuItemCommonProps"
				},
				"children": {
					"name": "children",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Pass an EuiIcon, preferrably size=l",
					"parent": "EuiKeyPadMenuItemCommonProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"parent": "EuiKeyPadMenuItemCommonProps"
				},
				"isSelected": {
					"name": "isSelected",
					"type": "boolean",
					"description": "Indicate if an item is the current one. Be sure to use true AND false when acting as a toggle to ensure the attribute is added for both states",
					"parent": "EuiKeyPadMenuItemCommonProps"
				},
				"label": {
					"name": "label",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "The text to display beneath the icon",
					"parent": "EuiKeyPadMenuItemCommonProps"
				},
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"description": "Use onChange instead when the item is checkable",
					"parent": "PropsForButton"
				},
				"buttonRef": {
					"name": "buttonRef",
					"type": "Event",
					"parent": "EuiKeyPadMenuItemPropsForButton"
				},
				"checkable": {
					"name": "checkable",
					"type": "string",
					"enum": [
						"single",
						"multi"
					],
					"description": "Beta badges are unavailable if the item is checkable Type multi renders the item as a <label> and adds a checkbox. Type single renders the item as a <label> and adds a radio element.",
					"parent": "EuiKeyPadMenuItemPropsForUncheckable"
				},
				"betaBadgeLabel": {
					"name": "betaBadgeLabel",
					"type": "string",
					"description": "Add a badge to the card to label it as Beta or other non-GA state",
					"parent": "EuiKeyPadMenuItemPropsForUncheckable"
				},
				"betaBadgeIconType": {
					"name": "betaBadgeIconType",
					"type": "string",
					"description": "Supply an icon type if the badge should just be an icon",
					"parent": "EuiKeyPadMenuItemPropsForUncheckable"
				},
				"betaBadgeTooltipContent": {
					"name": "betaBadgeTooltipContent",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Add a description to the beta badge (will appear in a tooltip)",
					"parent": "EuiKeyPadMenuItemPropsForUncheckable"
				},
				"betaBadgeTooltipProps": {
					"name": "betaBadgeTooltipProps",
					"type": "unknown",
					"description": "Extends the wrapping EuiToolTip props when betaBadgeLabel is provided",
					"parent": "EuiKeyPadMenuItemPropsForUncheckable"
				}
			},
			"relativePath": "src/components/key_pad_menu/key_pad_menu_item.tsx"
		},
		"ElasticEui_EuiLink": {
			"id": "ElasticEui_EuiLink",
			"name": "EuiLink",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiLink",
				"lib": "elasticEui"
			},
			"props": {
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"parent": "EuiLinkAnchorProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"href": {
					"name": "href",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"download": {
					"name": "download",
					"type": "unknown",
					"parent": "AnchorHTMLAttributes"
				},
				"hrefLang": {
					"name": "hrefLang",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"media": {
					"name": "media",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"ping": {
					"name": "ping",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"rel": {
					"name": "rel",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"target": {
					"name": "target",
					"type": "string",
					"enum": [
						"_self",
						"_blank",
						"_parent",
						"_top"
					],
					"parent": "AnchorHTMLAttributes"
				},
				"referrerPolicy": {
					"name": "referrerPolicy",
					"type": "string",
					"enum": [
						"",
						"no-referrer",
						"no-referrer-when-downgrade",
						"origin",
						"origin-when-cross-origin",
						"same-origin",
						"strict-origin",
						"strict-origin-when-cross-origin",
						"unsafe-url"
					],
					"parent": "AnchorHTMLAttributes"
				},
				"type": {
					"name": "type",
					"type": "string",
					"enum": [
						"button",
						"submit",
						"reset"
					],
					"default": "button",
					"parent": "LinkAnchorProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"primary",
						"accent",
						"success",
						"warning",
						"danger",
						"ghost",
						"text",
						"subdued"
					],
					"default": "primary",
					"description": "Any of our named colors.",
					"parent": "LinkAnchorProps"
				},
				"external": {
					"name": "external",
					"type": "boolean",
					"description": "Set to true to show an icon indicating that it is an external link; Defaults to true if target=_blank",
					"parent": "LinkAnchorProps"
				},
				"ref": {
					"name": "ref",
					"type": "Event",
					"parent": "RefAttributes"
				}
			},
			"relativePath": "src/components/link/link.tsx"
		},
		"ElasticEui_EuiListGroup": {
			"id": "ElasticEui_EuiListGroup",
			"name": "EuiListGroup",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiListGroup",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"bordered": {
					"name": "bordered",
					"type": "boolean",
					"default": false,
					"description": "Add a border to the list container",
					"parent": "EuiListGroupProps"
				},
				"flush": {
					"name": "flush",
					"type": "boolean",
					"default": false,
					"description": "Remove container padding, stretching list items to the edges",
					"parent": "EuiListGroupProps"
				},
				"gutterSize": {
					"name": "gutterSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m"
					],
					"default": "s",
					"description": "Spacing between list items",
					"parent": "EuiListGroupProps"
				},
				"listItems": {
					"name": "listItems",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Items to display in this group. See #EuiListGroupItem",
					"parent": "EuiListGroupProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"primary",
						"ghost",
						"text",
						"inherit",
						"subdued"
					],
					"description": "Change the colors of all listItems at once",
					"parent": "EuiListGroupProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs",
						"l"
					],
					"description": "Change the size of all listItems at once",
					"parent": "EuiListGroupProps"
				},
				"maxWidth": {
					"name": "maxWidth",
					"type": "boolean",
					"default": true,
					"description": "Sets the max-width of the page, set to true to use the default size, set to false to not restrict the width, set to a number for a custom width in px, set to a string for a custom width in custom measurement.",
					"parent": "EuiListGroupProps"
				},
				"showToolTips": {
					"name": "showToolTips",
					"type": "boolean",
					"default": false,
					"description": "Display tooltips on all list items",
					"parent": "EuiListGroupProps"
				},
				"wrapText": {
					"name": "wrapText",
					"type": "boolean",
					"default": false,
					"description": "Allow link text to wrap vs truncated",
					"parent": "EuiListGroupProps"
				},
				"ariaLabelledby": {
					"name": "ariaLabelledby",
					"type": "string",
					"parent": "EuiListGroupProps"
				}
			},
			"relativePath": "src/components/list_group/list_group.tsx"
		},
		"ElasticEui_EuiListGroupItem": {
			"id": "ElasticEui_EuiListGroupItem",
			"name": "EuiListGroupItem",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiListGroupItem",
				"lib": "elasticEui"
			},
			"required": [
				"label"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"download": {
					"name": "download",
					"type": "unknown",
					"parent": "AnchorHTMLAttributes"
				},
				"hrefLang": {
					"name": "hrefLang",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"media": {
					"name": "media",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"ping": {
					"name": "ping",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"type": {
					"name": "type",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"referrerPolicy": {
					"name": "referrerPolicy",
					"type": "string",
					"enum": [
						"",
						"no-referrer",
						"no-referrer-when-downgrade",
						"origin",
						"origin-when-cross-origin",
						"same-origin",
						"strict-origin",
						"strict-origin-when-cross-origin",
						"unsafe-url"
					],
					"parent": "AnchorHTMLAttributes"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs",
						"l"
					],
					"default": "m",
					"description": "Size of the label text",
					"parent": "EuiListGroupItemProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"primary",
						"ghost",
						"text",
						"inherit",
						"subdued"
					],
					"default": "inherit",
					"description": "By default the item will inherit the color of its wrapper (button/link/span), otherwise pass one of the acceptable options",
					"parent": "EuiListGroupItemProps"
				},
				"label": {
					"name": "label",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Content to be displayed in the list item",
					"parent": "EuiListGroupItemProps"
				},
				"isActive": {
					"name": "isActive",
					"type": "boolean",
					"default": false,
					"description": "Apply styles indicating an item is active",
					"parent": "EuiListGroupItemProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"description": "Apply styles indicating an item is disabled",
					"parent": "EuiListGroupItemProps"
				},
				"href": {
					"name": "href",
					"type": "string",
					"description": "Make the list item label a link. While permitted, href and onClick should not be used together in most cases and may create problems.",
					"parent": "EuiListGroupItemProps"
				},
				"target": {
					"name": "target",
					"type": "string",
					"parent": "EuiListGroupItemProps"
				},
				"rel": {
					"name": "rel",
					"type": "string",
					"parent": "EuiListGroupItemProps"
				},
				"iconType": {
					"name": "iconType",
					"type": "string",
					"description": "Adds EuiIcon of EuiIcon.type",
					"parent": "EuiListGroupItemProps"
				},
				"iconProps": {
					"name": "iconProps",
					"type": "unknown",
					"description": "Further extend the props applied to EuiIcon",
					"parent": "EuiListGroupItemProps"
				},
				"icon": {
					"name": "icon",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Custom node to pass as the icon. Cannot be used in conjunction with iconType and iconProps.",
					"parent": "EuiListGroupItemProps"
				},
				"showToolTip": {
					"name": "showToolTip",
					"type": "boolean",
					"default": false,
					"description": "Display tooltip on list item",
					"parent": "EuiListGroupItemProps"
				},
				"extraAction": {
					"name": "extraAction",
					"type": "unknown",
					"description": "Adds an EuiButtonIcon to the right side of the item; iconType is required; pass alwaysShow if you dont want the default behavior of only showing on hover",
					"parent": "EuiListGroupItemProps"
				},
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"description": "Make the list item label a button. While permitted, href and onClick should not be used together in most cases and may create problems.",
					"parent": "EuiListGroupItemProps"
				},
				"wrapText": {
					"name": "wrapText",
					"type": "boolean",
					"description": "Allow link text to wrap",
					"parent": "EuiListGroupItemProps"
				},
				"buttonRef": {
					"name": "buttonRef",
					"type": "Event",
					"description": "Pass-through ref reference specifically for targeting instances where the item content is rendered as a button",
					"parent": "EuiListGroupItemProps"
				}
			},
			"relativePath": "src/components/list_group/list_group_item.tsx"
		},
		"ElasticEui_EuiPinnableListGroup": {
			"id": "ElasticEui_EuiPinnableListGroup",
			"name": "EuiPinnableListGroup",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiPinnableListGroup",
				"lib": "elasticEui"
			},
			"required": [
				"listItems",
				"onPinClick"
			],
			"props": {
				"listItems": {
					"name": "listItems",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Extends EuiListGroupItemProps, at the very least, expecting a label. See #EuiPinnableListGroupItem",
					"parent": "EuiPinnableListGroupProps"
				},
				"onPinClick": {
					"name": "onPinClick",
					"type": "Event",
					"description": "Shows the pin icon and calls this function on click. Returns item: EuiPinnableListGroupItemProps",
					"parent": "EuiPinnableListGroupProps"
				},
				"pinTitle": {
					"name": "pinTitle",
					"type": "Event",
					"description": "The pin icon needs a title/aria-label for accessibility. It is a function that passes the item back and must return a string (item) => string. Default is Pin item",
					"parent": "EuiPinnableListGroupProps"
				},
				"unpinTitle": {
					"name": "unpinTitle",
					"type": "Event",
					"description": "The unpin icon needs a title/aria-label for accessibility. It is a function that passes the item back and must return a string (item) => string. Default is Unpin item",
					"parent": "EuiPinnableListGroupProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"bordered": {
					"name": "bordered",
					"type": "boolean",
					"description": "Add a border to the list container",
					"parent": "EuiListGroupProps"
				},
				"flush": {
					"name": "flush",
					"type": "boolean",
					"description": "Remove container padding, stretching list items to the edges",
					"parent": "EuiListGroupProps"
				},
				"gutterSize": {
					"name": "gutterSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m"
					],
					"description": "Spacing between list items",
					"parent": "EuiListGroupProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"primary",
						"ghost",
						"text",
						"inherit",
						"subdued"
					],
					"description": "Change the colors of all listItems at once",
					"parent": "EuiListGroupProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs",
						"l"
					],
					"description": "Change the size of all listItems at once",
					"parent": "EuiListGroupProps"
				},
				"maxWidth": {
					"name": "maxWidth",
					"type": "string",
					"description": "Sets the max-width of the page, set to true to use the default size, set to false to not restrict the width, set to a number for a custom width in px, set to a string for a custom width in custom measurement.",
					"parent": "EuiListGroupProps"
				},
				"showToolTips": {
					"name": "showToolTips",
					"type": "boolean",
					"description": "Display tooltips on all list items",
					"parent": "EuiListGroupProps"
				},
				"wrapText": {
					"name": "wrapText",
					"type": "boolean",
					"description": "Allow link text to wrap vs truncated",
					"parent": "EuiListGroupProps"
				},
				"ariaLabelledby": {
					"name": "ariaLabelledby",
					"type": "string",
					"parent": "EuiListGroupProps"
				}
			},
			"relativePath": "src/components/list_group/pinnable_list_group/pinnable_list_group.tsx"
		},
		"ElasticEui_EuiMarkdownEditor": {
			"id": "ElasticEui_EuiMarkdownEditor",
			"name": "EuiMarkdownEditor",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiMarkdownEditor",
				"lib": "elasticEui"
			},
			"required": [
				"onChange",
				"value"
			],
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"placeholder": {
					"name": "placeholder",
					"type": "string",
					"description": "Sets the placeholder of the textarea",
					"parent": "CommonMarkdownEditorProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"description": "callback function when markdown content is modified",
					"parent": "CommonMarkdownEditorProps"
				},
				"value": {
					"name": "value",
					"type": "string",
					"description": "A markdown content",
					"parent": "CommonMarkdownEditorProps"
				},
				"height": {
					"name": "height",
					"type": "string",
					"enum": [
						"full"
					],
					"default": 250,
					"description": "Sets the height in pixels of the editor/preview area or pass full to allow the EuiMarkdownEditor to fill the height of its container. When in full mode the vertical resize is not allowed.",
					"parent": "CommonMarkdownEditorProps"
				},
				"readOnly": {
					"name": "readOnly",
					"type": "boolean",
					"description": "Sets the current display mode to a read-only state. All editing gets resctricted.",
					"parent": "CommonMarkdownEditorProps"
				},
				"maxHeight": {
					"name": "maxHeight",
					"type": "number",
					"default": 500,
					"description": "Sets the max-height in pixels of the editor/preview area. It has no effect when the height is set to full.",
					"parent": "CommonMarkdownEditorProps"
				},
				"editorId": {
					"name": "editorId",
					"type": "string",
					"description": "a unique ID to attach to the textarea. If one isnt provided, a random one will be generated",
					"parent": "CommonMarkdownEditorProps"
				},
				"autoExpandPreview": {
					"name": "autoExpandPreview",
					"type": "boolean",
					"default": false,
					"description": "Automatically adjusts the preview height to fit all the content and avoid a scrollbar.",
					"parent": "CommonMarkdownEditorProps"
				},
				"parsingPluginList": {
					"name": "parsingPluginList",
					"type": "unknown",
					"description": "plugins to identify new syntax and parse it into an AST node",
					"parent": "CommonMarkdownEditorProps"
				},
				"processingPluginList": {
					"name": "processingPluginList",
					"type": "unknown",
					"description": "plugins to process the markdown AST nodes into a React nodes",
					"parent": "CommonMarkdownEditorProps"
				},
				"uiPlugins": {
					"name": "uiPlugins",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "defines UI for plugins buttons in the toolbar as well as any modals or extra UI that provides content to the editor",
					"parent": "CommonMarkdownEditorProps"
				},
				"errors": {
					"name": "errors",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"default": [],
					"description": "errors to bubble up",
					"parent": "CommonMarkdownEditorProps"
				},
				"onParse": {
					"name": "onParse",
					"type": "Event",
					"description": "callback triggered when parsing results are available",
					"parent": "CommonMarkdownEditorProps"
				},
				"initialViewMode": {
					"name": "initialViewMode",
					"type": "string",
					"enum": [
						"editing",
						"viewing"
					],
					"default": "editing as const",
					"description": "initial display mode for the editor",
					"parent": "CommonMarkdownEditorProps"
				},
				"dropHandlers": {
					"name": "dropHandlers",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"default": [],
					"description": "array defining any drag&drop handlers",
					"parent": "CommonMarkdownEditorProps"
				},
				"markdownFormatProps": {
					"name": "markdownFormatProps",
					"type": "unknown",
					"description": "Further extend the props applied to EuiMarkdownFormat",
					"parent": "CommonMarkdownEditorProps"
				},
				"ref": {
					"name": "ref",
					"type": "Event",
					"parent": "RefAttributes"
				}
			},
			"relativePath": "src/components/markdown_editor/markdown_editor.tsx"
		},
		"ElasticEui_getDefaultEuiMarkdownParsingPlugins": {
			"id": "ElasticEui_getDefaultEuiMarkdownParsingPlugins",
			"name": "GetDefaultEuiMarkdownParsingPlugins",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "getDefaultEuiMarkdownParsingPlugins",
				"lib": "elasticEui"
			},
			"props": {
				"exclude": {
					"name": "exclude",
					"type": "array",
					"items": {
						"type": "unknown"
					}
				}
			},
			"relativePath": "src/components/markdown_editor/plugins/markdown_default_plugins/parsing_plugins.ts"
		},
		"ElasticEui_getDefaultEuiMarkdownProcessingPlugins": {
			"id": "ElasticEui_getDefaultEuiMarkdownProcessingPlugins",
			"name": "GetDefaultEuiMarkdownProcessingPlugins",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "getDefaultEuiMarkdownProcessingPlugins",
				"lib": "elasticEui"
			},
			"props": {
				"exclude": {
					"name": "exclude",
					"type": "array",
					"items": {
						"type": "unknown"
					}
				}
			},
			"relativePath": "src/components/markdown_editor/plugins/markdown_default_plugins/processing_plugins.tsx"
		},
		"ElasticEui_getDefaultEuiMarkdownUiPlugins": {
			"id": "ElasticEui_getDefaultEuiMarkdownUiPlugins",
			"name": "GetDefaultEuiMarkdownUiPlugins",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "getDefaultEuiMarkdownUiPlugins",
				"lib": "elasticEui"
			},
			"props": {
				"exclude": {
					"name": "exclude",
					"type": "array",
					"items": {
						"type": "unknown"
					}
				}
			},
			"relativePath": "src/components/markdown_editor/plugins/markdown_default_plugins/ui_plugins.ts"
		},
		"ElasticEui_getDefaultEuiMarkdownPlugins": {
			"id": "ElasticEui_getDefaultEuiMarkdownPlugins",
			"name": "GetDefaultEuiMarkdownPlugins",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "getDefaultEuiMarkdownPlugins",
				"lib": "elasticEui"
			},
			"props": {
				"exclude": {
					"name": "exclude",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "config"
				}
			},
			"relativePath": "src/components/markdown_editor/plugins/markdown_default_plugins/plugins.ts"
		},
		"ElasticEui_EuiMarkdownContext": {
			"id": "ElasticEui_EuiMarkdownContext",
			"name": "EuiMarkdownContext",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiMarkdownContext",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/components/markdown_editor/markdown_context.ts"
		},
		"ElasticEui_EuiMarkdownFormat": {
			"id": "ElasticEui_EuiMarkdownFormat",
			"name": "EuiMarkdownFormat",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiMarkdownFormat",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"accent",
						"success",
						"warning",
						"danger",
						"ghost",
						"inherit",
						"-moz-initial",
						"initial",
						"revert",
						"unset",
						"default",
						"subdued",
						"aliceblue",
						"antiquewhite",
						"aqua",
						"aquamarine",
						"azure",
						"beige",
						"bisque",
						"black",
						"blanchedalmond",
						"blue",
						"blueviolet",
						"brown",
						"burlywood",
						"cadetblue",
						"chartreuse",
						"chocolate",
						"coral",
						"cornflowerblue",
						"cornsilk",
						"crimson",
						"cyan",
						"darkblue",
						"darkcyan",
						"darkgoldenrod",
						"darkgray",
						"darkgreen",
						"darkgrey",
						"darkkhaki",
						"darkmagenta",
						"darkolivegreen",
						"darkorange",
						"darkorchid",
						"darkred",
						"darksalmon",
						"darkseagreen",
						"darkslateblue",
						"darkslategray",
						"darkslategrey",
						"darkturquoise",
						"darkviolet",
						"deeppink",
						"deepskyblue",
						"dimgray",
						"dimgrey",
						"dodgerblue",
						"firebrick",
						"floralwhite",
						"forestgreen",
						"fuchsia",
						"gainsboro",
						"ghostwhite",
						"gold",
						"goldenrod",
						"gray",
						"green",
						"greenyellow",
						"grey",
						"honeydew",
						"hotpink",
						"indianred",
						"indigo",
						"ivory",
						"khaki",
						"lavender",
						"lavenderblush",
						"lawngreen",
						"lemonchiffon",
						"lightblue",
						"lightcoral",
						"lightcyan",
						"lightgoldenrodyellow",
						"lightgray",
						"lightgreen",
						"lightgrey",
						"lightpink",
						"lightsalmon",
						"lightseagreen",
						"lightskyblue",
						"lightslategray",
						"lightslategrey",
						"lightsteelblue",
						"lightyellow",
						"lime",
						"limegreen",
						"linen",
						"magenta",
						"maroon",
						"mediumaquamarine",
						"mediumblue",
						"mediumorchid",
						"mediumpurple",
						"mediumseagreen",
						"mediumslateblue",
						"mediumspringgreen",
						"mediumturquoise",
						"mediumvioletred",
						"midnightblue",
						"mintcream",
						"mistyrose",
						"moccasin",
						"navajowhite",
						"navy",
						"oldlace",
						"olive",
						"olivedrab",
						"orange",
						"orangered",
						"orchid",
						"palegoldenrod",
						"palegreen",
						"paleturquoise",
						"palevioletred",
						"papayawhip",
						"peachpuff",
						"peru",
						"pink",
						"plum",
						"powderblue",
						"purple",
						"rebeccapurple",
						"red",
						"rosybrown",
						"royalblue",
						"saddlebrown",
						"salmon",
						"sandybrown",
						"seagreen",
						"seashell",
						"sienna",
						"silver",
						"skyblue",
						"slateblue",
						"slategray",
						"slategrey",
						"snow",
						"springgreen",
						"steelblue",
						"tan",
						"teal",
						"thistle",
						"tomato",
						"transparent",
						"turquoise",
						"violet",
						"wheat",
						"white",
						"whitesmoke",
						"yellow",
						"yellowgreen",
						"ActiveBorder",
						"ActiveCaption",
						"AppWorkspace",
						"Background",
						"ButtonFace",
						"ButtonHighlight",
						"ButtonShadow",
						"ButtonText",
						"CaptionText",
						"GrayText",
						"Highlight",
						"HighlightText",
						"InactiveBorder",
						"InactiveCaption",
						"InactiveCaptionText",
						"InfoBackground",
						"InfoText",
						"Menu",
						"MenuText",
						"Scrollbar",
						"ThreeDDarkShadow",
						"ThreeDFace",
						"ThreeDHighlight",
						"ThreeDLightShadow",
						"ThreeDShadow",
						"Window",
						"WindowFrame",
						"WindowText",
						"currentcolor"
					],
					"description": "Any of our named colors or a hex, rgb or rgba value.",
					"parent": "EuiTextProps"
				},
				"textAlign": {
					"name": "textAlign",
					"type": "string",
					"enum": [
						"left",
						"right",
						"center"
					],
					"parent": "EuiTextProps"
				},
				"grow": {
					"name": "grow",
					"type": "boolean",
					"parent": "EuiTextProps"
				},
				"parsingPluginList": {
					"name": "parsingPluginList",
					"type": "unknown",
					"description": "array of unified plugins to parse content into an AST",
					"parent": "EuiMarkdownFormatProps"
				},
				"processingPluginList": {
					"name": "processingPluginList",
					"type": "unknown",
					"description": "array of unified plugins to convert the AST into a ReactNode",
					"parent": "EuiMarkdownFormatProps"
				},
				"textSize": {
					"name": "textSize",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs",
						"relative"
					],
					"default": "m",
					"description": "Determines the text size. Choose relative to control the font-size based on the value of a parent container.",
					"parent": "EuiMarkdownFormatProps"
				}
			},
			"relativePath": "src/components/markdown_editor/markdown_format.tsx"
		},
		"ElasticEui_EuiMark": {
			"id": "ElasticEui_EuiMark",
			"name": "EuiMark",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiMark",
				"lib": "elasticEui"
			},
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"hasScreenReaderHelpText": {
					"name": "hasScreenReaderHelpText",
					"type": "boolean",
					"default": false,
					"description": "Set to false to remove the CSS :before and :after screen reader helper text",
					"parent": "EuiMarkProps"
				}
			},
			"relativePath": "src/components/mark/mark.tsx"
		},
		"ElasticEui_EuiConfirmModal": {
			"id": "ElasticEui_EuiConfirmModal",
			"name": "EuiConfirmModal",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiConfirmModal",
				"lib": "elasticEui"
			},
			"required": [
				"onCancel"
			],
			"props": {
				"children": {
					"name": "children",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "ReactNode to render as this components content",
					"parent": "EuiConfirmModalProps"
				},
				"title": {
					"name": "title",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"parent": "EuiConfirmModalProps"
				},
				"cancelButtonText": {
					"name": "cancelButtonText",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"parent": "EuiConfirmModalProps"
				},
				"confirmButtonText": {
					"name": "confirmButtonText",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"parent": "EuiConfirmModalProps"
				},
				"onCancel": {
					"name": "onCancel",
					"type": "Event",
					"parent": "EuiConfirmModalProps"
				},
				"onConfirm": {
					"name": "onConfirm",
					"type": "Event",
					"parent": "EuiConfirmModalProps"
				},
				"confirmButtonDisabled": {
					"name": "confirmButtonDisabled",
					"type": "boolean",
					"parent": "EuiConfirmModalProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "EuiConfirmModalProps"
				},
				"defaultFocusedButton": {
					"name": "defaultFocusedButton",
					"type": "string",
					"enum": [
						"confirm",
						"cancel"
					],
					"parent": "EuiConfirmModalProps"
				},
				"buttonColor": {
					"name": "buttonColor",
					"type": "string",
					"enum": [
						"primary",
						"accent",
						"success",
						"warning",
						"danger",
						"ghost",
						"text"
					],
					"default": "primary",
					"parent": "EuiConfirmModalProps"
				},
				"maxWidth": {
					"name": "maxWidth",
					"type": "string",
					"description": "Sets the max-width of the modal. Set to true to use the default (euiBreakpoints m), set to false to not restrict the width, set to a number for a custom width in px, set to a string for a custom width in custom measurement.",
					"parent": "EuiConfirmModalProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"description": "Passes isLoading prop to the confirm button",
					"parent": "EuiConfirmModalProps"
				}
			},
			"relativePath": "src/components/modal/confirm_modal.tsx"
		},
		"ElasticEui_EUI_MODAL_CONFIRM_BUTTON": {
			"id": "ElasticEui_EUI_MODAL_CONFIRM_BUTTON",
			"name": "ConfirmButton",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EUI_MODAL_CONFIRM_BUTTON",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/components/modal/confirm_modal.tsx"
		},
		"ElasticEui_EUI_MODAL_CANCEL_BUTTON": {
			"id": "ElasticEui_EUI_MODAL_CANCEL_BUTTON",
			"name": "CancelButton",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EUI_MODAL_CANCEL_BUTTON",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/components/modal/confirm_modal.tsx"
		},
		"ElasticEui_EuiModal": {
			"id": "ElasticEui_EuiModal",
			"name": "EuiModal",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiModal",
				"lib": "elasticEui"
			},
			"required": [
				"onClose"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "EuiModalProps"
				},
				"children": {
					"name": "children",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "ReactNode to render as this components content",
					"parent": "EuiModalProps"
				},
				"onClose": {
					"name": "onClose",
					"type": "Event",
					"parent": "EuiModalProps"
				},
				"maxWidth": {
					"name": "maxWidth",
					"type": "boolean",
					"default": true,
					"description": "Sets the max-width of the modal. Set to true to use the default (euiBreakpoints m), set to false to not restrict the width, set to a number for a custom width in px, set to a string for a custom width in custom measurement.",
					"parent": "EuiModalProps"
				},
				"initialFocus": {
					"name": "initialFocus",
					"type": "string",
					"description": "Specifies what element should initially have focus. Can be a DOM node, or a selector string (which will be passed to document.querySelector() to find the DOM node), or a function that returns a DOM node.",
					"parent": "EuiModalProps"
				}
			},
			"relativePath": "src/components/modal/modal.tsx"
		},
		"ElasticEui_EuiModalFooter": {
			"id": "ElasticEui_EuiModalFooter",
			"name": "EuiModalFooter",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiModalFooter",
				"lib": "elasticEui"
			},
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/modal/modal_footer.tsx"
		},
		"ElasticEui_EuiModalHeader": {
			"id": "ElasticEui_EuiModalHeader",
			"name": "EuiModalHeader",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiModalHeader",
				"lib": "elasticEui"
			},
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/modal/modal_header.tsx"
		},
		"ElasticEui_EuiModalBody": {
			"id": "ElasticEui_EuiModalBody",
			"name": "EuiModalBody",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiModalBody",
				"lib": "elasticEui"
			},
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/modal/modal_body.tsx"
		},
		"ElasticEui_EuiModalHeaderTitle": {
			"id": "ElasticEui_EuiModalHeaderTitle",
			"name": "EuiModalHeaderTitle",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiModalHeaderTitle",
				"lib": "elasticEui"
			},
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/modal/modal_header_title.tsx"
		},
		"ElasticEui_EuiMutationObserver": {
			"id": "ElasticEui_EuiMutationObserver",
			"name": "EuiMutationObserver",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiMutationObserver",
				"lib": "elasticEui"
			},
			"required": [
				"onMutation"
			],
			"props": {
				"children": {
					"name": "children",
					"type": "Event",
					"description": "ReactNode to render as this components content",
					"parent": "EuiMutationObserverProps"
				},
				"onMutation": {
					"name": "onMutation",
					"type": "Event",
					"parent": "EuiMutationObserverProps"
				},
				"observerOptions": {
					"name": "observerOptions",
					"type": "unknown",
					"parent": "EuiMutationObserverProps"
				}
			},
			"relativePath": "src/components/observer/mutation_observer/mutation_observer.ts"
		},
		"ElasticEui_useMutationObserver": {
			"id": "ElasticEui_useMutationObserver",
			"name": "UseMutationObserver",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useMutationObserver",
				"lib": "elasticEui"
			},
			"required": [
				"attributes",
				"classList",
				"className",
				"clientHeight",
				"clientLeft",
				"clientTop",
				"clientWidth",
				"id",
				"localName",
				"namespaceURI",
				"onfullscreenchange",
				"onfullscreenerror",
				"outerHTML",
				"ownerDocument",
				"part",
				"prefix",
				"scrollHeight",
				"scrollLeft",
				"scrollTop",
				"scrollWidth",
				"shadowRoot",
				"slot",
				"tagName",
				"attachShadow",
				"closest",
				"getAttribute",
				"getAttributeNS",
				"getAttributeNames",
				"getAttributeNode",
				"getAttributeNodeNS",
				"getBoundingClientRect",
				"getClientRects",
				"getElementsByClassName",
				"getElementsByTagName",
				"getElementsByTagNameNS",
				"hasAttribute",
				"hasAttributeNS",
				"hasAttributes",
				"hasPointerCapture",
				"insertAdjacentElement",
				"insertAdjacentHTML",
				"insertAdjacentText",
				"matches",
				"releasePointerCapture",
				"removeAttribute",
				"removeAttributeNS",
				"removeAttributeNode",
				"requestFullscreen",
				"requestPointerLock",
				"scroll",
				"scrollBy",
				"scrollIntoView",
				"scrollTo",
				"setAttribute",
				"setAttributeNS",
				"setAttributeNode",
				"setAttributeNodeNS",
				"setPointerCapture",
				"toggleAttribute",
				"webkitMatchesSelector",
				"addEventListener",
				"removeEventListener",
				"baseURI",
				"childNodes",
				"firstChild",
				"isConnected",
				"lastChild",
				"nextSibling",
				"nodeName",
				"nodeType",
				"nodeValue",
				"parentElement",
				"parentNode",
				"previousSibling",
				"textContent",
				"appendChild",
				"cloneNode",
				"compareDocumentPosition",
				"contains",
				"getRootNode",
				"hasChildNodes",
				"insertBefore",
				"isDefaultNamespace",
				"isEqualNode",
				"isSameNode",
				"lookupNamespaceURI",
				"lookupPrefix",
				"normalize",
				"removeChild",
				"replaceChild",
				"ATTRIBUTE_NODE",
				"CDATA_SECTION_NODE",
				"COMMENT_NODE",
				"DOCUMENT_FRAGMENT_NODE",
				"DOCUMENT_NODE",
				"DOCUMENT_POSITION_CONTAINED_BY",
				"DOCUMENT_POSITION_CONTAINS",
				"DOCUMENT_POSITION_DISCONNECTED",
				"DOCUMENT_POSITION_FOLLOWING",
				"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
				"DOCUMENT_POSITION_PRECEDING",
				"DOCUMENT_TYPE_NODE",
				"ELEMENT_NODE",
				"ENTITY_NODE",
				"ENTITY_REFERENCE_NODE",
				"NOTATION_NODE",
				"PROCESSING_INSTRUCTION_NODE",
				"TEXT_NODE",
				"dispatchEvent",
				"ariaAtomic",
				"ariaAutoComplete",
				"ariaBusy",
				"ariaChecked",
				"ariaColCount",
				"ariaColIndex",
				"ariaColSpan",
				"ariaCurrent",
				"ariaDisabled",
				"ariaExpanded",
				"ariaHasPopup",
				"ariaHidden",
				"ariaKeyShortcuts",
				"ariaLabel",
				"ariaLevel",
				"ariaLive",
				"ariaModal",
				"ariaMultiLine",
				"ariaMultiSelectable",
				"ariaOrientation",
				"ariaPlaceholder",
				"ariaPosInSet",
				"ariaPressed",
				"ariaReadOnly",
				"ariaRequired",
				"ariaRoleDescription",
				"ariaRowCount",
				"ariaRowIndex",
				"ariaRowSpan",
				"ariaSelected",
				"ariaSetSize",
				"ariaSort",
				"ariaValueMax",
				"ariaValueMin",
				"ariaValueNow",
				"ariaValueText",
				"animate",
				"getAnimations",
				"after",
				"before",
				"remove",
				"replaceWith",
				"innerHTML",
				"nextElementSibling",
				"previousElementSibling",
				"childElementCount",
				"children",
				"firstElementChild",
				"lastElementChild",
				"append",
				"prepend",
				"querySelector",
				"querySelectorAll",
				"replaceChildren",
				"assignedSlot"
			],
			"props": {
				"attributes": {
					"name": "attributes",
					"type": "unknown",
					"parent": "Element"
				},
				"classList": {
					"name": "classList",
					"type": "unknown",
					"description": "Allows for manipulation of elements class content attribute as a set of whitespace-separated tokens through a DOMTokenList object.",
					"parent": "Element"
				},
				"className": {
					"name": "className",
					"type": "string",
					"description": "Returns the value of elements class content attribute. Can be set to change it.",
					"parent": "Element"
				},
				"clientHeight": {
					"name": "clientHeight",
					"type": "number",
					"parent": "Element"
				},
				"clientLeft": {
					"name": "clientLeft",
					"type": "number",
					"parent": "Element"
				},
				"clientTop": {
					"name": "clientTop",
					"type": "number",
					"parent": "Element"
				},
				"clientWidth": {
					"name": "clientWidth",
					"type": "number",
					"parent": "Element"
				},
				"id": {
					"name": "id",
					"type": "string",
					"description": "Returns the value of elements id content attribute. Can be set to change it.",
					"parent": "Element"
				},
				"localName": {
					"name": "localName",
					"type": "string",
					"description": "Returns the local name.",
					"parent": "Element"
				},
				"namespaceURI": {
					"name": "namespaceURI",
					"type": "string",
					"description": "Returns the namespace.",
					"parent": "Element"
				},
				"onfullscreenchange": {
					"name": "onfullscreenchange",
					"type": "Event",
					"parent": "Element"
				},
				"onfullscreenerror": {
					"name": "onfullscreenerror",
					"type": "Event",
					"parent": "Element"
				},
				"outerHTML": {
					"name": "outerHTML",
					"type": "string",
					"parent": "Element"
				},
				"ownerDocument": {
					"name": "ownerDocument",
					"type": "unknown",
					"description": "Returns the node document. Returns null for documents.",
					"parent": "Element"
				},
				"part": {
					"name": "part",
					"type": "unknown",
					"parent": "Element"
				},
				"prefix": {
					"name": "prefix",
					"type": "string",
					"description": "Returns the namespace prefix.",
					"parent": "Element"
				},
				"scrollHeight": {
					"name": "scrollHeight",
					"type": "number",
					"parent": "Element"
				},
				"scrollLeft": {
					"name": "scrollLeft",
					"type": "number",
					"parent": "Element"
				},
				"scrollTop": {
					"name": "scrollTop",
					"type": "number",
					"parent": "Element"
				},
				"scrollWidth": {
					"name": "scrollWidth",
					"type": "number",
					"parent": "Element"
				},
				"shadowRoot": {
					"name": "shadowRoot",
					"type": "unknown",
					"description": "Returns elements shadow root, if any, and if shadow roots mode is open, and null otherwise.",
					"parent": "Element"
				},
				"slot": {
					"name": "slot",
					"type": "string",
					"description": "Returns the value of elements slot content attribute. Can be set to change it.",
					"parent": "Element"
				},
				"tagName": {
					"name": "tagName",
					"type": "string",
					"description": "Returns the HTML-uppercased qualified name.",
					"parent": "Element"
				},
				"attachShadow": {
					"name": "attachShadow",
					"type": "Event",
					"description": "Creates a shadow root for element and returns it.",
					"parent": "Element"
				},
				"closest": {
					"name": "closest",
					"type": "unknown",
					"description": "Returns the first (starting at element) inclusive ancestor that matches selectors, and null otherwise.",
					"parent": "Element"
				},
				"getAttribute": {
					"name": "getAttribute",
					"type": "Event",
					"description": "Returns elements first attribute whose qualified name is qualifiedName, and null if there is no such attribute otherwise.",
					"parent": "Element"
				},
				"getAttributeNS": {
					"name": "getAttributeNS",
					"type": "Event",
					"description": "Returns elements attribute whose namespace is namespace and local name is localName, and null if there is no such attribute otherwise.",
					"parent": "Element"
				},
				"getAttributeNames": {
					"name": "getAttributeNames",
					"type": "Event",
					"description": "Returns the qualified names of all elements attributes. Can contain duplicates.",
					"parent": "Element"
				},
				"getAttributeNode": {
					"name": "getAttributeNode",
					"type": "Event",
					"parent": "Element"
				},
				"getAttributeNodeNS": {
					"name": "getAttributeNodeNS",
					"type": "Event",
					"parent": "Element"
				},
				"getBoundingClientRect": {
					"name": "getBoundingClientRect",
					"type": "Event",
					"parent": "Element"
				},
				"getClientRects": {
					"name": "getClientRects",
					"type": "Event",
					"parent": "Element"
				},
				"getElementsByClassName": {
					"name": "getElementsByClassName",
					"type": "Event",
					"description": "Returns a HTMLCollection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. The classNames argument is interpreted as a space-separated list of classes.",
					"parent": "Element"
				},
				"getElementsByTagName": {
					"name": "getElementsByTagName",
					"type": "unknown",
					"parent": "Element"
				},
				"getElementsByTagNameNS": {
					"name": "getElementsByTagNameNS",
					"type": "unknown",
					"parent": "Element"
				},
				"hasAttribute": {
					"name": "hasAttribute",
					"type": "Event",
					"description": "Returns true if element has an attribute whose qualified name is qualifiedName, and false otherwise.",
					"parent": "Element"
				},
				"hasAttributeNS": {
					"name": "hasAttributeNS",
					"type": "Event",
					"description": "Returns true if element has an attribute whose namespace is namespace and local name is localName.",
					"parent": "Element"
				},
				"hasAttributes": {
					"name": "hasAttributes",
					"type": "Event",
					"description": "Returns true if element has attributes, and false otherwise.",
					"parent": "Element"
				},
				"hasPointerCapture": {
					"name": "hasPointerCapture",
					"type": "Event",
					"parent": "Element"
				},
				"insertAdjacentElement": {
					"name": "insertAdjacentElement",
					"type": "Event",
					"parent": "Element"
				},
				"insertAdjacentHTML": {
					"name": "insertAdjacentHTML",
					"type": "Event",
					"parent": "Element"
				},
				"insertAdjacentText": {
					"name": "insertAdjacentText",
					"type": "Event",
					"parent": "Element"
				},
				"matches": {
					"name": "matches",
					"type": "Event",
					"description": "Returns true if matching selectors against elements root yields element, and false otherwise.",
					"parent": "Element"
				},
				"releasePointerCapture": {
					"name": "releasePointerCapture",
					"type": "Event",
					"parent": "Element"
				},
				"removeAttribute": {
					"name": "removeAttribute",
					"type": "Event",
					"description": "Removes elements first attribute whose qualified name is qualifiedName.",
					"parent": "Element"
				},
				"removeAttributeNS": {
					"name": "removeAttributeNS",
					"type": "Event",
					"description": "Removes elements attribute whose namespace is namespace and local name is localName.",
					"parent": "Element"
				},
				"removeAttributeNode": {
					"name": "removeAttributeNode",
					"type": "Event",
					"parent": "Element"
				},
				"requestFullscreen": {
					"name": "requestFullscreen",
					"type": "Event",
					"description": "Displays element fullscreen and resolves promise when done.  When supplied, optionss navigationUI member indicates whether showing navigation UI while in fullscreen is preferred or not. If set to show, navigation simplicity is preferred over screen space, and if set to hide, more screen space is preferred. User agents are always free to honor user preference over the applications. The default value auto indicates no application preference.",
					"parent": "Element"
				},
				"requestPointerLock": {
					"name": "requestPointerLock",
					"type": "Event",
					"parent": "Element"
				},
				"scroll": {
					"name": "scroll",
					"type": "unknown",
					"parent": "Element"
				},
				"scrollBy": {
					"name": "scrollBy",
					"type": "unknown",
					"parent": "Element"
				},
				"scrollIntoView": {
					"name": "scrollIntoView",
					"type": "Event",
					"parent": "Element"
				},
				"scrollTo": {
					"name": "scrollTo",
					"type": "unknown",
					"parent": "Element"
				},
				"setAttribute": {
					"name": "setAttribute",
					"type": "Event",
					"description": "Sets the value of elements first attribute whose qualified name is qualifiedName to value.",
					"parent": "Element"
				},
				"setAttributeNS": {
					"name": "setAttributeNS",
					"type": "Event",
					"description": "Sets the value of elements attribute whose namespace is namespace and local name is localName to value.",
					"parent": "Element"
				},
				"setAttributeNode": {
					"name": "setAttributeNode",
					"type": "Event",
					"parent": "Element"
				},
				"setAttributeNodeNS": {
					"name": "setAttributeNodeNS",
					"type": "Event",
					"parent": "Element"
				},
				"setPointerCapture": {
					"name": "setPointerCapture",
					"type": "Event",
					"parent": "Element"
				},
				"toggleAttribute": {
					"name": "toggleAttribute",
					"type": "Event",
					"description": "If force is not given, toggles qualifiedName, removing it if it is present and adding it if it is not present. If force is true, adds qualifiedName. If force is false, removes qualifiedName.  Returns true if qualifiedName is now present, and false otherwise.",
					"parent": "Element"
				},
				"webkitMatchesSelector": {
					"name": "webkitMatchesSelector",
					"type": "Event",
					"parent": "Element",
					"description": "This is a legacy alias of `matches`."
				},
				"addEventListener": {
					"name": "addEventListener",
					"type": "Event",
					"description": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.  The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as optionss capture.  When set to true, optionss capture prevents callback from being invoked when the events eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when events eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if events eventPhase attribute value is AT_TARGET.  When set to true, optionss passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.  When set to true, optionss once indicates that the callback will only be invoked once after which the event listener will be removed.  If an AbortSignal is passed for optionss signal, then the event listener will be removed when signal is aborted.  The event listener is appended to targets event listener list and is not appended if it has the same type, callback, and capture.",
					"parent": "Element"
				},
				"removeEventListener": {
					"name": "removeEventListener",
					"type": "Event",
					"description": "Removes the event listener in targets event listener list with the same type, callback, and options.",
					"parent": "Element"
				},
				"baseURI": {
					"name": "baseURI",
					"type": "string",
					"description": "Returns nodes node documents document base URL.",
					"parent": "Node"
				},
				"childNodes": {
					"name": "childNodes",
					"type": "unknown",
					"description": "Returns the children.",
					"parent": "Node"
				},
				"firstChild": {
					"name": "firstChild",
					"type": "unknown",
					"description": "Returns the first child.",
					"parent": "Node"
				},
				"isConnected": {
					"name": "isConnected",
					"type": "boolean",
					"description": "Returns true if node is connected and false otherwise.",
					"parent": "Node"
				},
				"lastChild": {
					"name": "lastChild",
					"type": "unknown",
					"description": "Returns the last child.",
					"parent": "Node"
				},
				"nextSibling": {
					"name": "nextSibling",
					"type": "unknown",
					"description": "Returns the next sibling.",
					"parent": "Node"
				},
				"nodeName": {
					"name": "nodeName",
					"type": "string",
					"description": "Returns a string appropriate for the type of node.",
					"parent": "Node"
				},
				"nodeType": {
					"name": "nodeType",
					"type": "number",
					"description": "Returns the type of node.",
					"parent": "Node"
				},
				"nodeValue": {
					"name": "nodeValue",
					"type": "string",
					"parent": "Node"
				},
				"parentElement": {
					"name": "parentElement",
					"type": "Node",
					"description": "Returns the parent element.",
					"parent": "Node"
				},
				"parentNode": {
					"name": "parentNode",
					"type": "unknown",
					"description": "Returns the parent.",
					"parent": "Node"
				},
				"previousSibling": {
					"name": "previousSibling",
					"type": "unknown",
					"description": "Returns the previous sibling.",
					"parent": "Node"
				},
				"textContent": {
					"name": "textContent",
					"type": "string",
					"parent": "Node"
				},
				"appendChild": {
					"name": "appendChild",
					"type": "Event",
					"parent": "Node"
				},
				"cloneNode": {
					"name": "cloneNode",
					"type": "Event",
					"description": "Returns a copy of node. If deep is true, the copy also includes the nodes descendants.",
					"parent": "Node"
				},
				"compareDocumentPosition": {
					"name": "compareDocumentPosition",
					"type": "Event",
					"description": "Returns a bitmask indicating the position of other relative to node.",
					"parent": "Node"
				},
				"contains": {
					"name": "contains",
					"type": "Event",
					"description": "Returns true if other is an inclusive descendant of node, and false otherwise.",
					"parent": "Node"
				},
				"getRootNode": {
					"name": "getRootNode",
					"type": "Event",
					"description": "Returns nodes root.",
					"parent": "Node"
				},
				"hasChildNodes": {
					"name": "hasChildNodes",
					"type": "Event",
					"description": "Returns whether node has children.",
					"parent": "Node"
				},
				"insertBefore": {
					"name": "insertBefore",
					"type": "Event",
					"parent": "Node"
				},
				"isDefaultNamespace": {
					"name": "isDefaultNamespace",
					"type": "Event",
					"parent": "Node"
				},
				"isEqualNode": {
					"name": "isEqualNode",
					"type": "Event",
					"description": "Returns whether node and otherNode have the same properties.",
					"parent": "Node"
				},
				"isSameNode": {
					"name": "isSameNode",
					"type": "Event",
					"parent": "Node"
				},
				"lookupNamespaceURI": {
					"name": "lookupNamespaceURI",
					"type": "Event",
					"parent": "Node"
				},
				"lookupPrefix": {
					"name": "lookupPrefix",
					"type": "Event",
					"parent": "Node"
				},
				"normalize": {
					"name": "normalize",
					"type": "Event",
					"description": "Removes empty exclusive Text nodes and concatenates the data of remaining contiguous exclusive Text nodes into the first of their nodes.",
					"parent": "Node"
				},
				"removeChild": {
					"name": "removeChild",
					"type": "Event",
					"parent": "Node"
				},
				"replaceChild": {
					"name": "replaceChild",
					"type": "Event",
					"parent": "Node"
				},
				"ATTRIBUTE_NODE": {
					"name": "ATTRIBUTE_NODE",
					"type": "number",
					"parent": "Node"
				},
				"CDATA_SECTION_NODE": {
					"name": "CDATA_SECTION_NODE",
					"type": "number",
					"description": "node is a CDATASection node.",
					"parent": "Node"
				},
				"COMMENT_NODE": {
					"name": "COMMENT_NODE",
					"type": "number",
					"description": "node is a Comment node.",
					"parent": "Node"
				},
				"DOCUMENT_FRAGMENT_NODE": {
					"name": "DOCUMENT_FRAGMENT_NODE",
					"type": "number",
					"description": "node is a DocumentFragment node.",
					"parent": "Node"
				},
				"DOCUMENT_NODE": {
					"name": "DOCUMENT_NODE",
					"type": "number",
					"description": "node is a document.",
					"parent": "Node"
				},
				"DOCUMENT_POSITION_CONTAINED_BY": {
					"name": "DOCUMENT_POSITION_CONTAINED_BY",
					"type": "number",
					"description": "Set when other is a descendant of node.",
					"parent": "Node"
				},
				"DOCUMENT_POSITION_CONTAINS": {
					"name": "DOCUMENT_POSITION_CONTAINS",
					"type": "number",
					"description": "Set when other is an ancestor of node.",
					"parent": "Node"
				},
				"DOCUMENT_POSITION_DISCONNECTED": {
					"name": "DOCUMENT_POSITION_DISCONNECTED",
					"type": "number",
					"description": "Set when node and other are not in the same tree.",
					"parent": "Node"
				},
				"DOCUMENT_POSITION_FOLLOWING": {
					"name": "DOCUMENT_POSITION_FOLLOWING",
					"type": "number",
					"description": "Set when other is following node.",
					"parent": "Node"
				},
				"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
					"name": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
					"type": "number",
					"parent": "Node"
				},
				"DOCUMENT_POSITION_PRECEDING": {
					"name": "DOCUMENT_POSITION_PRECEDING",
					"type": "number",
					"description": "Set when other is preceding node.",
					"parent": "Node"
				},
				"DOCUMENT_TYPE_NODE": {
					"name": "DOCUMENT_TYPE_NODE",
					"type": "number",
					"description": "node is a doctype.",
					"parent": "Node"
				},
				"ELEMENT_NODE": {
					"name": "ELEMENT_NODE",
					"type": "number",
					"description": "node is an element.",
					"parent": "Node"
				},
				"ENTITY_NODE": {
					"name": "ENTITY_NODE",
					"type": "number",
					"parent": "Node"
				},
				"ENTITY_REFERENCE_NODE": {
					"name": "ENTITY_REFERENCE_NODE",
					"type": "number",
					"parent": "Node"
				},
				"NOTATION_NODE": {
					"name": "NOTATION_NODE",
					"type": "number",
					"parent": "Node"
				},
				"PROCESSING_INSTRUCTION_NODE": {
					"name": "PROCESSING_INSTRUCTION_NODE",
					"type": "number",
					"description": "node is a ProcessingInstruction node.",
					"parent": "Node"
				},
				"TEXT_NODE": {
					"name": "TEXT_NODE",
					"type": "number",
					"description": "node is a Text node.",
					"parent": "Node"
				},
				"dispatchEvent": {
					"name": "dispatchEvent",
					"type": "Event",
					"description": "Dispatches a synthetic event event to target and returns true if either events cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.",
					"parent": "EventTarget"
				},
				"ariaAtomic": {
					"name": "ariaAtomic",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaAutoComplete": {
					"name": "ariaAutoComplete",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaBusy": {
					"name": "ariaBusy",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaChecked": {
					"name": "ariaChecked",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaColCount": {
					"name": "ariaColCount",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaColIndex": {
					"name": "ariaColIndex",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaColSpan": {
					"name": "ariaColSpan",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaCurrent": {
					"name": "ariaCurrent",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaDisabled": {
					"name": "ariaDisabled",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaExpanded": {
					"name": "ariaExpanded",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaHasPopup": {
					"name": "ariaHasPopup",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaHidden": {
					"name": "ariaHidden",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaKeyShortcuts": {
					"name": "ariaKeyShortcuts",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaLabel": {
					"name": "ariaLabel",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaLevel": {
					"name": "ariaLevel",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaLive": {
					"name": "ariaLive",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaModal": {
					"name": "ariaModal",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaMultiLine": {
					"name": "ariaMultiLine",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaMultiSelectable": {
					"name": "ariaMultiSelectable",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaOrientation": {
					"name": "ariaOrientation",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaPlaceholder": {
					"name": "ariaPlaceholder",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaPosInSet": {
					"name": "ariaPosInSet",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaPressed": {
					"name": "ariaPressed",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaReadOnly": {
					"name": "ariaReadOnly",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaRequired": {
					"name": "ariaRequired",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaRoleDescription": {
					"name": "ariaRoleDescription",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaRowCount": {
					"name": "ariaRowCount",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaRowIndex": {
					"name": "ariaRowIndex",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaRowSpan": {
					"name": "ariaRowSpan",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaSelected": {
					"name": "ariaSelected",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaSetSize": {
					"name": "ariaSetSize",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaSort": {
					"name": "ariaSort",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaValueMax": {
					"name": "ariaValueMax",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaValueMin": {
					"name": "ariaValueMin",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaValueNow": {
					"name": "ariaValueNow",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaValueText": {
					"name": "ariaValueText",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"animate": {
					"name": "animate",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Animatable"
				},
				"getAnimations": {
					"name": "getAnimations",
					"type": "Event",
					"parent": "Animatable"
				},
				"after": {
					"name": "after",
					"type": "Event",
					"description": "Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.  Throws a HierarchyRequestError DOMException if the constraints of the node tree are violated.",
					"parent": "ChildNode"
				},
				"before": {
					"name": "before",
					"type": "Event",
					"description": "Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.  Throws a HierarchyRequestError DOMException if the constraints of the node tree are violated.",
					"parent": "ChildNode"
				},
				"remove": {
					"name": "remove",
					"type": "Event",
					"description": "Removes node.",
					"parent": "ChildNode"
				},
				"replaceWith": {
					"name": "replaceWith",
					"type": "Event",
					"description": "Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.  Throws a HierarchyRequestError DOMException if the constraints of the node tree are violated.",
					"parent": "ChildNode"
				},
				"innerHTML": {
					"name": "innerHTML",
					"type": "string",
					"parent": "InnerHTML"
				},
				"nextElementSibling": {
					"name": "nextElementSibling",
					"type": "Node",
					"description": "Returns the first following sibling that is an element, and null otherwise.",
					"parent": "NonDocumentTypeChildNode"
				},
				"previousElementSibling": {
					"name": "previousElementSibling",
					"type": "Node",
					"description": "Returns the first preceding sibling that is an element, and null otherwise.",
					"parent": "NonDocumentTypeChildNode"
				},
				"childElementCount": {
					"name": "childElementCount",
					"type": "number",
					"parent": "ParentNode"
				},
				"children": {
					"name": "children",
					"type": "unknown",
					"description": "Returns the child elements.",
					"parent": "ParentNode"
				},
				"firstElementChild": {
					"name": "firstElementChild",
					"type": "Node",
					"description": "Returns the first child that is an element, and null otherwise.",
					"parent": "ParentNode"
				},
				"lastElementChild": {
					"name": "lastElementChild",
					"type": "Node",
					"description": "Returns the last child that is an element, and null otherwise.",
					"parent": "ParentNode"
				},
				"append": {
					"name": "append",
					"type": "Event",
					"description": "Inserts nodes after the last child of node, while replacing strings in nodes with equivalent Text nodes.  Throws a HierarchyRequestError DOMException if the constraints of the node tree are violated.",
					"parent": "ParentNode"
				},
				"prepend": {
					"name": "prepend",
					"type": "Event",
					"description": "Inserts nodes before the first child of node, while replacing strings in nodes with equivalent Text nodes.  Throws a HierarchyRequestError DOMException if the constraints of the node tree are violated.",
					"parent": "ParentNode"
				},
				"querySelector": {
					"name": "querySelector",
					"type": "unknown",
					"description": "Returns the first element that is a descendant of node that matches selectors.",
					"parent": "ParentNode"
				},
				"querySelectorAll": {
					"name": "querySelectorAll",
					"type": "unknown",
					"description": "Returns all element descendants of node that match selectors.",
					"parent": "ParentNode"
				},
				"replaceChildren": {
					"name": "replaceChildren",
					"type": "Event",
					"description": "Replace all children of node with nodes, while replacing strings in nodes with equivalent Text nodes.  Throws a HierarchyRequestError DOMException if the constraints of the node tree are violated.",
					"parent": "ParentNode"
				},
				"assignedSlot": {
					"name": "assignedSlot",
					"type": "unknown",
					"parent": "Slottable"
				}
			},
			"relativePath": "src/components/observer/mutation_observer/mutation_observer.ts"
		},
		"ElasticEui_EuiNotificationEvent": {
			"id": "ElasticEui_EuiNotificationEvent",
			"name": "EuiNotificationEvent",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiNotificationEvent",
				"lib": "elasticEui"
			},
			"required": [
				"type",
				"time",
				"id",
				"title",
				"messages"
			],
			"props": {
				"iconType": {
					"name": "iconType",
					"type": "string",
					"description": "The icon used to visually represent this data type. Accepts any EuiIcon IconType.",
					"parent": "EuiNotificationEventMetaProps"
				},
				"type": {
					"name": "type",
					"type": "string",
					"description": "Type of event (e.g. Alert, Cloud, etc..). Shows inside a badge.",
					"parent": "EuiNotificationEventMetaProps"
				},
				"time": {
					"name": "time",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Indicates when the event was received.",
					"parent": "EuiNotificationEventMetaProps"
				},
				"severity": {
					"name": "severity",
					"type": "string",
					"description": "Type of severity (e.g. Critical, Warning, etc..). Shows as a text after the type following the format Alert: Critical.",
					"parent": "EuiNotificationEventMetaProps"
				},
				"badgeColor": {
					"name": "badgeColor",
					"type": "string",
					"description": "Accepts either our palette colors (primary, success ..etc) or a hex value #FFFFFF, #000.",
					"parent": "EuiNotificationEventMetaProps"
				},
				"iconAriaLabel": {
					"name": "iconAriaLabel",
					"type": "string",
					"description": "Specify an aria-label for the icon. If no aria-label is passed we assume the icon is purely decorative.",
					"parent": "EuiNotificationEventMetaProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"description": "Disables the button and changes the icon to a loading spinner",
					"parent": "EuiButtonIconProps"
				},
				"iconSize": {
					"name": "iconSize",
					"type": "string",
					"enum": [
						"s",
						"m",
						"l",
						"xl",
						"original",
						"xxl"
					],
					"description": "Size of the icon only. This will not affect the overall size of the button",
					"parent": "EuiButtonIconProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "EuiButtonIconProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-labelledby": {
					"name": "aria-labelledby",
					"type": "string",
					"parent": "EuiButtonIconProps"
				},
				"display": {
					"name": "display",
					"type": "string",
					"enum": [
						"fill",
						"empty",
						"base"
					],
					"description": "Sets the display style for matching other EuiButton types. base is equivalent to a typical EuiButton fill is equivalent to a filled EuiButton empty (default) is equivalent to an EuiButtonEmpty",
					"parent": "EuiButtonIconProps"
				},
				"id": {
					"name": "id",
					"type": "string",
					"description": "A unique identifier",
					"parent": "EuiNotificationEventProps"
				},
				"title": {
					"name": "title",
					"type": "string",
					"description": "The title of the event.",
					"parent": "EuiNotificationEventProps"
				},
				"headingLevel": {
					"name": "headingLevel",
					"type": "string",
					"enum": [
						"h2",
						"h3",
						"h4",
						"h5",
						"h6"
					],
					"default": "h2",
					"description": "The heading level of the title.",
					"parent": "EuiNotificationEventProps"
				},
				"onClickTitle": {
					"name": "onClickTitle",
					"type": "Event",
					"description": "Returns the id and applies an onClick handler to the title.",
					"parent": "EuiNotificationEventProps"
				},
				"primaryAction": {
					"name": "primaryAction",
					"type": "string",
					"description": "The label of the primary action",
					"parent": "EuiNotificationEventProps"
				},
				"primaryActionProps": {
					"name": "primaryActionProps",
					"type": "unknown",
					"description": "Apply more props to the primaryAction button. See #EuiPrimaryActionProps.",
					"parent": "EuiNotificationEventProps"
				},
				"onClickPrimaryAction": {
					"name": "onClickPrimaryAction",
					"type": "Event",
					"description": "Returns the id and applies an onClick handler to the primaryAction.",
					"parent": "EuiNotificationEventProps"
				},
				"messages": {
					"name": "messages",
					"type": "array",
					"items": {
						"type": "string"
					},
					"description": "Notification messages as an array of strings. More than one message wraps in an accordion.",
					"parent": "EuiNotificationEventProps"
				},
				"isRead": {
					"name": "isRead",
					"type": "boolean",
					"description": "Shows an indicator of the read state of the event. Leave as undefined to hide the indicator.",
					"parent": "EuiNotificationEventProps"
				},
				"onRead": {
					"name": "onRead",
					"type": "Event",
					"description": "Returns the id and isRead state. Applies an onClick handler to the read indicator.",
					"parent": "EuiNotificationEventProps"
				},
				"onOpenContextMenu": {
					"name": "onOpenContextMenu",
					"type": "Event",
					"description": "Provided the id of the event must return an array of #EuiContextMenuItem elements.",
					"parent": "EuiNotificationEventProps"
				}
			},
			"relativePath": "src/components/notification/notification_event.tsx"
		},
		"ElasticEui_EuiOutsideClickDetector": {
			"id": "ElasticEui_EuiOutsideClickDetector",
			"name": "EuiOutsideClickDetector",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiOutsideClickDetector",
				"lib": "elasticEui"
			},
			"required": [
				"onOutsideClick"
			],
			"props": {
				"children": {
					"name": "children",
					"type": "array",
					"description": "ReactNode to render as this components content",
					"items": {
						"type": "Node"
					},
					"parent": "EuiOutsideClickDetectorProps"
				},
				"onOutsideClick": {
					"name": "onOutsideClick",
					"type": "Event",
					"parent": "EuiOutsideClickDetectorProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"parent": "EuiOutsideClickDetectorProps"
				},
				"onMouseDown": {
					"name": "onMouseDown",
					"type": "Event",
					"parent": "EuiOutsideClickDetectorProps"
				},
				"onMouseUp": {
					"name": "onMouseUp",
					"type": "Event",
					"parent": "EuiOutsideClickDetectorProps"
				},
				"onTouchStart": {
					"name": "onTouchStart",
					"type": "Event",
					"parent": "EuiOutsideClickDetectorProps"
				},
				"onTouchEnd": {
					"name": "onTouchEnd",
					"type": "Event",
					"parent": "EuiOutsideClickDetectorProps"
				}
			},
			"relativePath": "src/components/outside_click_detector/outside_click_detector.ts"
		},
		"ElasticEui_EuiOverlayMask": {
			"id": "ElasticEui_EuiOverlayMask",
			"name": "EuiOverlayMask",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiOverlayMask",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"role": {
					"name": "role",
					"type": "string"
				},
				"aria-live": {
					"name": "aria-live",
					"type": "string"
				},
				"tabIndex": {
					"name": "tabIndex",
					"type": "string"
				},
				"color": {
					"name": "color",
					"type": "string"
				},
				"style": {
					"name": "style",
					"type": "string"
				},
				"defaultChecked": {
					"name": "defaultChecked",
					"type": "string"
				},
				"defaultValue": {
					"name": "defaultValue",
					"type": "string"
				},
				"suppressContentEditableWarning": {
					"name": "suppressContentEditableWarning",
					"type": "string"
				},
				"suppressHydrationWarning": {
					"name": "suppressHydrationWarning",
					"type": "string"
				},
				"accessKey": {
					"name": "accessKey",
					"type": "string"
				},
				"contentEditable": {
					"name": "contentEditable",
					"type": "string"
				},
				"contextMenu": {
					"name": "contextMenu",
					"type": "string"
				},
				"dir": {
					"name": "dir",
					"type": "string"
				},
				"draggable": {
					"name": "draggable",
					"type": "string"
				},
				"hidden": {
					"name": "hidden",
					"type": "string"
				},
				"id": {
					"name": "id",
					"type": "string"
				},
				"lang": {
					"name": "lang",
					"type": "string"
				},
				"placeholder": {
					"name": "placeholder",
					"type": "string"
				},
				"slot": {
					"name": "slot",
					"type": "string"
				},
				"spellCheck": {
					"name": "spellCheck",
					"type": "string"
				},
				"title": {
					"name": "title",
					"type": "string"
				},
				"translate": {
					"name": "translate",
					"type": "string"
				},
				"radioGroup": {
					"name": "radioGroup",
					"type": "string"
				},
				"about": {
					"name": "about",
					"type": "string"
				},
				"datatype": {
					"name": "datatype",
					"type": "string"
				},
				"inlist": {
					"name": "inlist",
					"type": "string"
				},
				"prefix": {
					"name": "prefix",
					"type": "string"
				},
				"property": {
					"name": "property",
					"type": "string"
				},
				"resource": {
					"name": "resource",
					"type": "string"
				},
				"typeof": {
					"name": "typeof",
					"type": "string"
				},
				"vocab": {
					"name": "vocab",
					"type": "string"
				},
				"autoCapitalize": {
					"name": "autoCapitalize",
					"type": "string"
				},
				"autoCorrect": {
					"name": "autoCorrect",
					"type": "string"
				},
				"autoSave": {
					"name": "autoSave",
					"type": "string"
				},
				"itemProp": {
					"name": "itemProp",
					"type": "string"
				},
				"itemScope": {
					"name": "itemScope",
					"type": "string"
				},
				"itemType": {
					"name": "itemType",
					"type": "string"
				},
				"itemID": {
					"name": "itemID",
					"type": "string"
				},
				"itemRef": {
					"name": "itemRef",
					"type": "string"
				},
				"results": {
					"name": "results",
					"type": "string"
				},
				"security": {
					"name": "security",
					"type": "string"
				},
				"unselectable": {
					"name": "unselectable",
					"type": "string"
				},
				"inputMode": {
					"name": "inputMode",
					"type": "string"
				},
				"is": {
					"name": "is",
					"type": "string"
				},
				"aria-activedescendant": {
					"name": "aria-activedescendant",
					"type": "string"
				},
				"aria-atomic": {
					"name": "aria-atomic",
					"type": "string"
				},
				"aria-autocomplete": {
					"name": "aria-autocomplete",
					"type": "string"
				},
				"aria-busy": {
					"name": "aria-busy",
					"type": "string"
				},
				"aria-checked": {
					"name": "aria-checked",
					"type": "string"
				},
				"aria-colcount": {
					"name": "aria-colcount",
					"type": "string"
				},
				"aria-colindex": {
					"name": "aria-colindex",
					"type": "string"
				},
				"aria-colspan": {
					"name": "aria-colspan",
					"type": "string"
				},
				"aria-controls": {
					"name": "aria-controls",
					"type": "string"
				},
				"aria-current": {
					"name": "aria-current",
					"type": "string"
				},
				"aria-describedby": {
					"name": "aria-describedby",
					"type": "string"
				},
				"aria-details": {
					"name": "aria-details",
					"type": "string"
				},
				"aria-disabled": {
					"name": "aria-disabled",
					"type": "string"
				},
				"aria-dropeffect": {
					"name": "aria-dropeffect",
					"type": "string"
				},
				"aria-errormessage": {
					"name": "aria-errormessage",
					"type": "string"
				},
				"aria-expanded": {
					"name": "aria-expanded",
					"type": "string"
				},
				"aria-flowto": {
					"name": "aria-flowto",
					"type": "string"
				},
				"aria-grabbed": {
					"name": "aria-grabbed",
					"type": "string"
				},
				"aria-haspopup": {
					"name": "aria-haspopup",
					"type": "string"
				},
				"aria-hidden": {
					"name": "aria-hidden",
					"type": "string"
				},
				"aria-invalid": {
					"name": "aria-invalid",
					"type": "string"
				},
				"aria-keyshortcuts": {
					"name": "aria-keyshortcuts",
					"type": "string"
				},
				"aria-labelledby": {
					"name": "aria-labelledby",
					"type": "string"
				},
				"aria-level": {
					"name": "aria-level",
					"type": "string"
				},
				"aria-modal": {
					"name": "aria-modal",
					"type": "string"
				},
				"aria-multiline": {
					"name": "aria-multiline",
					"type": "string"
				},
				"aria-multiselectable": {
					"name": "aria-multiselectable",
					"type": "string"
				},
				"aria-orientation": {
					"name": "aria-orientation",
					"type": "string"
				},
				"aria-owns": {
					"name": "aria-owns",
					"type": "string"
				},
				"aria-placeholder": {
					"name": "aria-placeholder",
					"type": "string"
				},
				"aria-posinset": {
					"name": "aria-posinset",
					"type": "string"
				},
				"aria-pressed": {
					"name": "aria-pressed",
					"type": "string"
				},
				"aria-readonly": {
					"name": "aria-readonly",
					"type": "string"
				},
				"aria-relevant": {
					"name": "aria-relevant",
					"type": "string"
				},
				"aria-required": {
					"name": "aria-required",
					"type": "string"
				},
				"aria-roledescription": {
					"name": "aria-roledescription",
					"type": "string"
				},
				"aria-rowcount": {
					"name": "aria-rowcount",
					"type": "string"
				},
				"aria-rowindex": {
					"name": "aria-rowindex",
					"type": "string"
				},
				"aria-rowspan": {
					"name": "aria-rowspan",
					"type": "string"
				},
				"aria-selected": {
					"name": "aria-selected",
					"type": "string"
				},
				"aria-setsize": {
					"name": "aria-setsize",
					"type": "string"
				},
				"aria-sort": {
					"name": "aria-sort",
					"type": "string"
				},
				"aria-valuemax": {
					"name": "aria-valuemax",
					"type": "string"
				},
				"aria-valuemin": {
					"name": "aria-valuemin",
					"type": "string"
				},
				"aria-valuenow": {
					"name": "aria-valuenow",
					"type": "string"
				},
				"aria-valuetext": {
					"name": "aria-valuetext",
					"type": "string"
				},
				"dangerouslySetInnerHTML": {
					"name": "dangerouslySetInnerHTML",
					"type": "string"
				},
				"onCopy": {
					"name": "onCopy",
					"type": "string"
				},
				"onCopyCapture": {
					"name": "onCopyCapture",
					"type": "string"
				},
				"onCut": {
					"name": "onCut",
					"type": "string"
				},
				"onCutCapture": {
					"name": "onCutCapture",
					"type": "string"
				},
				"onPaste": {
					"name": "onPaste",
					"type": "string"
				},
				"onPasteCapture": {
					"name": "onPasteCapture",
					"type": "string"
				},
				"onCompositionEnd": {
					"name": "onCompositionEnd",
					"type": "string"
				},
				"onCompositionEndCapture": {
					"name": "onCompositionEndCapture",
					"type": "string"
				},
				"onCompositionStart": {
					"name": "onCompositionStart",
					"type": "string"
				},
				"onCompositionStartCapture": {
					"name": "onCompositionStartCapture",
					"type": "string"
				},
				"onCompositionUpdate": {
					"name": "onCompositionUpdate",
					"type": "string"
				},
				"onCompositionUpdateCapture": {
					"name": "onCompositionUpdateCapture",
					"type": "string"
				},
				"onFocus": {
					"name": "onFocus",
					"type": "string"
				},
				"onFocusCapture": {
					"name": "onFocusCapture",
					"type": "string"
				},
				"onBlur": {
					"name": "onBlur",
					"type": "string"
				},
				"onBlurCapture": {
					"name": "onBlurCapture",
					"type": "string"
				},
				"onChange": {
					"name": "onChange",
					"type": "string"
				},
				"onChangeCapture": {
					"name": "onChangeCapture",
					"type": "string"
				},
				"onBeforeInput": {
					"name": "onBeforeInput",
					"type": "string"
				},
				"onBeforeInputCapture": {
					"name": "onBeforeInputCapture",
					"type": "string"
				},
				"onInput": {
					"name": "onInput",
					"type": "string"
				},
				"onInputCapture": {
					"name": "onInputCapture",
					"type": "string"
				},
				"onReset": {
					"name": "onReset",
					"type": "string"
				},
				"onResetCapture": {
					"name": "onResetCapture",
					"type": "string"
				},
				"onSubmit": {
					"name": "onSubmit",
					"type": "string"
				},
				"onSubmitCapture": {
					"name": "onSubmitCapture",
					"type": "string"
				},
				"onInvalid": {
					"name": "onInvalid",
					"type": "string"
				},
				"onInvalidCapture": {
					"name": "onInvalidCapture",
					"type": "string"
				},
				"onLoad": {
					"name": "onLoad",
					"type": "string"
				},
				"onLoadCapture": {
					"name": "onLoadCapture",
					"type": "string"
				},
				"onError": {
					"name": "onError",
					"type": "string"
				},
				"onErrorCapture": {
					"name": "onErrorCapture",
					"type": "string"
				},
				"onKeyDown": {
					"name": "onKeyDown",
					"type": "string"
				},
				"onKeyDownCapture": {
					"name": "onKeyDownCapture",
					"type": "string"
				},
				"onKeyPress": {
					"name": "onKeyPress",
					"type": "string"
				},
				"onKeyPressCapture": {
					"name": "onKeyPressCapture",
					"type": "string"
				},
				"onKeyUp": {
					"name": "onKeyUp",
					"type": "string"
				},
				"onKeyUpCapture": {
					"name": "onKeyUpCapture",
					"type": "string"
				},
				"onAbort": {
					"name": "onAbort",
					"type": "string"
				},
				"onAbortCapture": {
					"name": "onAbortCapture",
					"type": "string"
				},
				"onCanPlay": {
					"name": "onCanPlay",
					"type": "string"
				},
				"onCanPlayCapture": {
					"name": "onCanPlayCapture",
					"type": "string"
				},
				"onCanPlayThrough": {
					"name": "onCanPlayThrough",
					"type": "string"
				},
				"onCanPlayThroughCapture": {
					"name": "onCanPlayThroughCapture",
					"type": "string"
				},
				"onDurationChange": {
					"name": "onDurationChange",
					"type": "string"
				},
				"onDurationChangeCapture": {
					"name": "onDurationChangeCapture",
					"type": "string"
				},
				"onEmptied": {
					"name": "onEmptied",
					"type": "string"
				},
				"onEmptiedCapture": {
					"name": "onEmptiedCapture",
					"type": "string"
				},
				"onEncrypted": {
					"name": "onEncrypted",
					"type": "string"
				},
				"onEncryptedCapture": {
					"name": "onEncryptedCapture",
					"type": "string"
				},
				"onEnded": {
					"name": "onEnded",
					"type": "string"
				},
				"onEndedCapture": {
					"name": "onEndedCapture",
					"type": "string"
				},
				"onLoadedData": {
					"name": "onLoadedData",
					"type": "string"
				},
				"onLoadedDataCapture": {
					"name": "onLoadedDataCapture",
					"type": "string"
				},
				"onLoadedMetadata": {
					"name": "onLoadedMetadata",
					"type": "string"
				},
				"onLoadedMetadataCapture": {
					"name": "onLoadedMetadataCapture",
					"type": "string"
				},
				"onLoadStart": {
					"name": "onLoadStart",
					"type": "string"
				},
				"onLoadStartCapture": {
					"name": "onLoadStartCapture",
					"type": "string"
				},
				"onPause": {
					"name": "onPause",
					"type": "string"
				},
				"onPauseCapture": {
					"name": "onPauseCapture",
					"type": "string"
				},
				"onPlay": {
					"name": "onPlay",
					"type": "string"
				},
				"onPlayCapture": {
					"name": "onPlayCapture",
					"type": "string"
				},
				"onPlaying": {
					"name": "onPlaying",
					"type": "string"
				},
				"onPlayingCapture": {
					"name": "onPlayingCapture",
					"type": "string"
				},
				"onProgress": {
					"name": "onProgress",
					"type": "string"
				},
				"onProgressCapture": {
					"name": "onProgressCapture",
					"type": "string"
				},
				"onRateChange": {
					"name": "onRateChange",
					"type": "string"
				},
				"onRateChangeCapture": {
					"name": "onRateChangeCapture",
					"type": "string"
				},
				"onSeeked": {
					"name": "onSeeked",
					"type": "string"
				},
				"onSeekedCapture": {
					"name": "onSeekedCapture",
					"type": "string"
				},
				"onSeeking": {
					"name": "onSeeking",
					"type": "string"
				},
				"onSeekingCapture": {
					"name": "onSeekingCapture",
					"type": "string"
				},
				"onStalled": {
					"name": "onStalled",
					"type": "string"
				},
				"onStalledCapture": {
					"name": "onStalledCapture",
					"type": "string"
				},
				"onSuspend": {
					"name": "onSuspend",
					"type": "string"
				},
				"onSuspendCapture": {
					"name": "onSuspendCapture",
					"type": "string"
				},
				"onTimeUpdate": {
					"name": "onTimeUpdate",
					"type": "string"
				},
				"onTimeUpdateCapture": {
					"name": "onTimeUpdateCapture",
					"type": "string"
				},
				"onVolumeChange": {
					"name": "onVolumeChange",
					"type": "string"
				},
				"onVolumeChangeCapture": {
					"name": "onVolumeChangeCapture",
					"type": "string"
				},
				"onWaiting": {
					"name": "onWaiting",
					"type": "string"
				},
				"onWaitingCapture": {
					"name": "onWaitingCapture",
					"type": "string"
				},
				"onAuxClick": {
					"name": "onAuxClick",
					"type": "string"
				},
				"onAuxClickCapture": {
					"name": "onAuxClickCapture",
					"type": "string"
				},
				"onClickCapture": {
					"name": "onClickCapture",
					"type": "string"
				},
				"onContextMenu": {
					"name": "onContextMenu",
					"type": "string"
				},
				"onContextMenuCapture": {
					"name": "onContextMenuCapture",
					"type": "string"
				},
				"onDoubleClick": {
					"name": "onDoubleClick",
					"type": "string"
				},
				"onDoubleClickCapture": {
					"name": "onDoubleClickCapture",
					"type": "string"
				},
				"onDrag": {
					"name": "onDrag",
					"type": "string"
				},
				"onDragCapture": {
					"name": "onDragCapture",
					"type": "string"
				},
				"onDragEnd": {
					"name": "onDragEnd",
					"type": "string"
				},
				"onDragEndCapture": {
					"name": "onDragEndCapture",
					"type": "string"
				},
				"onDragEnter": {
					"name": "onDragEnter",
					"type": "string"
				},
				"onDragEnterCapture": {
					"name": "onDragEnterCapture",
					"type": "string"
				},
				"onDragExit": {
					"name": "onDragExit",
					"type": "string"
				},
				"onDragExitCapture": {
					"name": "onDragExitCapture",
					"type": "string"
				},
				"onDragLeave": {
					"name": "onDragLeave",
					"type": "string"
				},
				"onDragLeaveCapture": {
					"name": "onDragLeaveCapture",
					"type": "string"
				},
				"onDragOver": {
					"name": "onDragOver",
					"type": "string"
				},
				"onDragOverCapture": {
					"name": "onDragOverCapture",
					"type": "string"
				},
				"onDragStart": {
					"name": "onDragStart",
					"type": "string"
				},
				"onDragStartCapture": {
					"name": "onDragStartCapture",
					"type": "string"
				},
				"onDrop": {
					"name": "onDrop",
					"type": "string"
				},
				"onDropCapture": {
					"name": "onDropCapture",
					"type": "string"
				},
				"onMouseDown": {
					"name": "onMouseDown",
					"type": "string"
				},
				"onMouseDownCapture": {
					"name": "onMouseDownCapture",
					"type": "string"
				},
				"onMouseEnter": {
					"name": "onMouseEnter",
					"type": "string"
				},
				"onMouseLeave": {
					"name": "onMouseLeave",
					"type": "string"
				},
				"onMouseMove": {
					"name": "onMouseMove",
					"type": "string"
				},
				"onMouseMoveCapture": {
					"name": "onMouseMoveCapture",
					"type": "string"
				},
				"onMouseOut": {
					"name": "onMouseOut",
					"type": "string"
				},
				"onMouseOutCapture": {
					"name": "onMouseOutCapture",
					"type": "string"
				},
				"onMouseOver": {
					"name": "onMouseOver",
					"type": "string"
				},
				"onMouseOverCapture": {
					"name": "onMouseOverCapture",
					"type": "string"
				},
				"onMouseUp": {
					"name": "onMouseUp",
					"type": "string"
				},
				"onMouseUpCapture": {
					"name": "onMouseUpCapture",
					"type": "string"
				},
				"onSelect": {
					"name": "onSelect",
					"type": "string"
				},
				"onSelectCapture": {
					"name": "onSelectCapture",
					"type": "string"
				},
				"onTouchCancel": {
					"name": "onTouchCancel",
					"type": "string"
				},
				"onTouchCancelCapture": {
					"name": "onTouchCancelCapture",
					"type": "string"
				},
				"onTouchEnd": {
					"name": "onTouchEnd",
					"type": "string"
				},
				"onTouchEndCapture": {
					"name": "onTouchEndCapture",
					"type": "string"
				},
				"onTouchMove": {
					"name": "onTouchMove",
					"type": "string"
				},
				"onTouchMoveCapture": {
					"name": "onTouchMoveCapture",
					"type": "string"
				},
				"onTouchStart": {
					"name": "onTouchStart",
					"type": "string"
				},
				"onTouchStartCapture": {
					"name": "onTouchStartCapture",
					"type": "string"
				},
				"onPointerDown": {
					"name": "onPointerDown",
					"type": "string"
				},
				"onPointerDownCapture": {
					"name": "onPointerDownCapture",
					"type": "string"
				},
				"onPointerMove": {
					"name": "onPointerMove",
					"type": "string"
				},
				"onPointerMoveCapture": {
					"name": "onPointerMoveCapture",
					"type": "string"
				},
				"onPointerUp": {
					"name": "onPointerUp",
					"type": "string"
				},
				"onPointerUpCapture": {
					"name": "onPointerUpCapture",
					"type": "string"
				},
				"onPointerCancel": {
					"name": "onPointerCancel",
					"type": "string"
				},
				"onPointerCancelCapture": {
					"name": "onPointerCancelCapture",
					"type": "string"
				},
				"onPointerEnter": {
					"name": "onPointerEnter",
					"type": "string"
				},
				"onPointerEnterCapture": {
					"name": "onPointerEnterCapture",
					"type": "string"
				},
				"onPointerLeave": {
					"name": "onPointerLeave",
					"type": "string"
				},
				"onPointerLeaveCapture": {
					"name": "onPointerLeaveCapture",
					"type": "string"
				},
				"onPointerOver": {
					"name": "onPointerOver",
					"type": "string"
				},
				"onPointerOverCapture": {
					"name": "onPointerOverCapture",
					"type": "string"
				},
				"onPointerOut": {
					"name": "onPointerOut",
					"type": "string"
				},
				"onPointerOutCapture": {
					"name": "onPointerOutCapture",
					"type": "string"
				},
				"onGotPointerCapture": {
					"name": "onGotPointerCapture",
					"type": "string"
				},
				"onGotPointerCaptureCapture": {
					"name": "onGotPointerCaptureCapture",
					"type": "string"
				},
				"onLostPointerCapture": {
					"name": "onLostPointerCapture",
					"type": "string"
				},
				"onLostPointerCaptureCapture": {
					"name": "onLostPointerCaptureCapture",
					"type": "string"
				},
				"onScroll": {
					"name": "onScroll",
					"type": "string"
				},
				"onScrollCapture": {
					"name": "onScrollCapture",
					"type": "string"
				},
				"onWheel": {
					"name": "onWheel",
					"type": "string"
				},
				"onWheelCapture": {
					"name": "onWheelCapture",
					"type": "string"
				},
				"onAnimationStart": {
					"name": "onAnimationStart",
					"type": "string"
				},
				"onAnimationStartCapture": {
					"name": "onAnimationStartCapture",
					"type": "string"
				},
				"onAnimationEnd": {
					"name": "onAnimationEnd",
					"type": "string"
				},
				"onAnimationEndCapture": {
					"name": "onAnimationEndCapture",
					"type": "string"
				},
				"onAnimationIteration": {
					"name": "onAnimationIteration",
					"type": "string"
				},
				"onAnimationIterationCapture": {
					"name": "onAnimationIterationCapture",
					"type": "string"
				},
				"onTransitionEnd": {
					"name": "onTransitionEnd",
					"type": "string"
				},
				"onTransitionEndCapture": {
					"name": "onTransitionEndCapture",
					"type": "string"
				},
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"description": "Function that applies to clicking the mask itself and not the children",
					"parent": "EuiOverlayMaskInterface"
				},
				"children": {
					"name": "children",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "ReactNode to render as this components content",
					"parent": "EuiOverlayMaskInterface"
				},
				"headerZindexLocation": {
					"name": "headerZindexLocation",
					"type": "string",
					"enum": [
						"above",
						"below"
					],
					"default": "above",
					"description": "Should the mask visually sit above or below the EuiHeader (controlled by z-index)",
					"parent": "EuiOverlayMaskInterface"
				}
			},
			"relativePath": "src/components/overlay_mask/overlay_mask.tsx"
		},
		"ElasticEui_EuiPage": {
			"id": "ElasticEui_EuiPage",
			"name": "EuiPage",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiPage",
				"lib": "elasticEui"
			},
			"props": {
				"paddingSize": {
					"name": "paddingSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l"
					],
					"default": "m",
					"description": "Adjust the padding. When using this setting its best to be consistent throughout all similar usages",
					"parent": "EuiPageProps"
				},
				"grow": {
					"name": "grow",
					"type": "boolean",
					"default": false,
					"description": "Adds flex-grow: 1 to the whole page for stretching to fit vertically. Must be wrapped inside a flexbox, preferrably with min-height: 100vh",
					"parent": "EuiPageProps"
				},
				"direction": {
					"name": "direction",
					"type": "string",
					"enum": [
						"row",
						"column"
					],
					"default": "row",
					"description": "Changes the flex-direction property. Flip to column when not including a sidebar.",
					"parent": "EuiPageProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"restrictWidth": {
					"name": "restrictWidth",
					"type": "boolean",
					"default": false,
					"description": "Sets the max-width of the page, set to true to use the default size of 1000px (1200 for Amsterdam), set to false to not restrict the width, set to a number for a custom width in px, set to a string for a custom width in custom measurement.",
					"parent": "_EuiPageRestrictWidth"
				}
			},
			"relativePath": "src/components/page/page.tsx"
		},
		"ElasticEui_EuiPageBody": {
			"id": "ElasticEui_EuiPageBody",
			"name": "EuiPageBody",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiPageBody",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"restrictWidth": {
					"name": "restrictWidth",
					"type": "boolean",
					"default": false,
					"description": "Sets the max-width of the page, set to true to use the default size of 1000px (1200 for Amsterdam), set to false to not restrict the width, set to a number for a custom width in px, set to a string for a custom width in custom measurement.",
					"parent": "_EuiPageRestrictWidth"
				},
				"component": {
					"name": "component",
					"type": "string",
					"enum": [
						"symbol",
						"object",
						"article",
						"button",
						"dialog",
						"figure",
						"form",
						"img",
						"link",
						"main",
						"menu",
						"menuitem",
						"option",
						"switch",
						"table",
						"text",
						"style",
						"slot",
						"title",
						"s",
						"filter",
						"image",
						"stop",
						"time",
						"div",
						"fieldset",
						"legend",
						"big",
						"small",
						"sub",
						"sup",
						"clipPath",
						"mask",
						"path",
						"label",
						"a",
						"span",
						"input",
						"abbr",
						"address",
						"area",
						"aside",
						"audio",
						"b",
						"base",
						"bdi",
						"bdo",
						"blockquote",
						"body",
						"br",
						"canvas",
						"caption",
						"cite",
						"code",
						"col",
						"colgroup",
						"data",
						"datalist",
						"dd",
						"del",
						"details",
						"dfn",
						"dl",
						"dt",
						"em",
						"embed",
						"figcaption",
						"footer",
						"h1",
						"h2",
						"h3",
						"h4",
						"h5",
						"h6",
						"head",
						"header",
						"hgroup",
						"hr",
						"html",
						"i",
						"iframe",
						"ins",
						"kbd",
						"keygen",
						"li",
						"map",
						"mark",
						"meta",
						"meter",
						"nav",
						"noscript",
						"ol",
						"optgroup",
						"output",
						"p",
						"param",
						"picture",
						"pre",
						"progress",
						"q",
						"rp",
						"rt",
						"ruby",
						"samp",
						"script",
						"section",
						"select",
						"source",
						"strong",
						"summary",
						"template",
						"tbody",
						"td",
						"textarea",
						"tfoot",
						"th",
						"thead",
						"tr",
						"track",
						"u",
						"ul",
						"var",
						"video",
						"wbr",
						"webview",
						"circle",
						"pattern",
						"noindex",
						"svg",
						"animate",
						"animateMotion",
						"animateTransform",
						"defs",
						"desc",
						"ellipse",
						"feBlend",
						"feColorMatrix",
						"feComponentTransfer",
						"feComposite",
						"feConvolveMatrix",
						"feDiffuseLighting",
						"feDisplacementMap",
						"feDistantLight",
						"feDropShadow",
						"feFlood",
						"feFuncA",
						"feFuncB",
						"feFuncG",
						"feFuncR",
						"feGaussianBlur",
						"feImage",
						"feMerge",
						"feMergeNode",
						"feMorphology",
						"feOffset",
						"fePointLight",
						"feSpecularLighting",
						"feSpotLight",
						"feTile",
						"feTurbulence",
						"foreignObject",
						"g",
						"line",
						"linearGradient",
						"marker",
						"metadata",
						"mpath",
						"polygon",
						"polyline",
						"radialGradient",
						"rect",
						"textPath",
						"tspan",
						"use",
						"view"
					],
					"description": "Sets the HTML element for EuiPageBody.",
					"parent": "EuiPageBodyProps"
				},
				"panelled": {
					"name": "panelled",
					"type": "boolean",
					"description": "Uses an EuiPanel as the main component instead of a plain div",
					"parent": "EuiPageBodyProps"
				},
				"panelProps": {
					"name": "panelProps",
					"type": "unknown",
					"description": "Extends any extra EuiPanel props if panelled=true",
					"parent": "EuiPageBodyProps"
				},
				"paddingSize": {
					"name": "paddingSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l"
					],
					"description": "Adjusts the padding",
					"parent": "EuiPageBodyProps"
				},
				"borderRadius": {
					"name": "borderRadius",
					"type": "string",
					"default": "none"
				}
			},
			"relativePath": "src/components/page/page_body/page_body.tsx"
		},
		"ElasticEui_EuiPageContent": {
			"id": "ElasticEui_EuiPageContent",
			"name": "EuiPageContent",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiPageContent",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"hasShadow": {
					"name": "hasShadow",
					"type": "boolean",
					"description": "Adds a medium shadow to the panel; Only works when color=plain",
					"parent": "_EuiPanelProps"
				},
				"hasBorder": {
					"name": "hasBorder",
					"type": "boolean",
					"description": "Adds a slight 1px border on all edges. Only works when color=plain | transparent Default is undefined and will default to that themes panel style",
					"parent": "_EuiPanelProps"
				},
				"paddingSize": {
					"name": "paddingSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l"
					],
					"default": "l",
					"description": "Padding for all four sides",
					"parent": "_EuiPanelProps"
				},
				"borderRadius": {
					"name": "borderRadius",
					"type": "string",
					"enum": [
						"none",
						"m"
					],
					"description": "Corner border radius",
					"parent": "_EuiPanelProps"
				},
				"grow": {
					"name": "grow",
					"type": "boolean",
					"description": "When true the panel will grow in height to match EuiFlexItem",
					"parent": "_EuiPanelProps"
				},
				"panelRef": {
					"name": "panelRef",
					"type": "Event",
					"parent": "_EuiPanelProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"primary",
						"accent",
						"success",
						"warning",
						"danger",
						"subdued",
						"plain",
						"transparent"
					],
					"description": "Background color of the panel; Usually a lightened form of the brand colors",
					"parent": "_EuiPanelProps"
				},
				"element": {
					"name": "element",
					"type": "string",
					"enum": [
						"div"
					],
					"parent": "_EuiPanelDivlike"
				},
				"verticalPosition": {
					"name": "verticalPosition",
					"type": "string",
					"enum": [
						"center"
					],
					"parent": "EuiPageContentProps"
				},
				"horizontalPosition": {
					"name": "horizontalPosition",
					"type": "string",
					"enum": [
						"center"
					],
					"parent": "EuiPageContentProps"
				},
				"role": {
					"name": "role",
					"type": "string",
					"enum": [
						"alert",
						"alertdialog",
						"application",
						"article",
						"banner",
						"button",
						"cell",
						"checkbox",
						"columnheader",
						"combobox",
						"complementary",
						"contentinfo",
						"definition",
						"dialog",
						"directory",
						"document",
						"feed",
						"figure",
						"form",
						"grid",
						"gridcell",
						"group",
						"heading",
						"img",
						"link",
						"list",
						"listbox",
						"listitem",
						"log",
						"main",
						"marquee",
						"math",
						"menu",
						"menubar",
						"menuitem",
						"menuitemcheckbox",
						"menuitemradio",
						"navigation",
						"none",
						"note",
						"option",
						"presentation",
						"progressbar",
						"radio",
						"radiogroup",
						"region",
						"row",
						"rowgroup",
						"rowheader",
						"scrollbar",
						"search",
						"searchbox",
						"separator",
						"slider",
						"spinbutton",
						"status",
						"switch",
						"tab",
						"table",
						"tablist",
						"tabpanel",
						"term",
						"textbox",
						"timer",
						"toolbar",
						"tooltip",
						"tree",
						"treegrid",
						"treeitem"
					],
					"description": "There should only be one EuiPageContent per page and should contain the main contents. If this is untrue, set role = null, or change it to match your needed aria role",
					"parent": "EuiPageContentProps"
				}
			},
			"relativePath": "src/components/page/page_content/page_content.tsx"
		},
		"ElasticEui_EuiPageContentBody": {
			"id": "ElasticEui_EuiPageContentBody",
			"name": "EuiPageContentBody",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiPageContentBody",
				"lib": "elasticEui"
			},
			"props": {
				"paddingSize": {
					"name": "paddingSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l"
					],
					"default": "none",
					"description": "Adjust the padding. When using this setting its best to be consistent throughout all similar usages",
					"parent": "EuiPageContentBodyProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"restrictWidth": {
					"name": "restrictWidth",
					"type": "boolean",
					"default": false,
					"description": "Sets the max-width of the page, set to true to use the default size of 1000px (1200 for Amsterdam), set to false to not restrict the width, set to a number for a custom width in px, set to a string for a custom width in custom measurement.",
					"parent": "_EuiPageRestrictWidth"
				}
			},
			"relativePath": "src/components/page/page_content/page_content_body.tsx"
		},
		"ElasticEui_EuiPageContentHeader": {
			"id": "ElasticEui_EuiPageContentHeader",
			"name": "EuiPageContentHeader",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiPageContentHeader",
				"lib": "elasticEui"
			},
			"props": {
				"responsive": {
					"name": "responsive",
					"type": "boolean",
					"default": false,
					"description": "Set to false if you dont want the children to stack at small screen sizes.",
					"parent": "EuiPageContentHeaderProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/page/page_content/page_content_header.tsx"
		},
		"ElasticEui_EuiPageContentHeaderSection": {
			"id": "ElasticEui_EuiPageContentHeaderSection",
			"name": "EuiPageContentHeaderSection",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiPageContentHeaderSection",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/page/page_content/page_content_header_section.tsx"
		},
		"ElasticEui_EuiPageHeader": {
			"id": "ElasticEui_EuiPageHeader",
			"name": "EuiPageHeader",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiPageHeader",
				"lib": "elasticEui"
			},
			"props": {
				"paddingSize": {
					"name": "paddingSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l"
					],
					"default": "none",
					"description": "Adjust the padding. When using this setting its best to be consistent throughout all similar usages",
					"parent": "EuiPageHeaderProps"
				},
				"bottomBorder": {
					"name": "bottomBorder",
					"type": "boolean",
					"description": "Adds a bottom border to separate it from the content after",
					"parent": "EuiPageHeaderProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"responsive": {
					"name": "responsive",
					"type": "string",
					"enum": [
						"reverse"
					],
					"default": true,
					"description": "Set to false if you dont want the children to stack at small screen sizes. Set to reverse to display the right side content first for the sake of hierarchy (like global time)",
					"parent": "_EuiPageHeaderContentProps"
				},
				"alignItems": {
					"name": "alignItems",
					"type": "string",
					"enum": [
						"top",
						"bottom",
						"stretch",
						"center"
					],
					"description": "Vertical alignment of the left and right side content; Default is middle for custom content, but top for when pageTitle or tabs are included",
					"parent": "_EuiPageHeaderContentProps"
				},
				"rightSideItems": {
					"name": "rightSideItems",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Pass custom an array of content to this side usually up to 3 buttons. The first button should be primary, usually with fill and will be visually displayed as the last item, but first in the tab order",
					"parent": "_EuiPageHeaderContentProps"
				},
				"rightSideGroupProps": {
					"name": "rightSideGroupProps",
					"type": "unknown",
					"description": "Additional EuiFlexGroup props to pass to the container of the rightSideItems",
					"parent": "_EuiPageHeaderContentProps"
				},
				"description": {
					"name": "description",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Position is dependent on existing with a pageTitle or tabs Automatically get wrapped in a single paragraph tag inside an EuiText block",
					"parent": "EuiPageHeaderContentLeft"
				},
				"pageTitle": {
					"name": "pageTitle",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Wrapped in an H1 so choose appropriately. A simple string is best",
					"parent": "EuiPageHeaderContentTitle"
				},
				"pageTitleProps": {
					"name": "pageTitleProps",
					"type": "unknown",
					"description": "Additional props to pass to the EuiTitle",
					"parent": "EuiPageHeaderContentTitle"
				},
				"iconType": {
					"name": "iconType",
					"type": "string",
					"description": "Optional icon to place to the left of the title",
					"parent": "EuiPageHeaderContentTitle"
				},
				"iconProps": {
					"name": "iconProps",
					"type": "unknown",
					"description": "Additional EuiIcon props to apply to the optional icon",
					"parent": "EuiPageHeaderContentTitle"
				},
				"breadcrumbs": {
					"name": "breadcrumbs",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Optional array breadcrumbs that render before the pageTitle",
					"parent": "EuiPageHeaderContentTitle"
				},
				"breadcrumbProps": {
					"name": "breadcrumbProps",
					"type": "unknown",
					"description": "Adjust the props of [EuiBreadcrumbs](#/navigation/breadcrumbs)",
					"parent": "EuiPageHeaderContentTitle"
				},
				"tabs": {
					"name": "tabs",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "In-app navigation presented as large borderless tabs. Accepts an array of EuiTab objects;",
					"parent": "EuiPageHeaderContentTabs"
				},
				"tabsProps": {
					"name": "tabsProps",
					"type": "unknown",
					"description": "Any extras to apply to the outer tabs container. Extends EuiTabs",
					"parent": "EuiPageHeaderContentTabs"
				},
				"restrictWidth": {
					"name": "restrictWidth",
					"type": "boolean",
					"default": false,
					"description": "Sets the max-width of the page, set to true to use the default size of 1000px (1200 for Amsterdam), set to false to not restrict the width, set to a number for a custom width in px, set to a string for a custom width in custom measurement.",
					"parent": "_EuiPageRestrictWidth"
				}
			},
			"relativePath": "src/components/page/page_header/page_header.tsx"
		},
		"ElasticEui_EuiPageHeaderContent": {
			"id": "ElasticEui_EuiPageHeaderContent",
			"name": "EuiPageHeaderContent",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiPageHeaderContent",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"responsive": {
					"name": "responsive",
					"type": "string",
					"enum": [
						"reverse"
					],
					"default": true,
					"description": "Set to false if you dont want the children to stack at small screen sizes. Set to reverse to display the right side content first for the sake of hierarchy (like global time)",
					"parent": "_EuiPageHeaderContentProps"
				},
				"alignItems": {
					"name": "alignItems",
					"type": "string",
					"enum": [
						"top",
						"bottom",
						"stretch",
						"center"
					],
					"default": "top",
					"description": "Vertical alignment of the left and right side content; Default is middle for custom content, but top for when pageTitle or tabs are included",
					"parent": "_EuiPageHeaderContentProps"
				},
				"rightSideItems": {
					"name": "rightSideItems",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Pass custom an array of content to this side usually up to 3 buttons. The first button should be primary, usually with fill and will be visually displayed as the last item, but first in the tab order",
					"parent": "_EuiPageHeaderContentProps"
				},
				"rightSideGroupProps": {
					"name": "rightSideGroupProps",
					"type": "unknown",
					"description": "Additional EuiFlexGroup props to pass to the container of the rightSideItems",
					"parent": "_EuiPageHeaderContentProps"
				},
				"description": {
					"name": "description",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Position is dependent on existing with a pageTitle or tabs Automatically get wrapped in a single paragraph tag inside an EuiText block",
					"parent": "EuiPageHeaderContentLeft"
				},
				"pageTitle": {
					"name": "pageTitle",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Wrapped in an H1 so choose appropriately. A simple string is best",
					"parent": "EuiPageHeaderContentTitle"
				},
				"pageTitleProps": {
					"name": "pageTitleProps",
					"type": "unknown",
					"description": "Additional props to pass to the EuiTitle",
					"parent": "EuiPageHeaderContentTitle"
				},
				"iconType": {
					"name": "iconType",
					"type": "string",
					"description": "Optional icon to place to the left of the title",
					"parent": "EuiPageHeaderContentTitle"
				},
				"iconProps": {
					"name": "iconProps",
					"type": "unknown",
					"description": "Additional EuiIcon props to apply to the optional icon",
					"parent": "EuiPageHeaderContentTitle"
				},
				"breadcrumbs": {
					"name": "breadcrumbs",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Optional array breadcrumbs that render before the pageTitle",
					"parent": "EuiPageHeaderContentTitle"
				},
				"breadcrumbProps": {
					"name": "breadcrumbProps",
					"type": "unknown",
					"description": "Adjust the props of [EuiBreadcrumbs](#/navigation/breadcrumbs)",
					"parent": "EuiPageHeaderContentTitle"
				},
				"tabs": {
					"name": "tabs",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "In-app navigation presented as large borderless tabs. Accepts an array of EuiTab objects;",
					"parent": "EuiPageHeaderContentTabs"
				},
				"tabsProps": {
					"name": "tabsProps",
					"type": "unknown",
					"description": "Any extras to apply to the outer tabs container. Extends EuiTabs",
					"parent": "EuiPageHeaderContentTabs"
				}
			},
			"relativePath": "src/components/page/page_header/page_header_content.tsx"
		},
		"ElasticEui_EuiPageHeaderSection": {
			"id": "ElasticEui_EuiPageHeaderSection",
			"name": "EuiPageHeaderSection",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiPageHeaderSection",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/page/page_header/page_header_section.tsx"
		},
		"ElasticEui_EuiPageSideBar": {
			"id": "ElasticEui_EuiPageSideBar",
			"name": "EuiPageSideBar",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiPageSideBar",
				"lib": "elasticEui"
			},
			"props": {
				"sticky": {
					"name": "sticky",
					"type": "boolean",
					"description": "Adds position: sticky and affords for any fixed position headers",
					"parent": "EuiPageSideBarProps"
				},
				"paddingSize": {
					"name": "paddingSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l"
					],
					"default": "none",
					"description": "Adds padding around the children",
					"parent": "EuiPageSideBarProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/page/page_side_bar/page_side_bar.tsx"
		},
		"ElasticEui_EuiPageTemplate": {
			"id": "ElasticEui_EuiPageTemplate",
			"name": "EuiPageTemplate",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiPageTemplate",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"direction": {
					"name": "direction",
					"type": "string",
					"enum": [
						"row",
						"column"
					],
					"description": "Changes the flex-direction property. Flip to column when not including a sidebar.",
					"parent": "EuiPageProps"
				},
				"grow": {
					"name": "grow",
					"type": "boolean",
					"default": false,
					"description": "Adds flex-grow: 1 to the whole page for stretching to fit vertically. Must be wrapped inside a flexbox, preferrably with min-height: 100vh",
					"parent": "EuiPageProps"
				},
				"restrictWidth": {
					"name": "restrictWidth",
					"type": "boolean",
					"default": true,
					"description": "Sets the max-width of the page, set to true to use the default size of 1000px (1200 for Amsterdam), set to false to not restrict the width, set to a number for a custom width in px, set to a string for a custom width in custom measurement.",
					"parent": "_EuiPageRestrictWidth"
				},
				"template": {
					"name": "template",
					"type": "string",
					"enum": [
						"empty",
						"default",
						"centeredBody",
						"centeredContent"
					],
					"default": "default",
					"description": "Choose between 3 types of templates. default: Typical layout with nothing centered centeredBody: The panelled content is centered centeredContent: The content inside the panel is centered empty: Removes the panneling of the page content",
					"parent": "EuiPageTemplateProps"
				},
				"paddingSize": {
					"name": "paddingSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l"
					],
					"default": "l",
					"description": "Padding size will not get applied to the over-arching #EuiPage, but will propogate through all the components to keep them in sync",
					"parent": "EuiPageTemplateProps"
				},
				"pageSideBar": {
					"name": "pageSideBar",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Optionally include #EuiPageSideBar content. The inclusion of this will affect the whole layout",
					"parent": "EuiPageTemplateProps"
				},
				"pageSideBarProps": {
					"name": "pageSideBarProps",
					"type": "unknown",
					"description": "Gets passed along to the #EuiPageSideBar component",
					"parent": "EuiPageTemplateProps"
				},
				"pageHeader": {
					"name": "pageHeader",
					"type": "unknown",
					"description": "Optionally include an #EuiPageHeader by passing an object of its props",
					"parent": "EuiPageTemplateProps"
				},
				"pageBodyProps": {
					"name": "pageBodyProps",
					"type": "unknown",
					"description": "Gets passed along to the #EuiPageBody component",
					"parent": "EuiPageTemplateProps"
				},
				"pageContentProps": {
					"name": "pageContentProps",
					"type": "unknown",
					"description": "Gets passed along to the #EuiPageContent component",
					"parent": "EuiPageTemplateProps"
				},
				"pageContentBodyProps": {
					"name": "pageContentBodyProps",
					"type": "unknown",
					"description": "Gets passed along to the #EuiPageContentBody component",
					"parent": "EuiPageTemplateProps"
				},
				"bottomBar": {
					"name": "bottomBar",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Adds contents inside of an EuiBottomBar. Only works when template = default",
					"parent": "EuiPageTemplateProps"
				},
				"bottomBarProps": {
					"name": "bottomBarProps",
					"type": "unknown",
					"description": "Gets passed along to the #EuiBottomBar component if bottomBar has contents",
					"parent": "EuiPageTemplateProps"
				},
				"fullHeight": {
					"name": "fullHeight",
					"type": "string",
					"enum": [
						"noscroll"
					],
					"description": "Stretches or restricts the height to 100% of the parent; true: scrolls the EuiPageContentBody; noscroll: removes all scroll ability; Only works when template = default | empty and breakpoint is m and above",
					"parent": "EuiPageTemplateProps"
				},
				"minHeight": {
					"name": "minHeight",
					"type": "number",
					"default": 460,
					"description": "Minimum height in which to enforce scrolling",
					"parent": "EuiPageTemplateProps"
				}
			},
			"relativePath": "src/components/page/page_template.tsx"
		},
		"ElasticEui_EuiPagination": {
			"id": "ElasticEui_EuiPagination",
			"name": "EuiPagination",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiPagination",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"pageCount": {
					"name": "pageCount",
					"type": "number",
					"default": 1,
					"description": "The total number of pages. Pass 0 if total count is unknown.",
					"parent": "EuiPaginationProps"
				},
				"activePage": {
					"name": "activePage",
					"type": "number",
					"default": 0,
					"description": "The current page using a zero based index. So if you set the activePage to 1, it will activate the second page. Pass -1 for forcing to last page.",
					"parent": "EuiPaginationProps"
				},
				"onPageClick": {
					"name": "onPageClick",
					"type": "Event",
					"description": "Click handler that passes back the internally calculated activePage index",
					"parent": "EuiPaginationProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"description": "If true, will only show next/prev arrows and simplified number set.",
					"parent": "EuiPaginationProps"
				},
				"responsive": {
					"name": "responsive",
					"type": "string",
					"default": "[xs, s]",
					"description": "Automatically reduces to the compressed version on smaller screens. Remove completely with false or provide your own list of responsive breakpoints.",
					"parent": "EuiPaginationProps"
				}
			},
			"relativePath": "src/components/pagination/pagination.tsx"
		},
		"ElasticEui_EuiPaginationButton": {
			"id": "ElasticEui_EuiPaginationButton",
			"name": "EuiPaginationButton",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiPaginationButton",
				"lib": "elasticEui"
			},
			"required": [
				"pageIndex"
			],
			"props": {
				"download": {
					"name": "download",
					"type": "unknown",
					"parent": "AnchorHTMLAttributes"
				},
				"hrefLang": {
					"name": "hrefLang",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"media": {
					"name": "media",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"ping": {
					"name": "ping",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"referrerPolicy": {
					"name": "referrerPolicy",
					"type": "string",
					"enum": [
						"",
						"no-referrer",
						"no-referrer-when-downgrade",
						"origin",
						"origin-when-cross-origin",
						"same-origin",
						"strict-origin",
						"strict-origin-when-cross-origin",
						"unsafe-url"
					],
					"parent": "AnchorHTMLAttributes"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"primary",
						"success",
						"warning",
						"danger",
						"ghost",
						"text"
					],
					"description": "Any of our named colors",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs"
					],
					"parent": "CommonEuiButtonEmptyProps"
				},
				"flush": {
					"name": "flush",
					"type": "string",
					"enum": [
						"left",
						"right",
						"both"
					],
					"description": "Ensure the text of the button sits flush to the left, right, or both sides of its container",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"isDisabled": {
					"name": "isDisabled",
					"type": "boolean",
					"description": "disabled is also allowed",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"description": "Force disables the button and changes the icon to a loading spinner",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"isSelected": {
					"name": "isSelected",
					"type": "boolean",
					"description": "Applies the boolean state as the aria-pressed property to create a toggle button. Only use when the readable text does not change between states.*",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"href": {
					"name": "href",
					"type": "string",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"target": {
					"name": "target",
					"type": "string",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"rel": {
					"name": "rel",
					"type": "string",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"type": {
					"name": "type",
					"type": "string",
					"enum": [
						"button",
						"submit"
					],
					"parent": "CommonEuiButtonEmptyProps"
				},
				"buttonRef": {
					"name": "buttonRef",
					"type": "Event",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"contentProps": {
					"name": "contentProps",
					"type": "unknown",
					"description": "Object of props passed to the <span/> wrapping the buttons content",
					"parent": "CommonEuiButtonEmptyProps"
				},
				"iconType": {
					"name": "iconType",
					"type": "string",
					"description": "Any type accepted by EuiIcon",
					"parent": "EuiButtonContentProps"
				},
				"iconSide": {
					"name": "iconSide",
					"type": "string",
					"enum": [
						"left",
						"right"
					],
					"description": "Can only be one side left or right",
					"parent": "EuiButtonContentProps"
				},
				"textProps": {
					"name": "textProps",
					"type": "unknown",
					"description": "Object of props passed to the <span/> wrapping the contents text/children only (not icon)",
					"parent": "EuiButtonContentProps"
				},
				"iconSize": {
					"name": "iconSize",
					"type": "string",
					"enum": [
						"s",
						"m"
					],
					"parent": "EuiButtonContentProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"parent": "PropsForButton"
				},
				"isActive": {
					"name": "isActive",
					"type": "boolean",
					"parent": "EuiPaginationButtonProps"
				},
				"isPlaceholder": {
					"name": "isPlaceholder",
					"type": "boolean",
					"description": "For ellipsis or other non-clickable buttons.",
					"parent": "EuiPaginationButtonProps"
				},
				"pageIndex": {
					"name": "pageIndex",
					"type": "number",
					"parent": "EuiPaginationButtonProps"
				},
				"totalPages": {
					"name": "totalPages",
					"type": "number",
					"parent": "EuiPaginationButtonProps"
				}
			},
			"relativePath": "src/components/pagination/pagination_button.tsx"
		},
		"ElasticEui_EuiPanel": {
			"id": "ElasticEui_EuiPanel",
			"name": "EuiPanel",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiPanel",
				"lib": "elasticEui"
			},
			"props": {
				"element": {
					"name": "element",
					"type": "string",
					"enum": [
						"button",
						"div"
					],
					"parent": "_EuiPanelDivlike"
				},
				"hasShadow": {
					"name": "hasShadow",
					"type": "boolean",
					"default": false,
					"description": "Adds a medium shadow to the panel; Only works when color=plain",
					"parent": "_EuiPanelProps"
				},
				"hasBorder": {
					"name": "hasBorder",
					"type": "boolean",
					"description": "Adds a slight 1px border on all edges. Only works when color=plain | transparent Default is undefined and will default to that themes panel style",
					"parent": "_EuiPanelProps"
				},
				"paddingSize": {
					"name": "paddingSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l"
					],
					"default": "m",
					"description": "Padding for all four sides",
					"parent": "_EuiPanelProps"
				},
				"borderRadius": {
					"name": "borderRadius",
					"type": "string",
					"enum": [
						"none",
						"m"
					],
					"default": "m",
					"description": "Corner border radius",
					"parent": "_EuiPanelProps"
				},
				"grow": {
					"name": "grow",
					"type": "boolean",
					"default": false,
					"description": "When true the panel will grow in height to match EuiFlexItem",
					"parent": "_EuiPanelProps"
				},
				"panelRef": {
					"name": "panelRef",
					"type": "Event",
					"parent": "_EuiPanelProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"primary",
						"accent",
						"success",
						"warning",
						"danger",
						"subdued",
						"plain",
						"transparent"
					],
					"default": "plain",
					"description": "Background color of the panel; Usually a lightened form of the brand colors",
					"parent": "_EuiPanelProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/panel/panel.tsx"
		},
		"ElasticEui_SIZES": {
			"id": "ElasticEui_SIZES",
			"name": "Sizes",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "SIZES",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/components/panel/panel.tsx"
		},
		"ElasticEui_EuiSplitPanel": {
			"id": "ElasticEui_EuiSplitPanel",
			"name": "EuiSplitPanel",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiSplitPanel",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/components/panel/split_panel/split_panel.tsx"
		},
		"ElasticEui_EuiInputPopover": {
			"id": "ElasticEui_EuiInputPopover",
			"name": "EuiInputPopover",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiInputPopover",
				"lib": "elasticEui"
			},
			"required": [
				"input",
				"closePopover"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element. Provide a name to the popover panel",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"disableFocusTrap": {
					"name": "disableFocusTrap",
					"type": "boolean",
					"default": false,
					"parent": "_EuiInputPopoverProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"default": false,
					"parent": "_EuiInputPopoverProps"
				},
				"input": {
					"name": "input",
					"type": "string",
					"parent": "_EuiInputPopoverProps"
				},
				"inputRef": {
					"name": "inputRef",
					"type": "Event",
					"parent": "_EuiInputPopoverProps"
				},
				"onPanelResize": {
					"name": "onPanelResize",
					"type": "Event",
					"parent": "_EuiInputPopoverProps"
				},
				"display": {
					"name": "display",
					"type": "string",
					"enum": [
						"block",
						"inlineBlock"
					],
					"default": "block",
					"description": "CSS display type for both the popover and anchor",
					"parent": "EuiPopoverProps"
				},
				"offset": {
					"name": "offset",
					"type": "number",
					"description": "Distance away from the anchor that the popover will render",
					"parent": "EuiPopoverProps"
				},
				"panelRef": {
					"name": "panelRef",
					"type": "Event",
					"parent": "EuiPopoverProps"
				},
				"ownFocus": {
					"name": "ownFocus",
					"type": "boolean",
					"description": "Traps tab focus within the popover contents",
					"parent": "EuiPopoverProps"
				},
				"isOpen": {
					"name": "isOpen",
					"type": "boolean",
					"description": "Visibility state of the popover",
					"parent": "EuiPopoverProps"
				},
				"anchorClassName": {
					"name": "anchorClassName",
					"type": "string",
					"description": "Class name passed to the direct parent of the button",
					"parent": "EuiPopoverProps"
				},
				"anchorPosition": {
					"name": "anchorPosition",
					"type": "string",
					"enum": [
						"downLeft",
						"upCenter",
						"upLeft",
						"upRight",
						"downCenter",
						"downRight",
						"leftCenter",
						"leftUp",
						"leftDown",
						"rightCenter",
						"rightUp",
						"rightDown"
					],
					"default": "downLeft",
					"description": "Alignment of the popover and arrow relative to the button",
					"parent": "EuiPopoverProps"
				},
				"attachToAnchor": {
					"name": "attachToAnchor",
					"type": "boolean",
					"default": false,
					"description": "Style and position alteration for arrow-less, left-aligned attachment. Intended for use with inputs as anchors, e.g. EuiInputPopover",
					"parent": "EuiPopoverProps"
				},
				"closePopover": {
					"name": "closePopover",
					"type": "unknown",
					"description": "Callback to handle hiding of the popover",
					"parent": "EuiPopoverProps"
				},
				"container": {
					"name": "container",
					"type": "Node",
					"description": "Restrict the popovers position within this element",
					"parent": "EuiPopoverProps"
				},
				"focusTrapProps": {
					"name": "focusTrapProps",
					"type": "unknown",
					"description": "Object of props passed to EuiFocusTrap",
					"parent": "EuiPopoverProps"
				},
				"hasArrow": {
					"name": "hasArrow",
					"type": "boolean",
					"description": "Show arrow indicating to originating button",
					"parent": "EuiPopoverProps"
				},
				"initialFocus": {
					"name": "initialFocus",
					"type": "string",
					"description": "Specifies what element should initially have focus; Can be a DOM node, or a selector string (which will be passed to document.querySelector() to find the DOM node), or a function that returns a DOM node Set to false to prevent initial auto-focus. Use only when your app handles setting initial focus state.",
					"parent": "EuiPopoverProps"
				},
				"insert": {
					"name": "insert",
					"type": "unknown",
					"description": "Passed directly to EuiPortal for DOM positioning. Both properties are required if prop is specified",
					"parent": "EuiPopoverProps"
				},
				"panelClassName": {
					"name": "panelClassName",
					"type": "string",
					"description": "Custom class added to the EuiPanel containing the popover contents",
					"parent": "EuiPopoverProps"
				},
				"panelPaddingSize": {
					"name": "panelPaddingSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l"
					],
					"default": "s",
					"description": "EuiPanel padding on all sides",
					"parent": "EuiPopoverProps"
				},
				"panelStyle": {
					"name": "panelStyle",
					"type": "object",
					"description": "Standard DOM style attribute. Passed to the EuiPanel",
					"parent": "EuiPopoverProps"
				},
				"panelProps": {
					"name": "panelProps",
					"type": "unknown",
					"description": "Object of props passed to EuiPanel",
					"parent": "EuiPopoverProps"
				},
				"popoverRef": {
					"name": "popoverRef",
					"type": "Event",
					"parent": "EuiPopoverProps"
				},
				"repositionOnScroll": {
					"name": "repositionOnScroll",
					"type": "boolean",
					"description": "When true, the popovers position is re-calculated when the user scrolls, this supports having fixed-position popover anchors. When nesting an EuiPopover in a scrollable container, repositionOnScroll should be true",
					"parent": "EuiPopoverProps"
				},
				"zIndex": {
					"name": "zIndex",
					"type": "number",
					"description": "By default, popover content inherits the z-index of the anchor component; pass zIndex to override",
					"parent": "EuiPopoverProps"
				},
				"onTrapDeactivation": {
					"name": "onTrapDeactivation",
					"type": "Event",
					"description": "Function callback for when the focus trap is deactivated",
					"parent": "EuiPopoverProps"
				},
				"buffer": {
					"name": "buffer",
					"type": "number",
					"description": "Minimum distance between the popover and the bounding container; Pass an array of 4 values to adjust each side differently: [top, right, bottom, left] Default is 16",
					"parent": "EuiPopoverProps"
				},
				"arrowChildren": {
					"name": "arrowChildren",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Element to pass as the child element of the arrow; Use case is typically limited to an accompanying EuiBeacon",
					"parent": "EuiPopoverProps"
				}
			},
			"relativePath": "src/components/popover/input_popover.tsx"
		},
		"ElasticEui_EuiPopover": {
			"id": "ElasticEui_EuiPopover",
			"name": "EuiPopover",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiPopover",
				"lib": "elasticEui"
			},
			"required": [
				"button",
				"closePopover"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element. Provide a name to the popover panel",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"anchorClassName": {
					"name": "anchorClassName",
					"type": "string",
					"description": "Class name passed to the direct parent of the button",
					"parent": "EuiPopoverProps"
				},
				"anchorPosition": {
					"name": "anchorPosition",
					"type": "string",
					"enum": [
						"downLeft",
						"upCenter",
						"upLeft",
						"upRight",
						"downCenter",
						"downRight",
						"leftCenter",
						"leftUp",
						"leftDown",
						"rightCenter",
						"rightUp",
						"rightDown"
					],
					"default": "downCenter",
					"description": "Alignment of the popover and arrow relative to the button",
					"parent": "EuiPopoverProps"
				},
				"attachToAnchor": {
					"name": "attachToAnchor",
					"type": "boolean",
					"description": "Style and position alteration for arrow-less, left-aligned attachment. Intended for use with inputs as anchors, e.g. EuiInputPopover",
					"parent": "EuiPopoverProps"
				},
				"button": {
					"name": "button",
					"type": "string",
					"description": "Triggering element for which to align the popover to",
					"parent": "EuiPopoverProps"
				},
				"buttonRef": {
					"name": "buttonRef",
					"type": "Event",
					"parent": "EuiPopoverProps"
				},
				"closePopover": {
					"name": "closePopover",
					"type": "unknown",
					"description": "Callback to handle hiding of the popover",
					"parent": "EuiPopoverProps"
				},
				"container": {
					"name": "container",
					"type": "Node",
					"description": "Restrict the popovers position within this element",
					"parent": "EuiPopoverProps"
				},
				"display": {
					"name": "display",
					"type": "string",
					"enum": [
						"block",
						"inlineBlock"
					],
					"default": "inlineBlock",
					"description": "CSS display type for both the popover and anchor",
					"parent": "EuiPopoverProps"
				},
				"focusTrapProps": {
					"name": "focusTrapProps",
					"type": "unknown",
					"description": "Object of props passed to EuiFocusTrap",
					"parent": "EuiPopoverProps"
				},
				"hasArrow": {
					"name": "hasArrow",
					"type": "boolean",
					"default": false,
					"description": "Show arrow indicating to originating button",
					"parent": "EuiPopoverProps"
				},
				"initialFocus": {
					"name": "initialFocus",
					"type": "string",
					"description": "Specifies what element should initially have focus; Can be a DOM node, or a selector string (which will be passed to document.querySelector() to find the DOM node), or a function that returns a DOM node Set to false to prevent initial auto-focus. Use only when your app handles setting initial focus state.",
					"parent": "EuiPopoverProps"
				},
				"insert": {
					"name": "insert",
					"type": "unknown",
					"description": "Passed directly to EuiPortal for DOM positioning. Both properties are required if prop is specified",
					"parent": "EuiPopoverProps"
				},
				"isOpen": {
					"name": "isOpen",
					"type": "boolean",
					"default": false,
					"description": "Visibility state of the popover",
					"parent": "EuiPopoverProps"
				},
				"ownFocus": {
					"name": "ownFocus",
					"type": "boolean",
					"default": false,
					"description": "Traps tab focus within the popover contents",
					"parent": "EuiPopoverProps"
				},
				"panelClassName": {
					"name": "panelClassName",
					"type": "string",
					"description": "Custom class added to the EuiPanel containing the popover contents",
					"parent": "EuiPopoverProps"
				},
				"panelPaddingSize": {
					"name": "panelPaddingSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l"
					],
					"default": "m",
					"description": "EuiPanel padding on all sides",
					"parent": "EuiPopoverProps"
				},
				"panelStyle": {
					"name": "panelStyle",
					"type": "object",
					"description": "Standard DOM style attribute. Passed to the EuiPanel",
					"parent": "EuiPopoverProps"
				},
				"panelProps": {
					"name": "panelProps",
					"type": "unknown",
					"description": "Object of props passed to EuiPanel",
					"parent": "EuiPopoverProps"
				},
				"panelRef": {
					"name": "panelRef",
					"type": "Event",
					"parent": "EuiPopoverProps"
				},
				"popoverRef": {
					"name": "popoverRef",
					"type": "Event",
					"parent": "EuiPopoverProps"
				},
				"repositionOnScroll": {
					"name": "repositionOnScroll",
					"type": "boolean",
					"description": "When true, the popovers position is re-calculated when the user scrolls, this supports having fixed-position popover anchors. When nesting an EuiPopover in a scrollable container, repositionOnScroll should be true",
					"parent": "EuiPopoverProps"
				},
				"zIndex": {
					"name": "zIndex",
					"type": "number",
					"description": "By default, popover content inherits the z-index of the anchor component; pass zIndex to override",
					"parent": "EuiPopoverProps"
				},
				"onTrapDeactivation": {
					"name": "onTrapDeactivation",
					"type": "Event",
					"description": "Function callback for when the focus trap is deactivated",
					"parent": "EuiPopoverProps"
				},
				"offset": {
					"name": "offset",
					"type": "number",
					"description": "Distance away from the anchor that the popover will render",
					"parent": "EuiPopoverProps"
				},
				"buffer": {
					"name": "buffer",
					"type": "number",
					"description": "Minimum distance between the popover and the bounding container; Pass an array of 4 values to adjust each side differently: [top, right, bottom, left] Default is 16",
					"parent": "EuiPopoverProps"
				},
				"arrowChildren": {
					"name": "arrowChildren",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Element to pass as the child element of the arrow; Use case is typically limited to an accompanying EuiBeacon",
					"parent": "EuiPopoverProps"
				}
			},
			"relativePath": "src/components/popover/popover.tsx"
		},
		"ElasticEui_EuiPopoverTitle": {
			"id": "ElasticEui_EuiPopoverTitle",
			"name": "EuiPopoverTitle",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiPopoverTitle",
				"lib": "elasticEui"
			},
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"paddingSize": {
					"name": "paddingSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l"
					],
					"description": "Customize the all around padding of the popover title. Leave undefined to inherit from the panelPaddingSize of the containing EuiPopover",
					"parent": "EuiPopoverTitleProps"
				}
			},
			"relativePath": "src/components/popover/popover_title.tsx"
		},
		"ElasticEui_EuiPopoverFooter": {
			"id": "ElasticEui_EuiPopoverFooter",
			"name": "EuiPopoverFooter",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiPopoverFooter",
				"lib": "elasticEui"
			},
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"paddingSize": {
					"name": "paddingSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l"
					],
					"description": "Customize the all around padding of the popover footer. Leave undefined to inherit from the panelPaddingSize of the containing EuiPopover",
					"parent": "EuiPopoverFooterProps"
				}
			},
			"relativePath": "src/components/popover/popover_footer.tsx"
		},
		"ElasticEui_EuiWrappingPopover": {
			"id": "ElasticEui_EuiWrappingPopover",
			"name": "EuiWrappingPopover",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiWrappingPopover",
				"lib": "elasticEui"
			},
			"description": "Injects the EuiPopover next to the button via EuiPortal then the button element is moved into the popover dom. On unmount, the button is moved back to its original location.",
			"required": [
				"button",
				"closePopover"
			],
			"props": {
				"button": {
					"name": "button",
					"type": "Node",
					"description": "Triggering element for which to align the popover to",
					"parent": "EuiWrappingPopoverProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element. Provide a name to the popover panel",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"anchorClassName": {
					"name": "anchorClassName",
					"type": "string",
					"description": "Class name passed to the direct parent of the button",
					"parent": "EuiPopoverProps"
				},
				"anchorPosition": {
					"name": "anchorPosition",
					"type": "string",
					"enum": [
						"downLeft",
						"upCenter",
						"upLeft",
						"upRight",
						"downCenter",
						"downRight",
						"leftCenter",
						"leftUp",
						"leftDown",
						"rightCenter",
						"rightUp",
						"rightDown"
					],
					"description": "Alignment of the popover and arrow relative to the button",
					"parent": "EuiPopoverProps"
				},
				"attachToAnchor": {
					"name": "attachToAnchor",
					"type": "boolean",
					"description": "Style and position alteration for arrow-less, left-aligned attachment. Intended for use with inputs as anchors, e.g. EuiInputPopover",
					"parent": "EuiPopoverProps"
				},
				"buttonRef": {
					"name": "buttonRef",
					"type": "Event",
					"parent": "EuiPopoverProps"
				},
				"closePopover": {
					"name": "closePopover",
					"type": "unknown",
					"description": "Callback to handle hiding of the popover",
					"parent": "EuiPopoverProps"
				},
				"container": {
					"name": "container",
					"type": "Node",
					"description": "Restrict the popovers position within this element",
					"parent": "EuiPopoverProps"
				},
				"display": {
					"name": "display",
					"type": "string",
					"enum": [
						"block",
						"inlineBlock"
					],
					"description": "CSS display type for both the popover and anchor",
					"parent": "EuiPopoverProps"
				},
				"focusTrapProps": {
					"name": "focusTrapProps",
					"type": "unknown",
					"description": "Object of props passed to EuiFocusTrap",
					"parent": "EuiPopoverProps"
				},
				"hasArrow": {
					"name": "hasArrow",
					"type": "boolean",
					"description": "Show arrow indicating to originating button",
					"parent": "EuiPopoverProps"
				},
				"initialFocus": {
					"name": "initialFocus",
					"type": "string",
					"description": "Specifies what element should initially have focus; Can be a DOM node, or a selector string (which will be passed to document.querySelector() to find the DOM node), or a function that returns a DOM node Set to false to prevent initial auto-focus. Use only when your app handles setting initial focus state.",
					"parent": "EuiPopoverProps"
				},
				"insert": {
					"name": "insert",
					"type": "unknown",
					"description": "Passed directly to EuiPortal for DOM positioning. Both properties are required if prop is specified",
					"parent": "EuiPopoverProps"
				},
				"isOpen": {
					"name": "isOpen",
					"type": "boolean",
					"description": "Visibility state of the popover",
					"parent": "EuiPopoverProps"
				},
				"ownFocus": {
					"name": "ownFocus",
					"type": "boolean",
					"description": "Traps tab focus within the popover contents",
					"parent": "EuiPopoverProps"
				},
				"panelClassName": {
					"name": "panelClassName",
					"type": "string",
					"description": "Custom class added to the EuiPanel containing the popover contents",
					"parent": "EuiPopoverProps"
				},
				"panelPaddingSize": {
					"name": "panelPaddingSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l"
					],
					"description": "EuiPanel padding on all sides",
					"parent": "EuiPopoverProps"
				},
				"panelStyle": {
					"name": "panelStyle",
					"type": "object",
					"description": "Standard DOM style attribute. Passed to the EuiPanel",
					"parent": "EuiPopoverProps"
				},
				"panelProps": {
					"name": "panelProps",
					"type": "unknown",
					"description": "Object of props passed to EuiPanel",
					"parent": "EuiPopoverProps"
				},
				"panelRef": {
					"name": "panelRef",
					"type": "Event",
					"parent": "EuiPopoverProps"
				},
				"popoverRef": {
					"name": "popoverRef",
					"type": "Event",
					"parent": "EuiPopoverProps"
				},
				"repositionOnScroll": {
					"name": "repositionOnScroll",
					"type": "boolean",
					"description": "When true, the popovers position is re-calculated when the user scrolls, this supports having fixed-position popover anchors. When nesting an EuiPopover in a scrollable container, repositionOnScroll should be true",
					"parent": "EuiPopoverProps"
				},
				"zIndex": {
					"name": "zIndex",
					"type": "number",
					"description": "By default, popover content inherits the z-index of the anchor component; pass zIndex to override",
					"parent": "EuiPopoverProps"
				},
				"onTrapDeactivation": {
					"name": "onTrapDeactivation",
					"type": "Event",
					"description": "Function callback for when the focus trap is deactivated",
					"parent": "EuiPopoverProps"
				},
				"offset": {
					"name": "offset",
					"type": "number",
					"description": "Distance away from the anchor that the popover will render",
					"parent": "EuiPopoverProps"
				},
				"buffer": {
					"name": "buffer",
					"type": "number",
					"description": "Minimum distance between the popover and the bounding container; Pass an array of 4 values to adjust each side differently: [top, right, bottom, left] Default is 16",
					"parent": "EuiPopoverProps"
				},
				"arrowChildren": {
					"name": "arrowChildren",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Element to pass as the child element of the arrow; Use case is typically limited to an accompanying EuiBeacon",
					"parent": "EuiPopoverProps"
				}
			},
			"relativePath": "src/components/popover/wrapping_popover.tsx"
		},
		"ElasticEui_EuiPortal": {
			"id": "ElasticEui_EuiPortal",
			"name": "EuiPortal",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiPortal",
				"lib": "elasticEui"
			},
			"props": {
				"children": {
					"name": "children",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "ReactNode to render as this components content",
					"parent": "EuiPortalProps"
				},
				"insert": {
					"name": "insert",
					"type": "object",
					"parent": "EuiPortalProps",
					"properties": {
						"sibling": {
							"type": "Node",
							"name": "sibling"
						},
						"position": {
							"type": "string",
							"enum": [
								"before",
								"after"
							],
							"name": "position"
						}
					}
				},
				"portalRef": {
					"name": "portalRef",
					"type": "Event",
					"parent": "EuiPortalProps"
				}
			},
			"relativePath": "src/components/portal/portal.tsx"
		},
		"ElasticEui_EuiProgress": {
			"id": "ElasticEui_EuiProgress",
			"name": "EuiProgress",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiProgress",
				"lib": "elasticEui"
			},
			"props": {
				"value": {
					"name": "value",
					"type": "string",
					"parent": "ProgressHTMLAttributes"
				},
				"max": {
					"name": "max",
					"type": "number",
					"parent": "Determinate"
				},
				"label": {
					"name": "label",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"parent": "Determinate"
				},
				"labelProps": {
					"name": "labelProps",
					"type": "unknown",
					"description": "Object of props passed to the <span/> wrapping the determinate progresss label",
					"parent": "Determinate"
				},
				"valueText": {
					"name": "valueText",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"parent": "Determinate"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs",
						"l"
					],
					"default": "m",
					"parent": "EuiProgressProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"primary",
						"accent",
						"success",
						"warning",
						"danger",
						"inherit",
						"-moz-initial",
						"initial",
						"revert",
						"unset",
						"subdued",
						"aliceblue",
						"antiquewhite",
						"aqua",
						"aquamarine",
						"azure",
						"beige",
						"bisque",
						"black",
						"blanchedalmond",
						"blue",
						"blueviolet",
						"brown",
						"burlywood",
						"cadetblue",
						"chartreuse",
						"chocolate",
						"coral",
						"cornflowerblue",
						"cornsilk",
						"crimson",
						"cyan",
						"darkblue",
						"darkcyan",
						"darkgoldenrod",
						"darkgray",
						"darkgreen",
						"darkgrey",
						"darkkhaki",
						"darkmagenta",
						"darkolivegreen",
						"darkorange",
						"darkorchid",
						"darkred",
						"darksalmon",
						"darkseagreen",
						"darkslateblue",
						"darkslategray",
						"darkslategrey",
						"darkturquoise",
						"darkviolet",
						"deeppink",
						"deepskyblue",
						"dimgray",
						"dimgrey",
						"dodgerblue",
						"firebrick",
						"floralwhite",
						"forestgreen",
						"fuchsia",
						"gainsboro",
						"ghostwhite",
						"gold",
						"goldenrod",
						"gray",
						"green",
						"greenyellow",
						"grey",
						"honeydew",
						"hotpink",
						"indianred",
						"indigo",
						"ivory",
						"khaki",
						"lavender",
						"lavenderblush",
						"lawngreen",
						"lemonchiffon",
						"lightblue",
						"lightcoral",
						"lightcyan",
						"lightgoldenrodyellow",
						"lightgray",
						"lightgreen",
						"lightgrey",
						"lightpink",
						"lightsalmon",
						"lightseagreen",
						"lightskyblue",
						"lightslategray",
						"lightslategrey",
						"lightsteelblue",
						"lightyellow",
						"lime",
						"limegreen",
						"linen",
						"magenta",
						"maroon",
						"mediumaquamarine",
						"mediumblue",
						"mediumorchid",
						"mediumpurple",
						"mediumseagreen",
						"mediumslateblue",
						"mediumspringgreen",
						"mediumturquoise",
						"mediumvioletred",
						"midnightblue",
						"mintcream",
						"mistyrose",
						"moccasin",
						"navajowhite",
						"navy",
						"oldlace",
						"olive",
						"olivedrab",
						"orange",
						"orangered",
						"orchid",
						"palegoldenrod",
						"palegreen",
						"paleturquoise",
						"palevioletred",
						"papayawhip",
						"peachpuff",
						"peru",
						"pink",
						"plum",
						"powderblue",
						"purple",
						"rebeccapurple",
						"red",
						"rosybrown",
						"royalblue",
						"saddlebrown",
						"salmon",
						"sandybrown",
						"seagreen",
						"seashell",
						"sienna",
						"silver",
						"skyblue",
						"slateblue",
						"slategray",
						"slategrey",
						"snow",
						"springgreen",
						"steelblue",
						"tan",
						"teal",
						"thistle",
						"tomato",
						"transparent",
						"turquoise",
						"violet",
						"wheat",
						"white",
						"whitesmoke",
						"yellow",
						"yellowgreen",
						"ActiveBorder",
						"ActiveCaption",
						"AppWorkspace",
						"Background",
						"ButtonFace",
						"ButtonHighlight",
						"ButtonShadow",
						"ButtonText",
						"CaptionText",
						"GrayText",
						"Highlight",
						"HighlightText",
						"InactiveBorder",
						"InactiveCaption",
						"InactiveCaptionText",
						"InfoBackground",
						"InfoText",
						"Menu",
						"MenuText",
						"Scrollbar",
						"ThreeDDarkShadow",
						"ThreeDFace",
						"ThreeDHighlight",
						"ThreeDLightShadow",
						"ThreeDShadow",
						"Window",
						"WindowFrame",
						"WindowText",
						"currentcolor",
						"vis0",
						"vis1",
						"vis2",
						"vis3",
						"vis4",
						"vis5",
						"vis6",
						"vis7",
						"vis8",
						"vis9"
					],
					"default": "success",
					"description": "One of EUIs color palette, vis colors or a valid CSS color value https://developer.mozilla.org/en-US/docs/Web/CSS/color_value",
					"parent": "EuiProgressProps"
				},
				"position": {
					"name": "position",
					"type": "string",
					"enum": [
						"static",
						"fixed",
						"absolute"
					],
					"default": "static",
					"parent": "EuiProgressProps"
				}
			},
			"relativePath": "src/components/progress/progress.tsx"
		},
		"ElasticEui_EuiProvider": {
			"id": "ElasticEui_EuiProvider",
			"name": "EuiProvider",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiProvider",
				"lib": "elasticEui"
			},
			"props": {
				"theme": {
					"name": "theme",
					"type": "unknown",
					"description": "Provide a specific EuiTheme; Defaults to EuiThemeAmsterdam; Pass null to remove all theming including global reset",
					"parent": "EuiProviderProps"
				},
				"globalStyles": {
					"name": "globalStyles",
					"type": "boolean",
					"description": "Provide global styles via @emotion/react Global for your custom theme. Pass false to remove the default EUI global styles.",
					"parent": "EuiProviderProps"
				},
				"cache": {
					"name": "cache",
					"type": "unknown",
					"description": "Provide a cache configuration from @emotion/cache",
					"parent": "EuiProviderProps"
				},
				"colorMode": {
					"name": "colorMode",
					"type": "string",
					"enum": [
						"dark",
						"light",
						"LIGHT",
						"DARK",
						"inverse",
						"INVERSE"
					],
					"parent": "EuiThemeProviderProps"
				},
				"modify": {
					"name": "modify",
					"type": "unknown",
					"parent": "EuiThemeProviderProps"
				}
			},
			"relativePath": "src/components/provider/provider.tsx"
		},
		"ElasticEui_EuiTreeView": {
			"id": "ElasticEui_EuiTreeView",
			"name": "EuiTreeView",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTreeView",
				"lib": "elasticEui"
			},
			"required": [
				"items",
				"aria-label",
				"aria-labelledby"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"display": {
					"name": "display",
					"type": "string",
					"enum": [
						"default",
						"compressed"
					],
					"description": "Optionally use a variation with smaller text and icon sizes",
					"parent": "CommonTreeProps"
				},
				"items": {
					"name": "items",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "An array of EuiTreeViewNodes",
					"parent": "CommonTreeProps"
				},
				"expandByDefault": {
					"name": "expandByDefault",
					"type": "boolean",
					"description": "Set all items to open on initial load",
					"parent": "CommonTreeProps"
				},
				"showExpansionArrows": {
					"name": "showExpansionArrows",
					"type": "boolean",
					"description": "Display expansion arrows next to all items that contain children",
					"parent": "CommonTreeProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "EuiTreeViewProps"
				},
				"aria-labelledby": {
					"name": "aria-labelledby",
					"type": "string",
					"parent": "EuiTreeViewProps"
				}
			},
			"relativePath": "src/components/tree_view/tree_view.tsx"
		},
		"ElasticEui_EuiResizeObserver": {
			"id": "ElasticEui_EuiResizeObserver",
			"name": "EuiResizeObserver",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiResizeObserver",
				"lib": "elasticEui"
			},
			"required": [
				"onResize"
			],
			"props": {
				"children": {
					"name": "children",
					"type": "Event",
					"description": "ReactNode to render as this components content",
					"parent": "EuiResizeObserverProps"
				},
				"onResize": {
					"name": "onResize",
					"type": "Event",
					"parent": "EuiResizeObserverProps"
				}
			},
			"relativePath": "src/components/observer/resize_observer/resize_observer.tsx"
		},
		"ElasticEui_useResizeObserver": {
			"id": "ElasticEui_useResizeObserver",
			"name": "UseResizeObserver",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useResizeObserver",
				"lib": "elasticEui"
			},
			"required": [
				"attributes",
				"classList",
				"className",
				"clientHeight",
				"clientLeft",
				"clientTop",
				"clientWidth",
				"id",
				"localName",
				"namespaceURI",
				"onfullscreenchange",
				"onfullscreenerror",
				"outerHTML",
				"ownerDocument",
				"part",
				"prefix",
				"scrollHeight",
				"scrollLeft",
				"scrollTop",
				"scrollWidth",
				"shadowRoot",
				"slot",
				"tagName",
				"attachShadow",
				"closest",
				"getAttribute",
				"getAttributeNS",
				"getAttributeNames",
				"getAttributeNode",
				"getAttributeNodeNS",
				"getBoundingClientRect",
				"getClientRects",
				"getElementsByClassName",
				"getElementsByTagName",
				"getElementsByTagNameNS",
				"hasAttribute",
				"hasAttributeNS",
				"hasAttributes",
				"hasPointerCapture",
				"insertAdjacentElement",
				"insertAdjacentHTML",
				"insertAdjacentText",
				"matches",
				"releasePointerCapture",
				"removeAttribute",
				"removeAttributeNS",
				"removeAttributeNode",
				"requestFullscreen",
				"requestPointerLock",
				"scroll",
				"scrollBy",
				"scrollIntoView",
				"scrollTo",
				"setAttribute",
				"setAttributeNS",
				"setAttributeNode",
				"setAttributeNodeNS",
				"setPointerCapture",
				"toggleAttribute",
				"webkitMatchesSelector",
				"addEventListener",
				"removeEventListener",
				"baseURI",
				"childNodes",
				"firstChild",
				"isConnected",
				"lastChild",
				"nextSibling",
				"nodeName",
				"nodeType",
				"nodeValue",
				"parentElement",
				"parentNode",
				"previousSibling",
				"textContent",
				"appendChild",
				"cloneNode",
				"compareDocumentPosition",
				"contains",
				"getRootNode",
				"hasChildNodes",
				"insertBefore",
				"isDefaultNamespace",
				"isEqualNode",
				"isSameNode",
				"lookupNamespaceURI",
				"lookupPrefix",
				"normalize",
				"removeChild",
				"replaceChild",
				"ATTRIBUTE_NODE",
				"CDATA_SECTION_NODE",
				"COMMENT_NODE",
				"DOCUMENT_FRAGMENT_NODE",
				"DOCUMENT_NODE",
				"DOCUMENT_POSITION_CONTAINED_BY",
				"DOCUMENT_POSITION_CONTAINS",
				"DOCUMENT_POSITION_DISCONNECTED",
				"DOCUMENT_POSITION_FOLLOWING",
				"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
				"DOCUMENT_POSITION_PRECEDING",
				"DOCUMENT_TYPE_NODE",
				"ELEMENT_NODE",
				"ENTITY_NODE",
				"ENTITY_REFERENCE_NODE",
				"NOTATION_NODE",
				"PROCESSING_INSTRUCTION_NODE",
				"TEXT_NODE",
				"dispatchEvent",
				"ariaAtomic",
				"ariaAutoComplete",
				"ariaBusy",
				"ariaChecked",
				"ariaColCount",
				"ariaColIndex",
				"ariaColSpan",
				"ariaCurrent",
				"ariaDisabled",
				"ariaExpanded",
				"ariaHasPopup",
				"ariaHidden",
				"ariaKeyShortcuts",
				"ariaLabel",
				"ariaLevel",
				"ariaLive",
				"ariaModal",
				"ariaMultiLine",
				"ariaMultiSelectable",
				"ariaOrientation",
				"ariaPlaceholder",
				"ariaPosInSet",
				"ariaPressed",
				"ariaReadOnly",
				"ariaRequired",
				"ariaRoleDescription",
				"ariaRowCount",
				"ariaRowIndex",
				"ariaRowSpan",
				"ariaSelected",
				"ariaSetSize",
				"ariaSort",
				"ariaValueMax",
				"ariaValueMin",
				"ariaValueNow",
				"ariaValueText",
				"animate",
				"getAnimations",
				"after",
				"before",
				"remove",
				"replaceWith",
				"innerHTML",
				"nextElementSibling",
				"previousElementSibling",
				"childElementCount",
				"children",
				"firstElementChild",
				"lastElementChild",
				"append",
				"prepend",
				"querySelector",
				"querySelectorAll",
				"replaceChildren",
				"assignedSlot"
			],
			"props": {
				"attributes": {
					"name": "attributes",
					"type": "unknown",
					"parent": "Element"
				},
				"classList": {
					"name": "classList",
					"type": "unknown",
					"description": "Allows for manipulation of elements class content attribute as a set of whitespace-separated tokens through a DOMTokenList object.",
					"parent": "Element"
				},
				"className": {
					"name": "className",
					"type": "string",
					"description": "Returns the value of elements class content attribute. Can be set to change it.",
					"parent": "Element"
				},
				"clientHeight": {
					"name": "clientHeight",
					"type": "number",
					"parent": "Element"
				},
				"clientLeft": {
					"name": "clientLeft",
					"type": "number",
					"parent": "Element"
				},
				"clientTop": {
					"name": "clientTop",
					"type": "number",
					"parent": "Element"
				},
				"clientWidth": {
					"name": "clientWidth",
					"type": "number",
					"parent": "Element"
				},
				"id": {
					"name": "id",
					"type": "string",
					"description": "Returns the value of elements id content attribute. Can be set to change it.",
					"parent": "Element"
				},
				"localName": {
					"name": "localName",
					"type": "string",
					"description": "Returns the local name.",
					"parent": "Element"
				},
				"namespaceURI": {
					"name": "namespaceURI",
					"type": "string",
					"description": "Returns the namespace.",
					"parent": "Element"
				},
				"onfullscreenchange": {
					"name": "onfullscreenchange",
					"type": "Event",
					"parent": "Element"
				},
				"onfullscreenerror": {
					"name": "onfullscreenerror",
					"type": "Event",
					"parent": "Element"
				},
				"outerHTML": {
					"name": "outerHTML",
					"type": "string",
					"parent": "Element"
				},
				"ownerDocument": {
					"name": "ownerDocument",
					"type": "unknown",
					"description": "Returns the node document. Returns null for documents.",
					"parent": "Element"
				},
				"part": {
					"name": "part",
					"type": "unknown",
					"parent": "Element"
				},
				"prefix": {
					"name": "prefix",
					"type": "string",
					"description": "Returns the namespace prefix.",
					"parent": "Element"
				},
				"scrollHeight": {
					"name": "scrollHeight",
					"type": "number",
					"parent": "Element"
				},
				"scrollLeft": {
					"name": "scrollLeft",
					"type": "number",
					"parent": "Element"
				},
				"scrollTop": {
					"name": "scrollTop",
					"type": "number",
					"parent": "Element"
				},
				"scrollWidth": {
					"name": "scrollWidth",
					"type": "number",
					"parent": "Element"
				},
				"shadowRoot": {
					"name": "shadowRoot",
					"type": "unknown",
					"description": "Returns elements shadow root, if any, and if shadow roots mode is open, and null otherwise.",
					"parent": "Element"
				},
				"slot": {
					"name": "slot",
					"type": "string",
					"description": "Returns the value of elements slot content attribute. Can be set to change it.",
					"parent": "Element"
				},
				"tagName": {
					"name": "tagName",
					"type": "string",
					"description": "Returns the HTML-uppercased qualified name.",
					"parent": "Element"
				},
				"attachShadow": {
					"name": "attachShadow",
					"type": "Event",
					"description": "Creates a shadow root for element and returns it.",
					"parent": "Element"
				},
				"closest": {
					"name": "closest",
					"type": "unknown",
					"description": "Returns the first (starting at element) inclusive ancestor that matches selectors, and null otherwise.",
					"parent": "Element"
				},
				"getAttribute": {
					"name": "getAttribute",
					"type": "Event",
					"description": "Returns elements first attribute whose qualified name is qualifiedName, and null if there is no such attribute otherwise.",
					"parent": "Element"
				},
				"getAttributeNS": {
					"name": "getAttributeNS",
					"type": "Event",
					"description": "Returns elements attribute whose namespace is namespace and local name is localName, and null if there is no such attribute otherwise.",
					"parent": "Element"
				},
				"getAttributeNames": {
					"name": "getAttributeNames",
					"type": "Event",
					"description": "Returns the qualified names of all elements attributes. Can contain duplicates.",
					"parent": "Element"
				},
				"getAttributeNode": {
					"name": "getAttributeNode",
					"type": "Event",
					"parent": "Element"
				},
				"getAttributeNodeNS": {
					"name": "getAttributeNodeNS",
					"type": "Event",
					"parent": "Element"
				},
				"getBoundingClientRect": {
					"name": "getBoundingClientRect",
					"type": "Event",
					"parent": "Element"
				},
				"getClientRects": {
					"name": "getClientRects",
					"type": "Event",
					"parent": "Element"
				},
				"getElementsByClassName": {
					"name": "getElementsByClassName",
					"type": "Event",
					"description": "Returns a HTMLCollection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. The classNames argument is interpreted as a space-separated list of classes.",
					"parent": "Element"
				},
				"getElementsByTagName": {
					"name": "getElementsByTagName",
					"type": "unknown",
					"parent": "Element"
				},
				"getElementsByTagNameNS": {
					"name": "getElementsByTagNameNS",
					"type": "unknown",
					"parent": "Element"
				},
				"hasAttribute": {
					"name": "hasAttribute",
					"type": "Event",
					"description": "Returns true if element has an attribute whose qualified name is qualifiedName, and false otherwise.",
					"parent": "Element"
				},
				"hasAttributeNS": {
					"name": "hasAttributeNS",
					"type": "Event",
					"description": "Returns true if element has an attribute whose namespace is namespace and local name is localName.",
					"parent": "Element"
				},
				"hasAttributes": {
					"name": "hasAttributes",
					"type": "Event",
					"description": "Returns true if element has attributes, and false otherwise.",
					"parent": "Element"
				},
				"hasPointerCapture": {
					"name": "hasPointerCapture",
					"type": "Event",
					"parent": "Element"
				},
				"insertAdjacentElement": {
					"name": "insertAdjacentElement",
					"type": "Event",
					"parent": "Element"
				},
				"insertAdjacentHTML": {
					"name": "insertAdjacentHTML",
					"type": "Event",
					"parent": "Element"
				},
				"insertAdjacentText": {
					"name": "insertAdjacentText",
					"type": "Event",
					"parent": "Element"
				},
				"matches": {
					"name": "matches",
					"type": "Event",
					"description": "Returns true if matching selectors against elements root yields element, and false otherwise.",
					"parent": "Element"
				},
				"releasePointerCapture": {
					"name": "releasePointerCapture",
					"type": "Event",
					"parent": "Element"
				},
				"removeAttribute": {
					"name": "removeAttribute",
					"type": "Event",
					"description": "Removes elements first attribute whose qualified name is qualifiedName.",
					"parent": "Element"
				},
				"removeAttributeNS": {
					"name": "removeAttributeNS",
					"type": "Event",
					"description": "Removes elements attribute whose namespace is namespace and local name is localName.",
					"parent": "Element"
				},
				"removeAttributeNode": {
					"name": "removeAttributeNode",
					"type": "Event",
					"parent": "Element"
				},
				"requestFullscreen": {
					"name": "requestFullscreen",
					"type": "Event",
					"description": "Displays element fullscreen and resolves promise when done.  When supplied, optionss navigationUI member indicates whether showing navigation UI while in fullscreen is preferred or not. If set to show, navigation simplicity is preferred over screen space, and if set to hide, more screen space is preferred. User agents are always free to honor user preference over the applications. The default value auto indicates no application preference.",
					"parent": "Element"
				},
				"requestPointerLock": {
					"name": "requestPointerLock",
					"type": "Event",
					"parent": "Element"
				},
				"scroll": {
					"name": "scroll",
					"type": "unknown",
					"parent": "Element"
				},
				"scrollBy": {
					"name": "scrollBy",
					"type": "unknown",
					"parent": "Element"
				},
				"scrollIntoView": {
					"name": "scrollIntoView",
					"type": "Event",
					"parent": "Element"
				},
				"scrollTo": {
					"name": "scrollTo",
					"type": "unknown",
					"parent": "Element"
				},
				"setAttribute": {
					"name": "setAttribute",
					"type": "Event",
					"description": "Sets the value of elements first attribute whose qualified name is qualifiedName to value.",
					"parent": "Element"
				},
				"setAttributeNS": {
					"name": "setAttributeNS",
					"type": "Event",
					"description": "Sets the value of elements attribute whose namespace is namespace and local name is localName to value.",
					"parent": "Element"
				},
				"setAttributeNode": {
					"name": "setAttributeNode",
					"type": "Event",
					"parent": "Element"
				},
				"setAttributeNodeNS": {
					"name": "setAttributeNodeNS",
					"type": "Event",
					"parent": "Element"
				},
				"setPointerCapture": {
					"name": "setPointerCapture",
					"type": "Event",
					"parent": "Element"
				},
				"toggleAttribute": {
					"name": "toggleAttribute",
					"type": "Event",
					"description": "If force is not given, toggles qualifiedName, removing it if it is present and adding it if it is not present. If force is true, adds qualifiedName. If force is false, removes qualifiedName.  Returns true if qualifiedName is now present, and false otherwise.",
					"parent": "Element"
				},
				"webkitMatchesSelector": {
					"name": "webkitMatchesSelector",
					"type": "Event",
					"parent": "Element",
					"description": "This is a legacy alias of `matches`."
				},
				"addEventListener": {
					"name": "addEventListener",
					"type": "Event",
					"description": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.  The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as optionss capture.  When set to true, optionss capture prevents callback from being invoked when the events eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when events eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if events eventPhase attribute value is AT_TARGET.  When set to true, optionss passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.  When set to true, optionss once indicates that the callback will only be invoked once after which the event listener will be removed.  If an AbortSignal is passed for optionss signal, then the event listener will be removed when signal is aborted.  The event listener is appended to targets event listener list and is not appended if it has the same type, callback, and capture.",
					"parent": "Element"
				},
				"removeEventListener": {
					"name": "removeEventListener",
					"type": "Event",
					"description": "Removes the event listener in targets event listener list with the same type, callback, and options.",
					"parent": "Element"
				},
				"baseURI": {
					"name": "baseURI",
					"type": "string",
					"description": "Returns nodes node documents document base URL.",
					"parent": "Node"
				},
				"childNodes": {
					"name": "childNodes",
					"type": "unknown",
					"description": "Returns the children.",
					"parent": "Node"
				},
				"firstChild": {
					"name": "firstChild",
					"type": "unknown",
					"description": "Returns the first child.",
					"parent": "Node"
				},
				"isConnected": {
					"name": "isConnected",
					"type": "boolean",
					"description": "Returns true if node is connected and false otherwise.",
					"parent": "Node"
				},
				"lastChild": {
					"name": "lastChild",
					"type": "unknown",
					"description": "Returns the last child.",
					"parent": "Node"
				},
				"nextSibling": {
					"name": "nextSibling",
					"type": "unknown",
					"description": "Returns the next sibling.",
					"parent": "Node"
				},
				"nodeName": {
					"name": "nodeName",
					"type": "string",
					"description": "Returns a string appropriate for the type of node.",
					"parent": "Node"
				},
				"nodeType": {
					"name": "nodeType",
					"type": "number",
					"description": "Returns the type of node.",
					"parent": "Node"
				},
				"nodeValue": {
					"name": "nodeValue",
					"type": "string",
					"parent": "Node"
				},
				"parentElement": {
					"name": "parentElement",
					"type": "Node",
					"description": "Returns the parent element.",
					"parent": "Node"
				},
				"parentNode": {
					"name": "parentNode",
					"type": "unknown",
					"description": "Returns the parent.",
					"parent": "Node"
				},
				"previousSibling": {
					"name": "previousSibling",
					"type": "unknown",
					"description": "Returns the previous sibling.",
					"parent": "Node"
				},
				"textContent": {
					"name": "textContent",
					"type": "string",
					"parent": "Node"
				},
				"appendChild": {
					"name": "appendChild",
					"type": "Event",
					"parent": "Node"
				},
				"cloneNode": {
					"name": "cloneNode",
					"type": "Event",
					"description": "Returns a copy of node. If deep is true, the copy also includes the nodes descendants.",
					"parent": "Node"
				},
				"compareDocumentPosition": {
					"name": "compareDocumentPosition",
					"type": "Event",
					"description": "Returns a bitmask indicating the position of other relative to node.",
					"parent": "Node"
				},
				"contains": {
					"name": "contains",
					"type": "Event",
					"description": "Returns true if other is an inclusive descendant of node, and false otherwise.",
					"parent": "Node"
				},
				"getRootNode": {
					"name": "getRootNode",
					"type": "Event",
					"description": "Returns nodes root.",
					"parent": "Node"
				},
				"hasChildNodes": {
					"name": "hasChildNodes",
					"type": "Event",
					"description": "Returns whether node has children.",
					"parent": "Node"
				},
				"insertBefore": {
					"name": "insertBefore",
					"type": "Event",
					"parent": "Node"
				},
				"isDefaultNamespace": {
					"name": "isDefaultNamespace",
					"type": "Event",
					"parent": "Node"
				},
				"isEqualNode": {
					"name": "isEqualNode",
					"type": "Event",
					"description": "Returns whether node and otherNode have the same properties.",
					"parent": "Node"
				},
				"isSameNode": {
					"name": "isSameNode",
					"type": "Event",
					"parent": "Node"
				},
				"lookupNamespaceURI": {
					"name": "lookupNamespaceURI",
					"type": "Event",
					"parent": "Node"
				},
				"lookupPrefix": {
					"name": "lookupPrefix",
					"type": "Event",
					"parent": "Node"
				},
				"normalize": {
					"name": "normalize",
					"type": "Event",
					"description": "Removes empty exclusive Text nodes and concatenates the data of remaining contiguous exclusive Text nodes into the first of their nodes.",
					"parent": "Node"
				},
				"removeChild": {
					"name": "removeChild",
					"type": "Event",
					"parent": "Node"
				},
				"replaceChild": {
					"name": "replaceChild",
					"type": "Event",
					"parent": "Node"
				},
				"ATTRIBUTE_NODE": {
					"name": "ATTRIBUTE_NODE",
					"type": "number",
					"parent": "Node"
				},
				"CDATA_SECTION_NODE": {
					"name": "CDATA_SECTION_NODE",
					"type": "number",
					"description": "node is a CDATASection node.",
					"parent": "Node"
				},
				"COMMENT_NODE": {
					"name": "COMMENT_NODE",
					"type": "number",
					"description": "node is a Comment node.",
					"parent": "Node"
				},
				"DOCUMENT_FRAGMENT_NODE": {
					"name": "DOCUMENT_FRAGMENT_NODE",
					"type": "number",
					"description": "node is a DocumentFragment node.",
					"parent": "Node"
				},
				"DOCUMENT_NODE": {
					"name": "DOCUMENT_NODE",
					"type": "number",
					"description": "node is a document.",
					"parent": "Node"
				},
				"DOCUMENT_POSITION_CONTAINED_BY": {
					"name": "DOCUMENT_POSITION_CONTAINED_BY",
					"type": "number",
					"description": "Set when other is a descendant of node.",
					"parent": "Node"
				},
				"DOCUMENT_POSITION_CONTAINS": {
					"name": "DOCUMENT_POSITION_CONTAINS",
					"type": "number",
					"description": "Set when other is an ancestor of node.",
					"parent": "Node"
				},
				"DOCUMENT_POSITION_DISCONNECTED": {
					"name": "DOCUMENT_POSITION_DISCONNECTED",
					"type": "number",
					"description": "Set when node and other are not in the same tree.",
					"parent": "Node"
				},
				"DOCUMENT_POSITION_FOLLOWING": {
					"name": "DOCUMENT_POSITION_FOLLOWING",
					"type": "number",
					"description": "Set when other is following node.",
					"parent": "Node"
				},
				"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
					"name": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
					"type": "number",
					"parent": "Node"
				},
				"DOCUMENT_POSITION_PRECEDING": {
					"name": "DOCUMENT_POSITION_PRECEDING",
					"type": "number",
					"description": "Set when other is preceding node.",
					"parent": "Node"
				},
				"DOCUMENT_TYPE_NODE": {
					"name": "DOCUMENT_TYPE_NODE",
					"type": "number",
					"description": "node is a doctype.",
					"parent": "Node"
				},
				"ELEMENT_NODE": {
					"name": "ELEMENT_NODE",
					"type": "number",
					"description": "node is an element.",
					"parent": "Node"
				},
				"ENTITY_NODE": {
					"name": "ENTITY_NODE",
					"type": "number",
					"parent": "Node"
				},
				"ENTITY_REFERENCE_NODE": {
					"name": "ENTITY_REFERENCE_NODE",
					"type": "number",
					"parent": "Node"
				},
				"NOTATION_NODE": {
					"name": "NOTATION_NODE",
					"type": "number",
					"parent": "Node"
				},
				"PROCESSING_INSTRUCTION_NODE": {
					"name": "PROCESSING_INSTRUCTION_NODE",
					"type": "number",
					"description": "node is a ProcessingInstruction node.",
					"parent": "Node"
				},
				"TEXT_NODE": {
					"name": "TEXT_NODE",
					"type": "number",
					"description": "node is a Text node.",
					"parent": "Node"
				},
				"dispatchEvent": {
					"name": "dispatchEvent",
					"type": "Event",
					"description": "Dispatches a synthetic event event to target and returns true if either events cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.",
					"parent": "EventTarget"
				},
				"ariaAtomic": {
					"name": "ariaAtomic",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaAutoComplete": {
					"name": "ariaAutoComplete",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaBusy": {
					"name": "ariaBusy",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaChecked": {
					"name": "ariaChecked",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaColCount": {
					"name": "ariaColCount",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaColIndex": {
					"name": "ariaColIndex",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaColSpan": {
					"name": "ariaColSpan",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaCurrent": {
					"name": "ariaCurrent",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaDisabled": {
					"name": "ariaDisabled",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaExpanded": {
					"name": "ariaExpanded",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaHasPopup": {
					"name": "ariaHasPopup",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaHidden": {
					"name": "ariaHidden",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaKeyShortcuts": {
					"name": "ariaKeyShortcuts",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaLabel": {
					"name": "ariaLabel",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaLevel": {
					"name": "ariaLevel",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaLive": {
					"name": "ariaLive",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaModal": {
					"name": "ariaModal",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaMultiLine": {
					"name": "ariaMultiLine",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaMultiSelectable": {
					"name": "ariaMultiSelectable",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaOrientation": {
					"name": "ariaOrientation",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaPlaceholder": {
					"name": "ariaPlaceholder",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaPosInSet": {
					"name": "ariaPosInSet",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaPressed": {
					"name": "ariaPressed",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaReadOnly": {
					"name": "ariaReadOnly",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaRequired": {
					"name": "ariaRequired",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaRoleDescription": {
					"name": "ariaRoleDescription",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaRowCount": {
					"name": "ariaRowCount",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaRowIndex": {
					"name": "ariaRowIndex",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaRowSpan": {
					"name": "ariaRowSpan",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaSelected": {
					"name": "ariaSelected",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaSetSize": {
					"name": "ariaSetSize",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaSort": {
					"name": "ariaSort",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaValueMax": {
					"name": "ariaValueMax",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaValueMin": {
					"name": "ariaValueMin",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaValueNow": {
					"name": "ariaValueNow",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaValueText": {
					"name": "ariaValueText",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"animate": {
					"name": "animate",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Animatable"
				},
				"getAnimations": {
					"name": "getAnimations",
					"type": "Event",
					"parent": "Animatable"
				},
				"after": {
					"name": "after",
					"type": "Event",
					"description": "Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.  Throws a HierarchyRequestError DOMException if the constraints of the node tree are violated.",
					"parent": "ChildNode"
				},
				"before": {
					"name": "before",
					"type": "Event",
					"description": "Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.  Throws a HierarchyRequestError DOMException if the constraints of the node tree are violated.",
					"parent": "ChildNode"
				},
				"remove": {
					"name": "remove",
					"type": "Event",
					"description": "Removes node.",
					"parent": "ChildNode"
				},
				"replaceWith": {
					"name": "replaceWith",
					"type": "Event",
					"description": "Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.  Throws a HierarchyRequestError DOMException if the constraints of the node tree are violated.",
					"parent": "ChildNode"
				},
				"innerHTML": {
					"name": "innerHTML",
					"type": "string",
					"parent": "InnerHTML"
				},
				"nextElementSibling": {
					"name": "nextElementSibling",
					"type": "Node",
					"description": "Returns the first following sibling that is an element, and null otherwise.",
					"parent": "NonDocumentTypeChildNode"
				},
				"previousElementSibling": {
					"name": "previousElementSibling",
					"type": "Node",
					"description": "Returns the first preceding sibling that is an element, and null otherwise.",
					"parent": "NonDocumentTypeChildNode"
				},
				"childElementCount": {
					"name": "childElementCount",
					"type": "number",
					"parent": "ParentNode"
				},
				"children": {
					"name": "children",
					"type": "unknown",
					"description": "Returns the child elements.",
					"parent": "ParentNode"
				},
				"firstElementChild": {
					"name": "firstElementChild",
					"type": "Node",
					"description": "Returns the first child that is an element, and null otherwise.",
					"parent": "ParentNode"
				},
				"lastElementChild": {
					"name": "lastElementChild",
					"type": "Node",
					"description": "Returns the last child that is an element, and null otherwise.",
					"parent": "ParentNode"
				},
				"append": {
					"name": "append",
					"type": "Event",
					"description": "Inserts nodes after the last child of node, while replacing strings in nodes with equivalent Text nodes.  Throws a HierarchyRequestError DOMException if the constraints of the node tree are violated.",
					"parent": "ParentNode"
				},
				"prepend": {
					"name": "prepend",
					"type": "Event",
					"description": "Inserts nodes before the first child of node, while replacing strings in nodes with equivalent Text nodes.  Throws a HierarchyRequestError DOMException if the constraints of the node tree are violated.",
					"parent": "ParentNode"
				},
				"querySelector": {
					"name": "querySelector",
					"type": "unknown",
					"description": "Returns the first element that is a descendant of node that matches selectors.",
					"parent": "ParentNode"
				},
				"querySelectorAll": {
					"name": "querySelectorAll",
					"type": "unknown",
					"description": "Returns all element descendants of node that match selectors.",
					"parent": "ParentNode"
				},
				"replaceChildren": {
					"name": "replaceChildren",
					"type": "Event",
					"description": "Replace all children of node with nodes, while replacing strings in nodes with equivalent Text nodes.  Throws a HierarchyRequestError DOMException if the constraints of the node tree are violated.",
					"parent": "ParentNode"
				},
				"assignedSlot": {
					"name": "assignedSlot",
					"type": "unknown",
					"parent": "Slottable"
				}
			},
			"relativePath": "src/components/observer/resize_observer/resize_observer.tsx"
		},
		"ElasticEui_EuiSearchBar": {
			"id": "ElasticEui_EuiSearchBar",
			"name": "EuiSearchBar",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiSearchBar",
				"lib": "elasticEui"
			},
			"props": {
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"parent": "EuiSearchBarProps"
				},
				"defaultQuery": {
					"name": "defaultQuery",
					"type": "string",
					"description": "The initial query the bar will hold when first mounted",
					"parent": "EuiSearchBarProps"
				},
				"query": {
					"name": "query",
					"type": "string",
					"description": "If you wish to use the search bar as a controlled component, continuously pass the query via this prop.",
					"parent": "EuiSearchBarProps"
				},
				"box": {
					"name": "box",
					"type": "unknown",
					"description": "Configures the search box. Set placeholder to change the placeholder text in the box and incremental to support incremental (as you type) search.",
					"parent": "EuiSearchBarProps"
				},
				"filters": {
					"name": "filters",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "An array of search filters. See #SearchFilterConfig.",
					"parent": "EuiSearchBarProps"
				},
				"toolsLeft": {
					"name": "toolsLeft",
					"type": "array",
					"description": "Tools which go to the left of the search bar.",
					"items": {
						"type": "Node"
					},
					"parent": "EuiSearchBarProps"
				},
				"toolsRight": {
					"name": "toolsRight",
					"type": "array",
					"description": "Tools which go to the right of the search bar.",
					"items": {
						"type": "Node"
					},
					"parent": "EuiSearchBarProps"
				},
				"dateFormat": {
					"name": "dateFormat",
					"type": "object",
					"description": "Date formatter to use when parsing date values",
					"parent": "EuiSearchBarProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/search_bar/search_bar.tsx"
		},
		"ElasticEui_Query": {
			"id": "ElasticEui_Query",
			"name": "Query",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "Query",
				"exportedAs": [
					"Query",
					"EuiSearchBar.Query"
				],
				"lib": "elasticEui"
			},
			"description": "This is the consumer interface for the query - its effectively a wrapper construct around the AST and some of its related utility functions (e.g. parsing, text representation, executing, etc...) It is immutable - all mutating operations return a new (mutated) query instance.",
			"props": {},
			"relativePath": "src/components/search_bar/query/query.ts"
		},
		"ElasticEui_Ast": {
			"id": "ElasticEui_Ast",
			"name": "Ast",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "Ast",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/components/search_bar/query/ast.ts"
		},
		"ElasticEui_EuiSelectable": {
			"id": "ElasticEui_EuiSelectable",
			"name": "EuiSelectable",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiSelectable",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"searchable": {
					"name": "searchable",
					"type": "boolean",
					"default": false,
					"description": "Hooks up a search box to filter the list (boolean)",
					"parent": "EuiSelectableSearchableProps"
				},
				"searchProps": {
					"name": "searchProps",
					"type": "unknown",
					"description": "Passes props down to the EuiFieldSearch. See #EuiSelectableSearchProps",
					"parent": "EuiSelectableSearchableProps"
				},
				"children": {
					"name": "children",
					"type": "Event",
					"description": "Function that takes the list node and then the search node (if searchable is applied)",
					"parent": "EuiSelectableProps"
				},
				"options": {
					"name": "options",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"default": [],
					"description": "Array of EuiSelectableOption objects. See #EuiSelectableOptionProps",
					"parent": "EuiSelectableProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"description": "Passes back the altered options array with selected options as",
					"parent": "EuiSelectableProps"
				},
				"singleSelection": {
					"name": "singleSelection",
					"type": "string",
					"enum": [
						"always"
					],
					"default": false,
					"description": "Sets the single selection policy of false: allows multiple selection true: only allows one selection always: can and must have only one selection",
					"parent": "EuiSelectableProps"
				},
				"allowExclusions": {
					"name": "allowExclusions",
					"type": "boolean",
					"description": "Allows marking options as checked=off as well as on",
					"parent": "EuiSelectableProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"description": "Show an loading indicator while you load and hook up your data",
					"parent": "EuiSelectableProps"
				},
				"height": {
					"name": "height",
					"type": "string",
					"enum": [
						"full"
					],
					"description": "Sets the max height in pixels or pass full to allow the whole group to fill the height of its container and allows the list grow as well",
					"parent": "EuiSelectableProps"
				},
				"listProps": {
					"name": "listProps",
					"type": "unknown",
					"description": "See #EuiSelectableOptionsList",
					"parent": "EuiSelectableProps"
				},
				"renderOption": {
					"name": "renderOption",
					"type": "Event",
					"description": "Custom render function for each option. Returns (option, searchValue)",
					"parent": "EuiSelectableProps"
				},
				"loadingMessage": {
					"name": "loadingMessage",
					"type": "string",
					"description": "Customize the loading message. Pass a string to simply change the text, or a node to replace the whole content.",
					"parent": "EuiSelectableProps"
				},
				"noMatchesMessage": {
					"name": "noMatchesMessage",
					"type": "string",
					"description": "Customize the no matches message. Pass a string to simply change the text, or a node to replace the whole content.",
					"parent": "EuiSelectableProps"
				},
				"emptyMessage": {
					"name": "emptyMessage",
					"type": "string",
					"description": "Customize the empty message. Pass a string to simply change the text, or a node to replace the whole content.",
					"parent": "EuiSelectableProps"
				},
				"errorMessage": {
					"name": "errorMessage",
					"type": "string",
					"description": "Add an error message. The message will be shown when the value is not null or undefined. Pass a string to simply change the text, or a node to replace the whole content.  errorMessage={hasErrors ? My error message : null}",
					"parent": "EuiSelectableProps"
				},
				"isPreFiltered": {
					"name": "isPreFiltered",
					"type": "boolean",
					"default": false,
					"description": "Control whether or not options get filtered internally or if consumer will filter Default: false",
					"parent": "EuiSelectableProps"
				}
			},
			"relativePath": "src/components/selectable/selectable.tsx"
		},
		"ElasticEui_EuiSelectableList": {
			"id": "ElasticEui_EuiSelectableList",
			"name": "EuiSelectableList",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiSelectableList",
				"lib": "elasticEui"
			},
			"required": [
				"options",
				"onOptionClick",
				"makeOptionId",
				"listId",
				"setActiveOptionIndex"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"activeOptionIndex": {
					"name": "activeOptionIndex",
					"type": "number",
					"description": "The index of the option to be highlighted as pseudo-focused; Good for use when only one selection is allowed and needing to open directly to that option",
					"parent": "EuiSelectableOptionsListProps"
				},
				"showIcons": {
					"name": "showIcons",
					"type": "boolean",
					"description": "Show the check/cross selection indicator icons",
					"parent": "EuiSelectableOptionsListProps"
				},
				"singleSelection": {
					"name": "singleSelection",
					"type": "string",
					"enum": [
						"always"
					],
					"parent": "EuiSelectableOptionsListProps"
				},
				"windowProps": {
					"name": "windowProps",
					"type": "unknown",
					"description": "Any props to send specifically to the react-window FixedSizeList",
					"parent": "EuiSelectableOptionsListProps"
				},
				"bordered": {
					"name": "bordered",
					"type": "boolean",
					"description": "Adds a border around the list to indicate the bounds; Useful when the list scrolls, otherwise use your own container",
					"parent": "EuiSelectableOptionsListProps"
				},
				"onFocusBadge": {
					"name": "onFocusBadge",
					"type": "boolean",
					"description": "When enabled by setting to either true or passing custom text, shows a hollow badge as an append (far right) when the item is focused. The default content when true is ↩ to select/deselect/include/exclude",
					"parent": "EuiSelectableOptionsListProps"
				},
				"paddingSize": {
					"name": "paddingSize",
					"type": "string",
					"enum": [
						"none",
						"s"
					],
					"description": "Padding for the list items.",
					"parent": "EuiSelectableOptionsListProps"
				},
				"textWrap": {
					"name": "textWrap",
					"type": "string",
					"enum": [
						"truncate",
						"wrap"
					],
					"description": "How to handle long text within the item. Wrapping only works if virtualization is off.",
					"parent": "EuiSelectableOptionsListProps"
				},
				"rowHeight": {
					"name": "rowHeight",
					"type": "number",
					"default": 32,
					"description": "The height of each option in pixels. Defaults to 32. Has no effect if isVirtualized=false.",
					"parent": "EuiSelectableOptionsListVirtualizedProps"
				},
				"isVirtualized": {
					"name": "isVirtualized",
					"type": "boolean",
					"default": false,
					"description": "Use virtualized rendering for list items with react-window. Sets each rows height to the value of rowHeight.",
					"parent": "EuiSelectableOptionsListVirtualizedProps"
				},
				"options": {
					"name": "options",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "All possible options",
					"parent": "EuiSelectableListProps"
				},
				"visibleOptions": {
					"name": "visibleOptions",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Filtered options list (if applicable)",
					"parent": "EuiSelectableListProps"
				},
				"searchValue": {
					"name": "searchValue",
					"type": "string",
					"default": "",
					"description": "Search value to highlight on the option render",
					"parent": "EuiSelectableListProps"
				},
				"onOptionClick": {
					"name": "onOptionClick",
					"type": "Event",
					"description": "Returns the array of options with altered checked state",
					"parent": "EuiSelectableListProps"
				},
				"renderOption": {
					"name": "renderOption",
					"type": "Event",
					"description": "Custom render for the label portion of the option; Takes (option, searchValue), returns ReactNode",
					"parent": "EuiSelectableListProps"
				},
				"height": {
					"name": "height",
					"type": "string",
					"enum": [
						"full"
					],
					"description": "Sets the max height in pixels or pass full to allow the whole group to fill the height of its container and allows the list grow as well",
					"parent": "EuiSelectableListProps"
				},
				"allowExclusions": {
					"name": "allowExclusions",
					"type": "boolean",
					"description": "Allow cycling through the on, off and undefined state of option.checked and not just on and undefined",
					"parent": "EuiSelectableListProps"
				},
				"searchable": {
					"name": "searchable",
					"type": "boolean",
					"parent": "EuiSelectableListProps"
				},
				"makeOptionId": {
					"name": "makeOptionId",
					"type": "Event",
					"parent": "EuiSelectableListProps"
				},
				"listId": {
					"name": "listId",
					"type": "string",
					"parent": "EuiSelectableListProps"
				},
				"setActiveOptionIndex": {
					"name": "setActiveOptionIndex",
					"type": "Event",
					"parent": "EuiSelectableListProps"
				}
			},
			"relativePath": "src/components/selectable/selectable_list/selectable_list.tsx"
		},
		"ElasticEui_EuiSelectableListItem": {
			"id": "ElasticEui_EuiSelectableListItem",
			"name": "EuiSelectableListItem",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiSelectableListItem",
				"lib": "elasticEui"
			},
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"checked": {
					"name": "checked",
					"type": "string",
					"enum": [
						"off",
						"on"
					],
					"description": "Applies an icon and visual styling to activated items",
					"parent": "EuiSelectableListItemProps"
				},
				"showIcons": {
					"name": "showIcons",
					"type": "boolean",
					"default": false,
					"description": "Shows icons based on checked type",
					"parent": "EuiSelectableListItemProps"
				},
				"isFocused": {
					"name": "isFocused",
					"type": "boolean",
					"description": "Highlights the item for pseudo focus",
					"parent": "EuiSelectableListItemProps"
				},
				"disabled": {
					"name": "disabled",
					"type": "boolean",
					"parent": "EuiSelectableListItemProps"
				},
				"prepend": {
					"name": "prepend",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"parent": "EuiSelectableListItemProps"
				},
				"append": {
					"name": "append",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"parent": "EuiSelectableListItemProps"
				},
				"allowExclusions": {
					"name": "allowExclusions",
					"type": "boolean",
					"parent": "EuiSelectableListItemProps"
				},
				"onFocusBadge": {
					"name": "onFocusBadge",
					"type": "boolean",
					"default": true,
					"description": "When enabled by setting to either true or passing custom a custom badge, shows a hollow badge as an append (far right) when the item is focused. The default content when true is ↩ to select/deselect/include/exclude",
					"parent": "EuiSelectableListItemProps"
				},
				"paddingSize": {
					"name": "paddingSize",
					"type": "string",
					"enum": [
						"none",
						"s"
					],
					"description": "Padding for the list items.",
					"parent": "EuiSelectableListItemProps"
				},
				"searchable": {
					"name": "searchable",
					"type": "boolean",
					"description": "Whether the EuiSelectable instance is searchable. When true, the Space key will not toggle selection, as it will type into the search box instead. Screen reader instructions will be added instructing users to use the Enter key to select items. When false, the Space key will toggle item selection. No extra screen reader instructions will be added, as Space to toggle is a generally standard for most select/checked elements.",
					"parent": "EuiSelectableListItemProps"
				},
				"textWrap": {
					"name": "textWrap",
					"type": "string",
					"enum": [
						"truncate",
						"wrap"
					],
					"default": "truncate",
					"description": "How to handle long text within the item. Wrapping only works if virtualization is off.",
					"parent": "EuiSelectableListItemProps"
				}
			},
			"relativePath": "src/components/selectable/selectable_list/selectable_list_item.tsx"
		},
		"ElasticEui_EuiSelectableMessage": {
			"id": "ElasticEui_EuiSelectableMessage",
			"name": "EuiSelectableMessage",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiSelectableMessage",
				"lib": "elasticEui"
			},
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"bordered": {
					"name": "bordered",
					"type": "boolean",
					"default": false,
					"description": "Match this to the listProps.bordered property of your EuiSelectable instance",
					"parent": "EuiSelectableMessageProps"
				}
			},
			"relativePath": "src/components/selectable/selectable_message/selectable_message.tsx"
		},
		"ElasticEui_EuiSelectableSearch": {
			"id": "ElasticEui_EuiSelectableSearch",
			"name": "EuiSelectableSearch",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiSelectableSearch",
				"lib": "elasticEui"
			},
			"required": [
				"onChange",
				"options",
				"isPreFiltered"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"parent": "EuiFieldSearchProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"parent": "EuiFieldSearchProps"
				},
				"id": {
					"name": "id",
					"type": "string",
					"parent": "EuiFieldSearchProps"
				},
				"placeholder": {
					"name": "placeholder",
					"type": "string",
					"parent": "EuiFieldSearchProps"
				},
				"name": {
					"name": "name",
					"type": "string",
					"parent": "EuiFieldSearchProps"
				},
				"value": {
					"name": "value",
					"type": "string",
					"description": "Search value state managed by parent EuiSelectable",
					"parent": "EuiFieldSearchProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"description": "when true creates a shorter height input",
					"parent": "EuiFieldSearchProps"
				},
				"inputRef": {
					"name": "inputRef",
					"type": "Event",
					"parent": "EuiFieldSearchProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"parent": "EuiFieldSearchProps"
				},
				"prepend": {
					"name": "prepend",
					"type": "string",
					"description": "Creates an input group with element(s) coming before input string | ReactElement or an array of these",
					"parent": "EuiFieldSearchProps"
				},
				"append": {
					"name": "append",
					"type": "string",
					"description": "Creates an input group with element(s) coming after input. string | ReactElement or an array of these",
					"parent": "EuiFieldSearchProps"
				},
				"isClearable": {
					"name": "isClearable",
					"type": "boolean",
					"description": "Shows a button that quickly clears any input",
					"parent": "EuiFieldSearchProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"description": "Passes back (searchValue, matchingOptions)",
					"parent": "EuiSelectableSearchProps"
				},
				"options": {
					"name": "options",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "_EuiSelectableSearchProps"
				},
				"listId": {
					"name": "listId",
					"type": "string",
					"description": "The id of the visible list to create the appropriate aria controls",
					"parent": "_EuiSelectableSearchProps"
				},
				"isPreFiltered": {
					"name": "isPreFiltered",
					"type": "boolean",
					"parent": "_EuiSelectableSearchProps"
				}
			},
			"relativePath": "src/components/selectable/selectable_search/selectable_search.tsx"
		},
		"ElasticEui_EuiSelectableTemplateSitewide": {
			"id": "ElasticEui_EuiSelectableTemplateSitewide",
			"name": "EuiSelectableTemplateSitewide",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiSelectableTemplateSitewide",
				"lib": "elasticEui"
			},
			"required": [
				"options"
			],
			"props": {
				"children": {
					"name": "children",
					"type": "Event",
					"description": "Function that takes the list node and then the search node (if searchable is applied)",
					"parent": "EuiSelectableProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"description": "Show an loading indicator while you load and hook up your data",
					"parent": "EuiSelectableProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"description": "Passes back the altered options array with selected options as",
					"parent": "EuiSelectableProps"
				},
				"height": {
					"name": "height",
					"type": "string",
					"enum": [
						"full"
					],
					"description": "Sets the max height in pixels or pass full to allow the whole group to fill the height of its container and allows the list grow as well",
					"parent": "EuiSelectableProps"
				},
				"renderOption": {
					"name": "renderOption",
					"type": "Event",
					"description": "Custom render function for each option. Returns (option, searchValue)",
					"parent": "EuiSelectableProps"
				},
				"singleSelection": {
					"name": "singleSelection",
					"type": "string",
					"enum": [
						"always"
					],
					"description": "Sets the single selection policy of false: allows multiple selection true: only allows one selection always: can and must have only one selection",
					"parent": "EuiSelectableProps"
				},
				"searchable": {
					"name": "searchable",
					"type": "boolean",
					"description": "Hooks up a search box to filter the list (boolean)",
					"parent": "EuiSelectableSearchableProps"
				},
				"searchProps": {
					"name": "searchProps",
					"type": "unknown",
					"description": "Passes props down to the EuiFieldSearch. See #EuiSelectableSearchProps",
					"parent": "EuiSelectableSearchableProps"
				},
				"allowExclusions": {
					"name": "allowExclusions",
					"type": "boolean",
					"description": "Allows marking options as checked=off as well as on",
					"parent": "EuiSelectableProps"
				},
				"listProps": {
					"name": "listProps",
					"type": "unknown",
					"description": "See #EuiSelectableOptionsList",
					"parent": "EuiSelectableProps"
				},
				"loadingMessage": {
					"name": "loadingMessage",
					"type": "string",
					"description": "Customize the loading message. Pass a string to simply change the text, or a node to replace the whole content.",
					"parent": "EuiSelectableProps"
				},
				"noMatchesMessage": {
					"name": "noMatchesMessage",
					"type": "string",
					"description": "Customize the no matches message. Pass a string to simply change the text, or a node to replace the whole content.",
					"parent": "EuiSelectableProps"
				},
				"emptyMessage": {
					"name": "emptyMessage",
					"type": "string",
					"description": "Customize the empty message. Pass a string to simply change the text, or a node to replace the whole content.",
					"parent": "EuiSelectableProps"
				},
				"errorMessage": {
					"name": "errorMessage",
					"type": "string",
					"description": "Add an error message. The message will be shown when the value is not null or undefined. Pass a string to simply change the text, or a node to replace the whole content.  errorMessage={hasErrors ? My error message : null}",
					"parent": "EuiSelectableProps"
				},
				"isPreFiltered": {
					"name": "isPreFiltered",
					"type": "boolean",
					"description": "Control whether or not options get filtered internally or if consumer will filter Default: false",
					"parent": "EuiSelectableProps"
				},
				"options": {
					"name": "options",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Extends the typical EuiSelectable #Options with the addition of pre-composed elements such as icon, avatarand meta",
					"parent": "EuiSelectableTemplateSitewideProps"
				},
				"popoverProps": {
					"name": "popoverProps",
					"type": "unknown",
					"description": "Override some of the EuiPopover props housing the list. The default width is 600",
					"parent": "EuiSelectableTemplateSitewideProps"
				},
				"popoverTitle": {
					"name": "popoverTitle",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Optionally provide a title for the popover",
					"parent": "EuiSelectableTemplateSitewideProps"
				},
				"popoverFooter": {
					"name": "popoverFooter",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Optionally provide a footer for the popover",
					"parent": "EuiSelectableTemplateSitewideProps"
				},
				"popoverButton": {
					"name": "popoverButton",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Optionally provide a separate button for toggling the display of the popover.",
					"parent": "EuiSelectableTemplateSitewideProps"
				},
				"popoverButtonBreakpoints": {
					"name": "popoverButtonBreakpoints",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Pass an array of named breakpoints for which to show the popoverButton. If undefined, the popoverButton will always show (if provided)",
					"parent": "EuiSelectableTemplateSitewideProps"
				}
			},
			"relativePath": "src/components/selectable/selectable_templates/selectable_template_sitewide.tsx"
		},
		"ElasticEui_euiSelectableTemplateSitewideRenderOptions": {
			"id": "ElasticEui_euiSelectableTemplateSitewideRenderOptions",
			"name": "EuiSelectableTemplateSitewideRenderOptions",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiSelectableTemplateSitewideRenderOptions",
				"lib": "elasticEui"
			},
			"required": [
				"label"
			],
			"props": {
				"icon": {
					"name": "icon",
					"type": "unknown",
					"description": "Displayed on the left (prepend). Object of EuiIconProps for display of the solution/applications logo",
					"parent": "EuiSelectableTemplateSitewideOption"
				},
				"avatar": {
					"name": "avatar",
					"type": "unknown",
					"description": "Displayed on the right (append). Object of EuiAvatarProps for display of the space (default) or user",
					"parent": "EuiSelectableTemplateSitewideOption"
				},
				"meta": {
					"name": "meta",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "An array of inline #MetaData displayed beneath the label and separated by bullets.",
					"parent": "EuiSelectableTemplateSitewideOption"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"label": {
					"name": "label",
					"type": "string",
					"description": "Visible label of option. Must be unique across items if key is not supplied",
					"parent": "EuiSelectableOptionBase"
				},
				"searchableLabel": {
					"name": "searchableLabel",
					"type": "string",
					"description": "Optionally change the searchable term by passing a different string other than the label. Best used when creating a custom optionRender to separate the label from metadata but allowing to search on both",
					"parent": "EuiSelectableOptionBase"
				},
				"key": {
					"name": "key",
					"type": "string",
					"description": "Must be unique across items. Will be used to match options instead of label",
					"parent": "EuiSelectableOptionBase"
				},
				"checked": {
					"name": "checked",
					"type": "string",
					"enum": [
						"off",
						"on"
					],
					"description": "Leave undefined to indicate not selected, on to indicate inclusion and off to indicate exclusion",
					"parent": "EuiSelectableOptionBase"
				},
				"disabled": {
					"name": "disabled",
					"type": "boolean",
					"parent": "EuiSelectableOptionBase"
				},
				"isGroupLabel": {
					"name": "isGroupLabel",
					"type": "boolean",
					"description": "Optional boolean. Set to true to indicate object is just a grouping label, not a selectable item",
					"parent": "EuiSelectableOptionBase"
				},
				"prepend": {
					"name": "prepend",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Node to add between the selection icon and the label",
					"parent": "EuiSelectableOptionBase"
				},
				"append": {
					"name": "append",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Node to add to the far right of the item",
					"parent": "EuiSelectableOptionBase"
				},
				"ref": {
					"name": "ref",
					"type": "Event",
					"parent": "EuiSelectableOptionBase"
				},
				"id": {
					"name": "id",
					"type": "unknown",
					"description": "Disallow id from being set. Option item ids are coordinated at a higher level for a11y reasons.",
					"parent": "EuiSelectableOptionBase"
				},
				"data": {
					"name": "data",
					"type": "unknown",
					"description": "Option data to pass through to the renderOptions element. Bypass EuiSelectableItem and avoid DOM attribute warnings.",
					"parent": "EuiSelectableOptionBase"
				}
			},
			"relativePath": "src/components/selectable/selectable_templates/selectable_template_sitewide_option.tsx"
		},
		"ElasticEui_EuiSideNav": {
			"id": "ElasticEui_EuiSideNav",
			"name": "EuiSideNav",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiSideNav",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"description": "Class names to be merged into the final className property.",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"children": {
					"name": "children",
					"type": "unknown",
					"description": "children are not rendered. Use items to specify navigation items instead.",
					"parent": "EuiSideNavProps"
				},
				"heading": {
					"name": "heading",
					"type": "string",
					"description": "Creates an associated heading element and uses the same node as default for mobileTitle",
					"parent": "EuiSideNavProps"
				},
				"headingProps": {
					"name": "headingProps",
					"type": "unknown",
					"description": "Adds a couple extra #EuiSideNavHeading props and extends the props of EuiTitle that wraps the heading",
					"parent": "EuiSideNavProps"
				},
				"toggleOpenOnMobile": {
					"name": "toggleOpenOnMobile",
					"type": "unknown",
					"description": "When called, toggles visibility of the navigation menu at mobile responsive widths. The callback should set the isOpenOnMobile prop to actually toggle navigation visibility.",
					"parent": "EuiSideNavProps"
				},
				"isOpenOnMobile": {
					"name": "isOpenOnMobile",
					"type": "boolean",
					"description": "If true, the navigation menu will be open at mobile device widths. Use in conjunction with the toggleOpenOnMobile prop.",
					"parent": "EuiSideNavProps"
				},
				"mobileTitle": {
					"name": "mobileTitle",
					"type": "string",
					"description": "A React node to render at mobile responsive widths, representing the title of this navigation menu.",
					"parent": "EuiSideNavProps"
				},
				"mobileBreakpoints": {
					"name": "mobileBreakpoints",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"default": "[xs, s]",
					"description": "Array of breakpoint names for when to show the mobile version. Set to undefined to remove responsive behavior",
					"parent": "EuiSideNavProps"
				},
				"items": {
					"name": "items",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"default": [],
					"description": "An array of #EuiSideNavItem objects. Lists navigation menu items.",
					"parent": "EuiSideNavProps"
				},
				"renderItem": {
					"name": "renderItem",
					"type": "unknown",
					"description": "Overrides default navigation menu item rendering. When called, it should return a React node representing a replacement navigation item.",
					"parent": "EuiSideNavProps"
				},
				"truncate": {
					"name": "truncate",
					"type": "boolean",
					"description": "Truncates the text of all items to stick to a single line",
					"parent": "EuiSideNavProps"
				}
			},
			"relativePath": "src/components/side_nav/side_nav.tsx"
		},
		"ElasticEui_EuiSpacer": {
			"id": "ElasticEui_EuiSpacer",
			"name": "EuiSpacer",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiSpacer",
				"lib": "elasticEui"
			},
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs",
						"l",
						"xl",
						"xxl"
					],
					"default": "l",
					"parent": "EuiSpacerProps"
				}
			},
			"relativePath": "src/components/spacer/spacer.tsx"
		},
		"ElasticEui_EuiStat": {
			"id": "ElasticEui_EuiStat",
			"name": "EuiStat",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiStat",
				"lib": "elasticEui"
			},
			"required": [
				"description",
				"title"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"description": {
					"name": "description",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Set the description (label) text",
					"parent": "EuiStatProps"
				},
				"isLoading": {
					"name": "isLoading",
					"type": "boolean",
					"default": false,
					"description": "Will hide the title with an animation until false",
					"parent": "EuiStatProps"
				},
				"reverse": {
					"name": "reverse",
					"type": "boolean",
					"default": false,
					"description": "Flips the order of the description and title",
					"parent": "EuiStatProps"
				},
				"textAlign": {
					"name": "textAlign",
					"type": "string",
					"enum": [
						"left",
						"right",
						"center"
					],
					"default": "left",
					"parent": "EuiStatProps"
				},
				"title": {
					"name": "title",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "The (value) text",
					"parent": "EuiStatProps"
				},
				"titleColor": {
					"name": "titleColor",
					"type": "string",
					"default": "default",
					"description": "The color of the title text",
					"parent": "EuiStatProps"
				},
				"titleSize": {
					"name": "titleSize",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs",
						"l",
						"xxxs",
						"xxs"
					],
					"default": "l",
					"description": "Size of the title. See EuiTitle for options (s, m, l... etc)",
					"parent": "EuiStatProps"
				},
				"titleElement": {
					"name": "titleElement",
					"type": "string",
					"default": "p",
					"description": "HTML Element to be used for title",
					"parent": "EuiStatProps"
				},
				"descriptionElement": {
					"name": "descriptionElement",
					"type": "string",
					"default": "p",
					"description": "HTML Element to be used for description",
					"parent": "EuiStatProps"
				}
			},
			"relativePath": "src/components/stat/stat.tsx"
		},
		"ElasticEui_EuiStep": {
			"id": "ElasticEui_EuiStep",
			"name": "EuiStep",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiStep",
				"lib": "elasticEui"
			},
			"required": [
				"title"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"headingElement": {
					"name": "headingElement",
					"type": "string",
					"default": "p",
					"description": "The HTML tag used for the title",
					"parent": "EuiStepInterface"
				},
				"step": {
					"name": "step",
					"type": "number",
					"default": 1,
					"description": "The number of the step in the list of steps",
					"parent": "EuiStepInterface"
				},
				"title": {
					"name": "title",
					"type": "string",
					"parent": "EuiStepInterface"
				},
				"status": {
					"name": "status",
					"type": "string",
					"enum": [
						"warning",
						"danger",
						"disabled",
						"loading",
						"incomplete",
						"complete",
						"current"
					],
					"description": "May replace the number provided in props.step with alternate styling.",
					"parent": "EuiStepInterface"
				},
				"titleSize": {
					"name": "titleSize",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs"
					],
					"default": "s",
					"description": "Title sizing equivalent to EuiTitle, but only m, s and xs. Defaults to s",
					"parent": "EuiStepInterface"
				}
			},
			"relativePath": "src/components/steps/step.tsx"
		},
		"ElasticEui_EuiSteps": {
			"id": "ElasticEui_EuiSteps",
			"name": "EuiSteps",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiSteps",
				"lib": "elasticEui"
			},
			"required": [
				"steps"
			],
			"props": {
				"steps": {
					"name": "steps",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "An array of EuiStep objects excluding the step prop",
					"parent": "EuiStepsProps"
				},
				"firstStepNumber": {
					"name": "firstStepNumber",
					"type": "number",
					"default": 1,
					"description": "The number the steps should begin from",
					"parent": "EuiStepsProps"
				},
				"headingElement": {
					"name": "headingElement",
					"type": "string",
					"default": "p",
					"description": "The HTML tag used for the title",
					"parent": "EuiStepsProps"
				},
				"titleSize": {
					"name": "titleSize",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs"
					],
					"description": "Title sizing equivalent to EuiTitle, but only m, s and xs. Defaults to s",
					"parent": "EuiStepsProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/steps/steps.tsx"
		},
		"ElasticEui_EuiSubSteps": {
			"id": "ElasticEui_EuiSubSteps",
			"name": "EuiSubSteps",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiSubSteps",
				"lib": "elasticEui"
			},
			"props": {
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/steps/sub_steps.tsx"
		},
		"ElasticEui_EuiStepHorizontal": {
			"id": "ElasticEui_EuiStepHorizontal",
			"name": "EuiStepHorizontal",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiStepHorizontal",
				"lib": "elasticEui"
			},
			"required": [
				"onClick"
			],
			"props": {
				"isSelected": {
					"name": "isSelected",
					"type": "boolean",
					"description": "*DEPRECATED: Use status = current instead** Adds to the line before the indicator for showing current progress",
					"parent": "EuiStepHorizontalProps"
				},
				"isComplete": {
					"name": "isComplete",
					"type": "boolean",
					"description": "*DEPRECATED: Use status = complete instead** Adds to the line after the indicator for showing current progress",
					"parent": "EuiStepHorizontalProps"
				},
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"parent": "EuiStepHorizontalProps"
				},
				"disabled": {
					"name": "disabled",
					"type": "boolean",
					"description": "Makes the whole step button disabled.",
					"parent": "EuiStepHorizontalProps"
				},
				"step": {
					"name": "step",
					"type": "number",
					"default": 1,
					"description": "The number of the step in the list of steps",
					"parent": "EuiStepHorizontalProps"
				},
				"title": {
					"name": "title",
					"type": "string",
					"parent": "EuiStepHorizontalProps"
				},
				"status": {
					"name": "status",
					"type": "string",
					"enum": [
						"warning",
						"danger",
						"disabled",
						"loading",
						"incomplete",
						"complete",
						"current"
					],
					"default": "incomplete",
					"description": "Visual representation of the step number indicator. May replace the number provided in props.step with alternate styling. The isSelected, isComplete, and disabled props will override these.",
					"parent": "EuiStepHorizontalProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/steps/step_horizontal.tsx"
		},
		"ElasticEui_EuiStepsHorizontal": {
			"id": "ElasticEui_EuiStepsHorizontal",
			"name": "EuiStepsHorizontal",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiStepsHorizontal",
				"lib": "elasticEui"
			},
			"required": [
				"steps"
			],
			"props": {
				"steps": {
					"name": "steps",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "An array of EuiStepHorizontal objects excluding the step prop",
					"parent": "EuiStepsHorizontalProps"
				},
				"reversed": {
					"name": "reversed",
					"type": "boolean",
					"parent": "OlHTMLAttributes"
				},
				"start": {
					"name": "start",
					"type": "number",
					"parent": "OlHTMLAttributes"
				},
				"type": {
					"name": "type",
					"type": "string",
					"enum": [
						"a",
						"i",
						"1",
						"A",
						"I"
					],
					"parent": "OlHTMLAttributes"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/steps/steps_horizontal.tsx"
		},
		"ElasticEui_EuiStepNumber": {
			"id": "ElasticEui_EuiStepNumber",
			"name": "EuiStepNumber",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiStepNumber",
				"lib": "elasticEui"
			},
			"props": {
				"status": {
					"name": "status",
					"type": "string",
					"enum": [
						"warning",
						"danger",
						"disabled",
						"loading",
						"incomplete",
						"complete",
						"current"
					],
					"description": "May replace the number provided in props.number with alternate styling",
					"parent": "EuiStepNumberProps"
				},
				"number": {
					"name": "number",
					"type": "number",
					"parent": "EuiStepNumberProps"
				},
				"isHollow": {
					"name": "isHollow",
					"type": "boolean",
					"description": "*DEPRECATED IN AMSTERDAM** Uses a border and removes the step number.",
					"parent": "EuiStepNumberProps"
				},
				"titleSize": {
					"name": "titleSize",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs"
					],
					"description": "Title sizing equivalent to EuiTitle, but only m, s and xs. Defaults to s",
					"parent": "EuiStepNumberProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/steps/step_number.tsx"
		},
		"ElasticEui_EuiSuggestItem": {
			"id": "ElasticEui_EuiSuggestItem",
			"name": "EuiSuggestItem",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiSuggestItem",
				"lib": "elasticEui"
			},
			"required": [
				"type",
				"label"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"type": {
					"name": "type",
					"type": "unknown",
					"description": "Takes iconType for EuiIcon and color. color can be tint1 through tint9.",
					"parent": "_EuiSuggestItemPropsBase"
				},
				"label": {
					"name": "label",
					"type": "string",
					"description": "Label or primary text.",
					"parent": "_EuiSuggestItemPropsBase"
				},
				"description": {
					"name": "description",
					"type": "string",
					"description": "Description or secondary text (optional).",
					"parent": "_EuiSuggestItemPropsBase"
				},
				"labelWidth": {
					"name": "labelWidth",
					"type": "string",
					"enum": [
						"20",
						"30",
						"40",
						"50",
						"60",
						"70",
						"80",
						"90",
						20,
						30,
						40,
						50,
						60,
						70,
						80,
						90
					],
					"default": "50",
					"description": "Percentage width of label. Accepts multiples of 10, from 20 to 90. Label will expand to 100% if description is not provided.",
					"parent": "_EuiSuggestItemPropsBase"
				},
				"truncate": {
					"name": "truncate",
					"type": "boolean",
					"default": false,
					"description": "Truncates both label and description.",
					"parent": "_EuiSuggestItemPropsBase"
				},
				"descriptionDisplay": {
					"name": "descriptionDisplay",
					"type": "string",
					"enum": [
						"truncate",
						"wrap"
					],
					"default": "truncate",
					"description": "*DEPRECATED** Use truncate instead to specify truncation for both label and description.  _Set the way in which description is displayed, defaults to truncate._",
					"parent": "_EuiSuggestItemPropsBase"
				},
				"labelDisplay": {
					"name": "labelDisplay",
					"type": "string",
					"enum": [
						"fixed",
						"expand"
					],
					"description": "*DEPRECATED** Use labelWidth instead to specify a specific width.  _Label display is fixed by default. Label will increase its width beyond 50% if needed with expand._",
					"parent": "_EuiSuggestItemPropsBase"
				},
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"parent": "PropsForButton"
				}
			},
			"relativePath": "src/components/suggest/suggest_item.tsx"
		},
		"ElasticEui_EuiSuggest": {
			"id": "ElasticEui_EuiSuggest",
			"name": "EuiSuggest",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiSuggest",
				"lib": "elasticEui"
			},
			"required": [
				"suggestions"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"fullWidth": {
					"name": "fullWidth",
					"type": "boolean",
					"default": false,
					"parent": "EuiFieldSearchProps"
				},
				"id": {
					"name": "id",
					"type": "string",
					"parent": "EuiFieldSearchProps"
				},
				"placeholder": {
					"name": "placeholder",
					"type": "string",
					"parent": "EuiFieldSearchProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"description": "Passes back (searchValue, matchingOptions)",
					"parent": "EuiSelectableSearchProps"
				},
				"name": {
					"name": "name",
					"type": "string",
					"parent": "EuiFieldSearchProps"
				},
				"value": {
					"name": "value",
					"type": "string",
					"parent": "EuiFieldSearchProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"description": "when true creates a shorter height input",
					"parent": "EuiFieldSearchProps"
				},
				"inputRef": {
					"name": "inputRef",
					"type": "Event",
					"parent": "EuiFieldSearchProps"
				},
				"isInvalid": {
					"name": "isInvalid",
					"type": "boolean",
					"parent": "EuiFieldSearchProps"
				},
				"prepend": {
					"name": "prepend",
					"type": "string",
					"description": "Creates an input group with element(s) coming before input string | ReactElement or an array of these",
					"parent": "EuiFieldSearchProps"
				},
				"append": {
					"name": "append",
					"type": "array",
					"description": "Creates an input group with element(s) coming after input. string | ReactElement or an array of these Element to be appended to the input bar.",
					"items": {
						"type": "Node"
					},
					"parent": "EuiFieldSearchProps"
				},
				"isClearable": {
					"name": "isClearable",
					"type": "boolean",
					"description": "Shows a button that quickly clears any input",
					"parent": "EuiFieldSearchProps"
				},
				"suggestions": {
					"name": "suggestions",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "List of suggestions to display using EuiSuggestItem. Accepts props from #EuiSuggestItemProps",
					"parent": "_EuiSuggestProps"
				},
				"tooltipContent": {
					"name": "tooltipContent",
					"type": "string",
					"description": "Changes the content of the tooltip that wraps the status icon",
					"parent": "_EuiSuggestProps"
				},
				"status": {
					"name": "status",
					"type": "string",
					"enum": [
						"loading",
						"unsaved",
						"saved",
						"unchanged"
					],
					"default": "unchanged",
					"description": "Status of the current query unsaved, saved, unchanged or loading.",
					"parent": "_EuiSuggestProps"
				},
				"onItemClick": {
					"name": "onItemClick",
					"type": "Event",
					"description": "Handler for click on an EuiSuggestItem.",
					"parent": "_EuiSuggestProps"
				},
				"onSearch": {
					"name": "onSearch",
					"type": "Event",
					"description": "Callback function called when the search changes.",
					"parent": "_EuiSuggestProps"
				},
				"isVirtualized": {
					"name": "isVirtualized",
					"type": "boolean",
					"default": false,
					"description": "Use virtualized rendering for list items with react-window. Best used when there are a lot of items.",
					"parent": "_EuiSuggestProps"
				},
				"maxHeight": {
					"name": "maxHeight",
					"type": "string",
					"default": "60vh",
					"description": "Maximum height to set for the list. Default is 60vh",
					"parent": "_EuiSuggestProps"
				}
			},
			"relativePath": "src/components/suggest/suggest.tsx"
		},
		"ElasticEui_EuiTable": {
			"id": "ElasticEui_EuiTable",
			"name": "EuiTable",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTable",
				"lib": "elasticEui"
			},
			"props": {
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"parent": "EuiTableProps"
				},
				"responsive": {
					"name": "responsive",
					"type": "boolean",
					"default": false,
					"parent": "EuiTableProps"
				},
				"tableLayout": {
					"name": "tableLayout",
					"type": "string",
					"enum": [
						"fixed",
						"auto"
					],
					"default": "fixed",
					"description": "Sets the table-layout CSS property",
					"parent": "EuiTableProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/table/table.tsx"
		},
		"ElasticEui_EuiTableBody": {
			"id": "ElasticEui_EuiTableBody",
			"name": "EuiTableBody",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTableBody",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"bodyRef": {
					"name": "bodyRef",
					"type": "Event",
					"parent": "EuiTableBodyProps"
				}
			},
			"relativePath": "src/components/table/table_body.tsx"
		},
		"ElasticEui_EuiTableFooter": {
			"id": "ElasticEui_EuiTableFooter",
			"name": "EuiTableFooter",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTableFooter",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/table/table_footer.tsx"
		},
		"ElasticEui_EuiTableFooterCell": {
			"id": "ElasticEui_EuiTableFooterCell",
			"name": "EuiTableFooterCell",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTableFooterCell",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"align": {
					"name": "align",
					"type": "string",
					"enum": [
						"left",
						"right",
						"center"
					],
					"default": "left",
					"parent": "TdHTMLAttributes"
				},
				"colSpan": {
					"name": "colSpan",
					"type": "number",
					"parent": "TdHTMLAttributes"
				},
				"headers": {
					"name": "headers",
					"type": "string",
					"parent": "TdHTMLAttributes"
				},
				"rowSpan": {
					"name": "rowSpan",
					"type": "number",
					"parent": "TdHTMLAttributes"
				},
				"scope": {
					"name": "scope",
					"type": "string",
					"parent": "TdHTMLAttributes"
				},
				"abbr": {
					"name": "abbr",
					"type": "string",
					"parent": "TdHTMLAttributes"
				},
				"height": {
					"name": "height",
					"type": "string",
					"parent": "TdHTMLAttributes"
				},
				"width": {
					"name": "width",
					"type": "string",
					"parent": "TdHTMLAttributes"
				},
				"valign": {
					"name": "valign",
					"type": "string",
					"enum": [
						"baseline",
						"middle",
						"top",
						"bottom"
					],
					"parent": "TdHTMLAttributes"
				}
			},
			"relativePath": "src/components/table/table_footer_cell.tsx"
		},
		"ElasticEui_EuiTableHeader": {
			"id": "ElasticEui_EuiTableHeader",
			"name": "EuiTableHeader",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTableHeader",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"wrapWithTableRow": {
					"name": "wrapWithTableRow",
					"type": "boolean",
					"default": false,
					"description": "Automatically adds a wrapping <tr> element around the children",
					"parent": "EuiTableHeaderProps"
				}
			},
			"relativePath": "src/components/table/table_header.tsx"
		},
		"ElasticEui_EuiTableHeaderButton": {
			"id": "ElasticEui_EuiTableHeaderButton",
			"name": "EuiTableHeaderButton",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTableHeaderButton",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"iconType": {
					"name": "iconType",
					"type": "string",
					"parent": "EuiTableHeaderButtonProps"
				}
			},
			"relativePath": "src/components/table/table_header_button.tsx"
		},
		"ElasticEui_EuiTableHeaderCell": {
			"id": "ElasticEui_EuiTableHeaderCell",
			"name": "EuiTableHeaderCell",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTableHeaderCell",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"abbr": {
					"name": "abbr",
					"type": "string",
					"parent": "ThHTMLAttributes"
				},
				"colSpan": {
					"name": "colSpan",
					"type": "number",
					"parent": "ThHTMLAttributes"
				},
				"headers": {
					"name": "headers",
					"type": "string",
					"parent": "ThHTMLAttributes"
				},
				"rowSpan": {
					"name": "rowSpan",
					"type": "number",
					"parent": "ThHTMLAttributes"
				},
				"align": {
					"name": "align",
					"type": "string",
					"enum": [
						"left",
						"right",
						"center"
					],
					"default": "left",
					"parent": "EuiTableHeaderCellProps"
				},
				"isSortAscending": {
					"name": "isSortAscending",
					"type": "boolean",
					"parent": "EuiTableHeaderCellProps"
				},
				"isSorted": {
					"name": "isSorted",
					"type": "boolean",
					"parent": "EuiTableHeaderCellProps"
				},
				"mobileOptions": {
					"name": "mobileOptions",
					"type": "unknown",
					"description": "Mobile options for displaying differently at small screens",
					"parent": "EuiTableHeaderCellProps"
				},
				"onSort": {
					"name": "onSort",
					"type": "Event",
					"parent": "EuiTableHeaderCellProps"
				},
				"scope": {
					"name": "scope",
					"type": "string",
					"enum": [
						"row",
						"rowgroup",
						"col",
						"colgroup"
					],
					"parent": "EuiTableHeaderCellProps"
				},
				"width": {
					"name": "width",
					"type": "string",
					"parent": "EuiTableHeaderCellProps"
				},
				"description": {
					"name": "description",
					"type": "string",
					"parent": "EuiTableHeaderCellProps"
				},
				"readOnly": {
					"name": "readOnly",
					"type": "boolean",
					"description": "Shows the sort indicator but removes the button",
					"parent": "EuiTableHeaderCellProps"
				}
			},
			"relativePath": "src/components/table/table_header_cell.tsx"
		},
		"ElasticEui_EuiTableHeaderCellCheckbox": {
			"id": "ElasticEui_EuiTableHeaderCellCheckbox",
			"name": "EuiTableHeaderCellCheckbox",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTableHeaderCellCheckbox",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"align": {
					"name": "align",
					"type": "string",
					"enum": [
						"left",
						"right",
						"center",
						"justify",
						"char"
					],
					"parent": "ThHTMLAttributes"
				},
				"colSpan": {
					"name": "colSpan",
					"type": "number",
					"parent": "ThHTMLAttributes"
				},
				"headers": {
					"name": "headers",
					"type": "string",
					"parent": "ThHTMLAttributes"
				},
				"rowSpan": {
					"name": "rowSpan",
					"type": "number",
					"parent": "ThHTMLAttributes"
				},
				"scope": {
					"name": "scope",
					"type": "string",
					"enum": [
						"row",
						"rowgroup",
						"col",
						"colgroup"
					],
					"default": "col",
					"parent": "ThHTMLAttributes"
				},
				"abbr": {
					"name": "abbr",
					"type": "string",
					"parent": "ThHTMLAttributes"
				},
				"width": {
					"name": "width",
					"type": "string",
					"parent": "EuiTableHeaderCellCheckboxProps"
				}
			},
			"relativePath": "src/components/table/table_header_cell_checkbox.tsx"
		},
		"ElasticEui_EuiTablePagination": {
			"id": "ElasticEui_EuiTablePagination",
			"name": "EuiTablePagination",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTablePagination",
				"lib": "elasticEui"
			},
			"props": {
				"showPerPageOptions": {
					"name": "showPerPageOptions",
					"type": "boolean",
					"default": false,
					"description": "Option to completely hide the Rows per page selector.",
					"parent": "EuiTablePaginationProps"
				},
				"itemsPerPage": {
					"name": "itemsPerPage",
					"type": "number",
					"default": 50,
					"description": "Current selection for Rows per page. Pass 0 to display the selected Show all option and hide the pagination.",
					"parent": "EuiTablePaginationProps"
				},
				"itemsPerPageOptions": {
					"name": "itemsPerPageOptions",
					"type": "array",
					"items": {
						"type": "number"
					},
					"default": null,
					"description": "Custom array of options for Rows per page. Pass 0 as one of the options to create a Show all option.",
					"parent": "EuiTablePaginationProps"
				},
				"onChangeItemsPerPage": {
					"name": "onChangeItemsPerPage",
					"type": "Event",
					"description": "Click handler that passes back selected pageSize number",
					"parent": "EuiTablePaginationProps"
				},
				"onChangePage": {
					"name": "onChangePage",
					"type": "Event",
					"parent": "EuiTablePaginationProps"
				},
				"aria-controls": {
					"name": "aria-controls",
					"type": "string",
					"description": "Requires the id of the table being controlled",
					"parent": "EuiTablePaginationProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "EuiTablePaginationProps"
				},
				"responsive": {
					"name": "responsive",
					"type": "boolean",
					"description": "Automatically reduces to the compressed version on smaller screens. Remove completely with false or provide your own list of responsive breakpoints.",
					"parent": "EuiPaginationProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"description": "If true, will only show next/prev arrows and simplified number set.",
					"parent": "EuiPaginationProps"
				},
				"pageCount": {
					"name": "pageCount",
					"type": "number",
					"description": "The total number of pages. Pass 0 if total count is unknown.",
					"parent": "EuiPaginationProps"
				},
				"activePage": {
					"name": "activePage",
					"type": "number",
					"description": "The current page using a zero based index. So if you set the activePage to 1, it will activate the second page. Pass -1 for forcing to last page.",
					"parent": "EuiPaginationProps"
				}
			},
			"relativePath": "src/components/table/table_pagination/table_pagination.tsx"
		},
		"ElasticEui_EuiTableHeaderMobile": {
			"id": "ElasticEui_EuiTableHeaderMobile",
			"name": "EuiTableHeaderMobile",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTableHeaderMobile",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/table/mobile/table_header_mobile.tsx"
		},
		"ElasticEui_EuiTableSortMobile": {
			"id": "ElasticEui_EuiTableSortMobile",
			"name": "EuiTableSortMobile",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTableSortMobile",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "EuiTableSortMobileProps"
				},
				"anchorPosition": {
					"name": "anchorPosition",
					"type": "string",
					"enum": [
						"downLeft",
						"upCenter",
						"upLeft",
						"upRight",
						"downCenter",
						"downRight",
						"leftCenter",
						"leftUp",
						"leftDown",
						"rightCenter",
						"rightUp",
						"rightDown"
					],
					"parent": "EuiTableSortMobileProps"
				},
				"items": {
					"name": "items",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "EuiTableSortMobileProps"
				}
			},
			"relativePath": "src/components/table/mobile/table_sort_mobile.tsx"
		},
		"ElasticEui_EuiTableSortMobileItem": {
			"id": "ElasticEui_EuiTableSortMobileItem",
			"name": "EuiTableSortMobileItem",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTableSortMobileItem",
				"lib": "elasticEui"
			},
			"props": {
				"onSort": {
					"name": "onSort",
					"type": "Event",
					"description": "Callback to know when an item has been clicked",
					"parent": "EuiTableSortMobileItemProps"
				},
				"isSorted": {
					"name": "isSorted",
					"type": "boolean",
					"description": "Indicates current option is the sorted on column",
					"parent": "EuiTableSortMobileItemProps"
				},
				"isSortAscending": {
					"name": "isSortAscending",
					"type": "boolean",
					"description": "Indicates which direction the current column is sorted on",
					"parent": "EuiTableSortMobileItemProps"
				},
				"ariaLabel": {
					"name": "ariaLabel",
					"type": "string",
					"parent": "EuiTableSortMobileItemProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/table/mobile/table_sort_mobile_item.tsx"
		},
		"ElasticEui_EuiTableRow": {
			"id": "ElasticEui_EuiTableRow",
			"name": "EuiTableRow",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTableRow",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"isSelectable": {
					"name": "isSelectable",
					"type": "boolean",
					"description": "Indicates if the table has a single column of checkboxes for selecting rows (affects mobile only)",
					"parent": "EuiTableRowProps"
				},
				"isSelected": {
					"name": "isSelected",
					"type": "boolean",
					"description": "Indicates the current row has been selected",
					"parent": "EuiTableRowProps"
				},
				"hasActions": {
					"name": "hasActions",
					"type": "boolean",
					"description": "Indicates if the table has a dedicated column for icon-only actions (affects mobile only)",
					"parent": "EuiTableRowProps"
				},
				"isExpandable": {
					"name": "isExpandable",
					"type": "boolean",
					"description": "Indicates if the row will have an expanded row",
					"parent": "EuiTableRowProps"
				},
				"isExpandedRow": {
					"name": "isExpandedRow",
					"type": "boolean",
					"description": "Indicates if the row will be the expanded row",
					"parent": "EuiTableRowProps"
				}
			},
			"relativePath": "src/components/table/table_row.tsx"
		},
		"ElasticEui_EuiTableRowCell": {
			"id": "ElasticEui_EuiTableRowCell",
			"name": "EuiTableRowCell",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTableRowCell",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"height": {
					"name": "height",
					"type": "string",
					"parent": "TdHTMLAttributes"
				},
				"width": {
					"name": "width",
					"type": "string",
					"parent": "TdHTMLAttributes"
				},
				"abbr": {
					"name": "abbr",
					"type": "string",
					"parent": "TdHTMLAttributes"
				},
				"align": {
					"name": "align",
					"type": "string",
					"enum": [
						"left",
						"right",
						"center"
					],
					"default": "left",
					"description": "Horizontal alignment of the text in the cell",
					"parent": "TdHTMLAttributes"
				},
				"colSpan": {
					"name": "colSpan",
					"type": "number",
					"parent": "TdHTMLAttributes"
				},
				"headers": {
					"name": "headers",
					"type": "string",
					"parent": "TdHTMLAttributes"
				},
				"rowSpan": {
					"name": "rowSpan",
					"type": "number",
					"parent": "TdHTMLAttributes"
				},
				"scope": {
					"name": "scope",
					"type": "string",
					"parent": "TdHTMLAttributes"
				},
				"valign": {
					"name": "valign",
					"type": "string",
					"enum": [
						"baseline",
						"middle",
						"top",
						"bottom"
					],
					"default": "middle",
					"description": "Vertical alignment of the content in the cell",
					"parent": "EuiTableRowCellProps"
				},
				"setScopeRow": {
					"name": "setScopeRow",
					"type": "boolean",
					"description": "Indicates whether the cell should be marked as the heading for its row",
					"parent": "EuiTableRowCellProps"
				},
				"hasActions": {
					"name": "hasActions",
					"type": "boolean",
					"description": "Indicates if the column is dedicated to icon-only actions (currently affects mobile only)",
					"parent": "EuiTableRowCellProps"
				},
				"isExpander": {
					"name": "isExpander",
					"type": "boolean",
					"description": "Indicates if the column is dedicated as the expandable row toggle",
					"parent": "EuiTableRowCellProps"
				},
				"mobileOptions": {
					"name": "mobileOptions",
					"type": "unknown",
					"description": "Mobile options for displaying differently at small screens; See #EuiTableRowCellMobileOptionsShape",
					"parent": "EuiTableRowCellProps"
				},
				"showOnHover": {
					"name": "showOnHover",
					"type": "boolean",
					"description": "_Should only be used for action cells_",
					"parent": "EuiTableRowCellSharedPropsShape"
				},
				"textOnly": {
					"name": "textOnly",
					"type": "boolean",
					"default": false,
					"description": "Setting textOnly to false will break words unnecessarily on FF and IE.  To combat this problem on FF, wrap contents with the css utility .eui-textBreakWord.",
					"parent": "EuiTableRowCellSharedPropsShape"
				},
				"truncateText": {
					"name": "truncateText",
					"type": "boolean",
					"description": "Dont allow line breaks within cells",
					"parent": "EuiTableRowCellSharedPropsShape"
				}
			},
			"relativePath": "src/components/table/table_row_cell.tsx"
		},
		"ElasticEui_EuiTableRowCellCheckbox": {
			"id": "ElasticEui_EuiTableRowCellCheckbox",
			"name": "EuiTableRowCellCheckbox",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTableRowCellCheckbox",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"align": {
					"name": "align",
					"type": "string",
					"enum": [
						"left",
						"right",
						"center",
						"justify",
						"char"
					],
					"parent": "TdHTMLAttributes"
				},
				"colSpan": {
					"name": "colSpan",
					"type": "number",
					"parent": "TdHTMLAttributes"
				},
				"headers": {
					"name": "headers",
					"type": "string",
					"parent": "TdHTMLAttributes"
				},
				"rowSpan": {
					"name": "rowSpan",
					"type": "number",
					"parent": "TdHTMLAttributes"
				},
				"scope": {
					"name": "scope",
					"type": "string",
					"parent": "TdHTMLAttributes"
				},
				"abbr": {
					"name": "abbr",
					"type": "string",
					"parent": "TdHTMLAttributes"
				},
				"height": {
					"name": "height",
					"type": "string",
					"parent": "TdHTMLAttributes"
				},
				"width": {
					"name": "width",
					"type": "string",
					"parent": "TdHTMLAttributes"
				},
				"valign": {
					"name": "valign",
					"type": "string",
					"enum": [
						"baseline",
						"middle",
						"top",
						"bottom"
					],
					"parent": "TdHTMLAttributes"
				}
			},
			"relativePath": "src/components/table/table_row_cell_checkbox.tsx"
		},
		"ElasticEui_EuiToken": {
			"id": "ElasticEui_EuiToken",
			"name": "EuiToken",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiToken",
				"lib": "elasticEui"
			},
			"required": [
				"iconType"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"iconType": {
					"name": "iconType",
					"type": "string",
					"description": "An EUI icon type",
					"parent": "TokenProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"description": "For best results use one of the vis color names (or gray). Or supply your own color (can be used with dark or no fill only). Default: gray",
					"parent": "TokenProps"
				},
				"shape": {
					"name": "shape",
					"type": "string",
					"enum": [
						"square",
						"circle",
						"rectangle"
					],
					"description": "Outer shape surrounding the icon Default: circle",
					"parent": "TokenProps"
				},
				"fill": {
					"name": "fill",
					"type": "string",
					"enum": [
						"none",
						"dark",
						"light"
					],
					"description": "light for lightened color with border, dark for solid, or none Default: light",
					"parent": "TokenProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs",
						"l"
					],
					"default": "s",
					"description": "Size of the token",
					"parent": "TokenProps"
				},
				"title": {
					"name": "title",
					"type": "string",
					"description": "The icons title. Required for accessibility",
					"parent": "TokenProps"
				},
				"aria-labelledby": {
					"name": "aria-labelledby",
					"type": "string",
					"description": "Identifies the element (or elements) that labels the current element.",
					"parent": "TokenProps"
				},
				"aria-describedby": {
					"name": "aria-describedby",
					"type": "string",
					"description": "Identifies the element (or elements) that describes the object.",
					"parent": "TokenProps"
				}
			},
			"relativePath": "src/components/token/token.tsx"
		},
		"ElasticEui_TOKEN_SIZES": {
			"id": "ElasticEui_TOKEN_SIZES",
			"name": "Sizes",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "TOKEN_SIZES",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/components/token/token.tsx"
		},
		"ElasticEui_TOKEN_SHAPES": {
			"id": "ElasticEui_TOKEN_SHAPES",
			"name": "Shapes",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "TOKEN_SHAPES",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/components/token/token.tsx"
		},
		"ElasticEui_TOKEN_COLORS": {
			"id": "ElasticEui_TOKEN_COLORS",
			"name": "Colors",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "TOKEN_COLORS",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/components/token/token.tsx"
		},
		"ElasticEui_EuiTour": {
			"id": "ElasticEui_EuiTour",
			"name": "EuiTour",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTour",
				"lib": "elasticEui"
			},
			"required": [
				"steps",
				"initialState"
			],
			"props": {
				"steps": {
					"name": "steps",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "EuiTourProps"
				},
				"initialState": {
					"name": "initialState",
					"type": "unknown",
					"parent": "EuiTourProps"
				}
			},
			"relativePath": "src/components/tour/tour.tsx"
		},
		"ElasticEui_EuiTourStep": {
			"id": "ElasticEui_EuiTourStep",
			"name": "EuiTourStep",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTourStep",
				"lib": "elasticEui"
			},
			"required": [
				"content",
				"onFinish",
				"stepsTotal",
				"title"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Provide a name to the popover panel",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-labelledby": {
					"name": "aria-labelledby",
					"type": "string",
					"description": "Alternative option to aria-label that takes an id. Usually takes the id of the popover title",
					"parent": "EuiPopoverProps"
				},
				"buttonRef": {
					"name": "buttonRef",
					"type": "Event",
					"parent": "EuiPopoverProps"
				},
				"display": {
					"name": "display",
					"type": "string",
					"enum": [
						"block",
						"inlineBlock"
					],
					"description": "CSS display type for both the popover and anchor",
					"parent": "EuiPopoverProps"
				},
				"offset": {
					"name": "offset",
					"type": "number",
					"description": "Distance away from the anchor that the popover will render",
					"parent": "EuiPopoverProps"
				},
				"panelRef": {
					"name": "panelRef",
					"type": "Event",
					"parent": "EuiPopoverProps"
				},
				"ownFocus": {
					"name": "ownFocus",
					"type": "boolean",
					"description": "Traps tab focus within the popover contents",
					"parent": "EuiPopoverProps"
				},
				"isOpen": {
					"name": "isOpen",
					"type": "boolean",
					"description": "Visibility state of the popover",
					"parent": "EuiPopoverProps"
				},
				"anchorClassName": {
					"name": "anchorClassName",
					"type": "string",
					"description": "Class name passed to the direct parent of the button",
					"parent": "EuiPopoverProps"
				},
				"anchorPosition": {
					"name": "anchorPosition",
					"type": "string",
					"enum": [
						"downLeft",
						"upCenter",
						"upLeft",
						"upRight",
						"downCenter",
						"downRight",
						"leftCenter",
						"leftUp",
						"leftDown",
						"rightCenter",
						"rightUp",
						"rightDown"
					],
					"default": "leftUp",
					"description": "Alignment of the popover and arrow relative to the button",
					"parent": "EuiPopoverProps"
				},
				"attachToAnchor": {
					"name": "attachToAnchor",
					"type": "boolean",
					"description": "Style and position alteration for arrow-less, left-aligned attachment. Intended for use with inputs as anchors, e.g. EuiInputPopover",
					"parent": "EuiPopoverProps"
				},
				"container": {
					"name": "container",
					"type": "Node",
					"description": "Restrict the popovers position within this element",
					"parent": "EuiPopoverProps"
				},
				"focusTrapProps": {
					"name": "focusTrapProps",
					"type": "unknown",
					"description": "Object of props passed to EuiFocusTrap",
					"parent": "EuiPopoverProps"
				},
				"hasArrow": {
					"name": "hasArrow",
					"type": "boolean",
					"description": "Show arrow indicating to originating button",
					"parent": "EuiPopoverProps"
				},
				"initialFocus": {
					"name": "initialFocus",
					"type": "string",
					"description": "Specifies what element should initially have focus; Can be a DOM node, or a selector string (which will be passed to document.querySelector() to find the DOM node), or a function that returns a DOM node Set to false to prevent initial auto-focus. Use only when your app handles setting initial focus state.",
					"parent": "EuiPopoverProps"
				},
				"insert": {
					"name": "insert",
					"type": "unknown",
					"description": "Passed directly to EuiPortal for DOM positioning. Both properties are required if prop is specified",
					"parent": "EuiPopoverProps"
				},
				"panelClassName": {
					"name": "panelClassName",
					"type": "string",
					"description": "Custom class added to the EuiPanel containing the popover contents",
					"parent": "EuiPopoverProps"
				},
				"panelPaddingSize": {
					"name": "panelPaddingSize",
					"type": "string",
					"enum": [
						"none",
						"s",
						"m",
						"l"
					],
					"description": "EuiPanel padding on all sides",
					"parent": "EuiPopoverProps"
				},
				"panelStyle": {
					"name": "panelStyle",
					"type": "object",
					"description": "Standard DOM style attribute. Passed to the EuiPanel",
					"parent": "EuiPopoverProps"
				},
				"panelProps": {
					"name": "panelProps",
					"type": "unknown",
					"description": "Object of props passed to EuiPanel",
					"parent": "EuiPopoverProps"
				},
				"popoverRef": {
					"name": "popoverRef",
					"type": "Event",
					"parent": "EuiPopoverProps"
				},
				"repositionOnScroll": {
					"name": "repositionOnScroll",
					"type": "boolean",
					"description": "When true, the popovers position is re-calculated when the user scrolls, this supports having fixed-position popover anchors. When nesting an EuiPopover in a scrollable container, repositionOnScroll should be true",
					"parent": "EuiPopoverProps"
				},
				"zIndex": {
					"name": "zIndex",
					"type": "number",
					"description": "By default, popover content inherits the z-index of the anchor component; pass zIndex to override",
					"parent": "EuiPopoverProps"
				},
				"onTrapDeactivation": {
					"name": "onTrapDeactivation",
					"type": "Event",
					"description": "Function callback for when the focus trap is deactivated",
					"parent": "EuiPopoverProps"
				},
				"buffer": {
					"name": "buffer",
					"type": "number",
					"description": "Minimum distance between the popover and the bounding container; Pass an array of 4 values to adjust each side differently: [top, right, bottom, left] Default is 16",
					"parent": "EuiPopoverProps"
				},
				"arrowChildren": {
					"name": "arrowChildren",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Element to pass as the child element of the arrow; Use case is typically limited to an accompanying EuiBeacon",
					"parent": "EuiPopoverProps"
				},
				"closePopover": {
					"name": "closePopover",
					"type": "unknown",
					"description": "Callback to handle hiding of the popover",
					"parent": "EuiPopoverProps"
				},
				"children": {
					"name": "children",
					"type": "array",
					"description": "Element to which the tour step popover attaches when open",
					"items": {
						"type": "Node"
					},
					"parent": "EuiTourStepAnchorProps"
				},
				"anchor": {
					"name": "anchor",
					"type": "string",
					"description": "Selector or reference to the element to which the tour step popover attaches when open",
					"parent": "EuiTourStepAnchorProps"
				},
				"content": {
					"name": "content",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Contents of the tour step popover",
					"parent": "EuiTourStepProps"
				},
				"isStepOpen": {
					"name": "isStepOpen",
					"type": "boolean",
					"default": false,
					"description": "Step will display if set to true",
					"parent": "EuiTourStepProps"
				},
				"minWidth": {
					"name": "minWidth",
					"type": "number",
					"default": 300,
					"description": "Change the default min width of the popover panel",
					"parent": "EuiTourStepProps"
				},
				"maxWidth": {
					"name": "maxWidth",
					"type": "number",
					"default": 600,
					"description": "Change the default max width of the popover panel",
					"parent": "EuiTourStepProps"
				},
				"onFinish": {
					"name": "onFinish",
					"type": "Event",
					"description": "Function to call for Skip tour and End tour actions",
					"parent": "EuiTourStepProps"
				},
				"step": {
					"name": "step",
					"type": "number",
					"default": 1,
					"description": "The number of the step within the parent tour. 1-based indexing.",
					"parent": "EuiTourStepProps"
				},
				"stepsTotal": {
					"name": "stepsTotal",
					"type": "number",
					"description": "The total number of steps in the tour",
					"parent": "EuiTourStepProps"
				},
				"style": {
					"name": "style",
					"type": "object",
					"description": "Optional, standard DOM style attribute. Passed to the EuiPopover panel.",
					"parent": "EuiTourStepProps"
				},
				"subtitle": {
					"name": "subtitle",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Smaller title text that appears atop each step in the tour. The subtitle gets wrapped in the appropriate heading level.",
					"parent": "EuiTourStepProps"
				},
				"title": {
					"name": "title",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Larger title text specific to this step. The title gets wrapped in the appropriate heading level.",
					"parent": "EuiTourStepProps"
				},
				"decoration": {
					"name": "decoration",
					"type": "string",
					"enum": [
						"none",
						"beacon"
					],
					"default": "beacon",
					"description": "Extra visual indication of step location",
					"parent": "EuiTourStepProps"
				},
				"footerAction": {
					"name": "footerAction",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Element to replace the Skip tour link in the footer",
					"parent": "EuiTourStepProps"
				}
			},
			"relativePath": "src/components/tour/tour_step.tsx"
		},
		"ElasticEui_EuiTourStepIndicator": {
			"id": "ElasticEui_EuiTourStepIndicator",
			"name": "EuiTourStepIndicator",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTourStepIndicator",
				"lib": "elasticEui"
			},
			"required": [
				"number",
				"status"
			],
			"props": {
				"number": {
					"name": "number",
					"type": "number",
					"parent": "EuiTourStepIndicatorProps"
				},
				"status": {
					"name": "status",
					"type": "string",
					"enum": [
						"active",
						"incomplete",
						"complete"
					],
					"parent": "EuiTourStepIndicatorProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/tour/tour_step_indicator.tsx"
		},
		"ElasticEui_useEuiTour": {
			"id": "ElasticEui_useEuiTour",
			"name": "UseEuiTour",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useEuiTour",
				"lib": "elasticEui"
			},
			"required": [
				"length",
				"pop",
				"push",
				"concat",
				"join",
				"reverse",
				"shift",
				"slice",
				"sort",
				"splice",
				"unshift",
				"indexOf",
				"lastIndexOf",
				"every",
				"some",
				"forEach",
				"map",
				"filter",
				"reduce",
				"reduceRight",
				"find",
				"findIndex",
				"fill",
				"copyWithin",
				"entries",
				"keys",
				"values",
				"includes",
				"flatMap",
				"flat",
				"__@iterator@43",
				"__@unscopables@327"
			],
			"props": {
				"length": {
					"name": "length",
					"type": "number",
					"description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
					"parent": "Array"
				},
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of an array.",
					"parent": "Array"
				},
				"toLocaleString": {
					"name": "toLocaleString",
					"type": "Event",
					"description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
					"parent": "Array"
				},
				"pop": {
					"name": "pop",
					"type": "Event",
					"description": "Removes the last element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"push": {
					"name": "push",
					"type": "Event",
					"description": "Appends new elements to the end of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"concat": {
					"name": "concat",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Combines two or more arrays. This method returns a new array without modifying any existing arrays.",
					"parent": "Array"
				},
				"join": {
					"name": "join",
					"type": "Event",
					"description": "Adds all the elements of an array into a string, separated by the specified separator string.",
					"parent": "Array"
				},
				"reverse": {
					"name": "reverse",
					"type": "Event",
					"description": "Reverses the elements in an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"shift": {
					"name": "shift",
					"type": "Event",
					"description": "Removes the first element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a copy of a section of an array. For both start and end, a negative index can be used to indicate an offset from the end of the array. For example, -2 refers to the second to last element of the array.",
					"parent": "Array"
				},
				"sort": {
					"name": "sort",
					"type": "Event",
					"description": "Sorts an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"splice": {
					"name": "splice",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
					"parent": "Array"
				},
				"unshift": {
					"name": "unshift",
					"type": "Event",
					"description": "Inserts new elements at the start of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"every": {
					"name": "every",
					"type": "Event",
					"description": "Determines whether all the members of an array satisfy the specified test.",
					"parent": "Array"
				},
				"some": {
					"name": "some",
					"type": "Event",
					"description": "Determines whether the specified callback function returns true for any element of an array.",
					"parent": "Array"
				},
				"forEach": {
					"name": "forEach",
					"type": "Event",
					"description": "Performs the specified action for each element in an array.",
					"parent": "Array"
				},
				"map": {
					"name": "map",
					"type": "Event",
					"description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
					"parent": "Array"
				},
				"filter": {
					"name": "filter",
					"type": "Event",
					"description": "Returns the elements of an array that meet the condition specified in a callback function.",
					"parent": "Array"
				},
				"reduce": {
					"name": "reduce",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"reduceRight": {
					"name": "reduceRight",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"find": {
					"name": "find",
					"description": "Returns the value of the first element in the array where predicate is true, and undefined otherwise.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"findIndex": {
					"name": "findIndex",
					"type": "Event",
					"description": "Returns the index of the first element in the array where predicate is true, and -1 otherwise.",
					"parent": "Array"
				},
				"fill": {
					"name": "fill",
					"type": "Event",
					"description": "Changes all array elements from start to end index to a static value and returns the modified array",
					"parent": "Array"
				},
				"copyWithin": {
					"name": "copyWithin",
					"type": "Event",
					"description": "Returns the this object after copying a section of the array identified by start and end to the same array starting at position target",
					"parent": "Array"
				},
				"entries": {
					"name": "entries",
					"type": "Event",
					"description": "Returns an iterable of key, value pairs for every entry in the array",
					"parent": "Array"
				},
				"keys": {
					"name": "keys",
					"type": "Event",
					"description": "Returns an iterable of keys in the array",
					"parent": "Array"
				},
				"values": {
					"name": "values",
					"type": "Event",
					"description": "Returns an iterable of values in the array",
					"parent": "Array"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Determines whether an array includes a certain element, returning true or false as appropriate.",
					"parent": "Array"
				},
				"flatMap": {
					"name": "flatMap",
					"description": "Calls a defined callback function on each element of an array. Then, flattens the result into a new array. This is identical to a map followed by flat with depth 1.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"flat": {
					"name": "flat",
					"type": "Event",
					"description": "Returns a new array with all sub-array elements concatenated into it recursively up to the specified depth.",
					"parent": "Array"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "Array"
				},
				"__@unscopables@327": {
					"name": "__@unscopables@327",
					"type": "Event",
					"description": "Returns an object whose properties have the value true when they will be absent when used in a with statement.",
					"parent": "Array"
				}
			},
			"relativePath": "src/components/tour/useEuiTour.tsx"
		},
		"ElasticEui_EuiBasicTable": {
			"id": "ElasticEui_EuiBasicTable",
			"name": "EuiBasicTable",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiBasicTable",
				"lib": "elasticEui"
			},
			"required": [
				"items",
				"columns"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"itemId": {
					"name": "itemId",
					"type": "string",
					"description": "Describes how to extract a unique ID from each item, used for selections & expanded rows",
					"parent": "BasicTableProps"
				},
				"itemIdToExpandedRowMap": {
					"name": "itemIdToExpandedRowMap",
					"type": "unknown",
					"description": "Row expansion uses the itemId prop to identify each row",
					"parent": "BasicTableProps"
				},
				"items": {
					"name": "items",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "A list of objects to who in the table - an item per row",
					"parent": "BasicTableProps"
				},
				"cellProps": {
					"name": "cellProps",
					"type": "object",
					"description": "Applied to EuiTableRowCell",
					"parent": "BasicTableProps"
				},
				"columns": {
					"name": "columns",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "An array of one of the objects: #EuiTableFieldDataColumnType, #EuiTableComputedColumnType or #EuiTableActionsColumnType.",
					"parent": "BasicTableProps"
				},
				"error": {
					"name": "error",
					"type": "string",
					"description": "Error message to display",
					"parent": "BasicTableProps"
				},
				"tableCaption": {
					"name": "tableCaption",
					"type": "string",
					"description": "Describes the content of the table. If not specified, the caption will be This table contains {itemCount} rows.",
					"parent": "BasicTableProps"
				},
				"rowHeader": {
					"name": "rowHeader",
					"type": "string",
					"description": "Indicates which column should be used as the identifying cell in each row. Should match a field prop in FieldDataColumn",
					"parent": "BasicTableProps"
				},
				"hasActions": {
					"name": "hasActions",
					"type": "boolean",
					"parent": "BasicTableProps"
				},
				"isExpandable": {
					"name": "isExpandable",
					"type": "boolean",
					"parent": "BasicTableProps"
				},
				"isSelectable": {
					"name": "isSelectable",
					"type": "boolean",
					"parent": "BasicTableProps"
				},
				"loading": {
					"name": "loading",
					"type": "boolean",
					"description": "Provides an infinite loading indicator",
					"parent": "BasicTableProps"
				},
				"noItemsMessage": {
					"name": "noItemsMessage",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Message to display if table is empty",
					"parent": "BasicTableProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"description": "Called whenever pagination or sorting changes (this property is required when either pagination or sorting is configured). See #Criteria or #CriteriaWithPagination",
					"parent": "BasicTableProps"
				},
				"pagination": {
					"name": "pagination",
					"type": "unknown",
					"description": "Configures #Pagination",
					"parent": "BasicTableProps"
				},
				"responsive": {
					"name": "responsive",
					"type": "boolean",
					"default": false,
					"description": "If true, will convert table to cards in mobile view",
					"parent": "BasicTableProps"
				},
				"rowProps": {
					"name": "rowProps",
					"type": "object",
					"description": "Applied to EuiTableRow",
					"parent": "BasicTableProps"
				},
				"selection": {
					"name": "selection",
					"type": "unknown",
					"description": "Configures #EuiTableSelectionType",
					"parent": "BasicTableProps"
				},
				"sorting": {
					"name": "sorting",
					"type": "unknown",
					"description": "Configures #EuiTableSortingType",
					"parent": "BasicTableProps"
				},
				"tableLayout": {
					"name": "tableLayout",
					"type": "string",
					"enum": [
						"fixed",
						"auto"
					],
					"default": "fixed",
					"description": "Sets the table-layout CSS property. Note that auto tableLayout prevents truncateText from working properly.",
					"parent": "BasicTableProps"
				},
				"textOnly": {
					"name": "textOnly",
					"type": "boolean",
					"description": "Applied to table cells => Any cell using render function will set this to be false, leading to unnecessary word breaks. Apply textOnly: true in order to ensure it breaks properly",
					"parent": "BasicTableProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"parent": "EuiTableProps"
				}
			},
			"relativePath": "src/components/basic_table/basic_table.tsx"
		},
		"ElasticEui_EuiInMemoryTable": {
			"id": "ElasticEui_EuiInMemoryTable",
			"name": "EuiInMemoryTable",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiInMemoryTable",
				"lib": "elasticEui"
			},
			"required": [
				"items",
				"columns"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"onChange": {
					"name": "onChange",
					"type": "Event",
					"description": "Called whenever pagination or sorting changes (this property is required when either pagination or sorting is configured). See #Criteria or #CriteriaWithPagination",
					"parent": "BasicTableProps"
				},
				"responsive": {
					"name": "responsive",
					"type": "boolean",
					"default": false,
					"description": "If true, will convert table to cards in mobile view",
					"parent": "BasicTableProps"
				},
				"compressed": {
					"name": "compressed",
					"type": "boolean",
					"parent": "EuiTableProps"
				},
				"items": {
					"name": "items",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "A list of objects to who in the table - an item per row",
					"parent": "BasicTableProps"
				},
				"columns": {
					"name": "columns",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "An array of one of the objects: #EuiTableFieldDataColumnType, #EuiTableComputedColumnType or #EuiTableActionsColumnType.",
					"parent": "BasicTableProps"
				},
				"loading": {
					"name": "loading",
					"type": "boolean",
					"description": "Provides an infinite loading indicator",
					"parent": "BasicTableProps"
				},
				"error": {
					"name": "error",
					"type": "string",
					"description": "Error message to display",
					"parent": "BasicTableProps"
				},
				"tableLayout": {
					"name": "tableLayout",
					"type": "string",
					"enum": [
						"fixed",
						"auto"
					],
					"default": "fixed",
					"description": "Sets the table-layout CSS property. Note that auto tableLayout prevents truncateText from working properly.",
					"parent": "BasicTableProps"
				},
				"isSelectable": {
					"name": "isSelectable",
					"type": "boolean",
					"parent": "BasicTableProps"
				},
				"hasActions": {
					"name": "hasActions",
					"type": "boolean",
					"parent": "BasicTableProps"
				},
				"isExpandable": {
					"name": "isExpandable",
					"type": "boolean",
					"parent": "BasicTableProps"
				},
				"textOnly": {
					"name": "textOnly",
					"type": "boolean",
					"description": "Applied to table cells => Any cell using render function will set this to be false, leading to unnecessary word breaks. Apply textOnly: true in order to ensure it breaks properly",
					"parent": "BasicTableProps"
				},
				"itemId": {
					"name": "itemId",
					"type": "string",
					"description": "Describes how to extract a unique ID from each item, used for selections & expanded rows",
					"parent": "BasicTableProps"
				},
				"itemIdToExpandedRowMap": {
					"name": "itemIdToExpandedRowMap",
					"type": "unknown",
					"description": "Row expansion uses the itemId prop to identify each row",
					"parent": "BasicTableProps"
				},
				"cellProps": {
					"name": "cellProps",
					"type": "object",
					"description": "Applied to EuiTableRowCell",
					"parent": "BasicTableProps"
				},
				"tableCaption": {
					"name": "tableCaption",
					"type": "string",
					"description": "Describes the content of the table. If not specified, the caption will be This table contains {itemCount} rows.",
					"parent": "BasicTableProps"
				},
				"rowHeader": {
					"name": "rowHeader",
					"type": "string",
					"description": "Indicates which column should be used as the identifying cell in each row. Should match a field prop in FieldDataColumn",
					"parent": "BasicTableProps"
				},
				"rowProps": {
					"name": "rowProps",
					"type": "object",
					"description": "Applied to EuiTableRow",
					"parent": "BasicTableProps"
				},
				"selection": {
					"name": "selection",
					"type": "unknown",
					"description": "Configures #EuiTableSelectionType",
					"parent": "BasicTableProps"
				},
				"message": {
					"name": "message",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"parent": "InMemoryTableProps"
				},
				"search": {
					"name": "search",
					"type": "boolean",
					"description": "Configures #Search.",
					"parent": "InMemoryTableProps"
				},
				"pagination": {
					"name": "pagination",
					"type": "boolean",
					"parent": "InMemoryTableProps"
				},
				"sorting": {
					"name": "sorting",
					"type": "boolean",
					"parent": "InMemoryTableProps"
				},
				"allowNeutralSort": {
					"name": "allowNeutralSort",
					"type": "boolean",
					"description": "Set allowNeutralSort to false to force column sorting. Defaults to true.",
					"parent": "InMemoryTableProps"
				},
				"onTableChange": {
					"name": "onTableChange",
					"type": "Event",
					"description": "Callback for when table pagination or sorting is changed. This is meant to be informational only, and not used to set any state as the in-memory table already manages this state. See #Criteria or #CriteriaWithPagination.",
					"parent": "InMemoryTableProps"
				},
				"executeQueryOptions": {
					"name": "executeQueryOptions",
					"type": "Event",
					"parent": "InMemoryTableProps"
				},
				"childrenBetween": {
					"name": "childrenBetween",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Insert content between the search bar and table components.",
					"parent": "InMemoryTableProps"
				}
			},
			"relativePath": "src/components/basic_table/in_memory_table.tsx"
		},
		"ElasticEui_EuiTab": {
			"id": "ElasticEui_EuiTab",
			"name": "EuiTab",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTab",
				"lib": "elasticEui"
			},
			"props": {
				"href": {
					"name": "href",
					"type": "string",
					"parent": "EuiTabPropsForAnchor"
				},
				"download": {
					"name": "download",
					"type": "unknown",
					"parent": "AnchorHTMLAttributes"
				},
				"hrefLang": {
					"name": "hrefLang",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"media": {
					"name": "media",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"ping": {
					"name": "ping",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"rel": {
					"name": "rel",
					"type": "string",
					"parent": "AnchorHTMLAttributes"
				},
				"target": {
					"name": "target",
					"type": "string",
					"enum": [
						"_self",
						"_blank",
						"_parent",
						"_top"
					],
					"parent": "AnchorHTMLAttributes"
				},
				"referrerPolicy": {
					"name": "referrerPolicy",
					"type": "string",
					"enum": [
						"",
						"no-referrer",
						"no-referrer-when-downgrade",
						"origin",
						"origin-when-cross-origin",
						"same-origin",
						"strict-origin",
						"strict-origin-when-cross-origin",
						"unsafe-url"
					],
					"parent": "AnchorHTMLAttributes"
				},
				"isSelected": {
					"name": "isSelected",
					"type": "boolean",
					"parent": "EuiTabProps"
				},
				"disabled": {
					"name": "disabled",
					"type": "boolean",
					"parent": "EuiTabProps"
				},
				"prepend": {
					"name": "prepend",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Places content before the tab content/children. Will be excluded from interactive effects.",
					"parent": "EuiTabProps"
				},
				"append": {
					"name": "append",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Places content after the tab content/children. Will be excluded from interactive effects.",
					"parent": "EuiTabProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"onClick": {
					"name": "onClick",
					"type": "Event",
					"parent": "EuiTabPropsForButton"
				}
			},
			"relativePath": "src/components/tabs/tab.tsx"
		},
		"ElasticEui_EuiTabs": {
			"id": "ElasticEui_EuiTabs",
			"name": "EuiTabs",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTabs",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"display": {
					"name": "display",
					"type": "string",
					"enum": [
						"default",
						"condensed"
					],
					"default": "default",
					"description": "*DEPRECATED IN AMSTERDAM** Choose default or alternative condensed display styles.",
					"parent": "EuiTabsProps"
				},
				"expand": {
					"name": "expand",
					"type": "boolean",
					"default": false,
					"description": "Evenly stretches each tab to fill the horizontal space",
					"parent": "EuiTabsProps"
				},
				"bottomBorder": {
					"name": "bottomBorder",
					"type": "boolean",
					"default": false,
					"description": "Adds a bottom border to separate it from the content after",
					"parent": "EuiTabsProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m",
						"l",
						"xl"
					],
					"default": "m",
					"description": "Sizes affect both font size and overall size. Only use the xl size when displayed as page titles.",
					"parent": "EuiTabsProps"
				},
				"ref": {
					"name": "ref",
					"type": "Event",
					"parent": "RefAttributes"
				}
			},
			"relativePath": "src/components/tabs/tabs.tsx"
		},
		"ElasticEui_EuiTabbedContent": {
			"id": "ElasticEui_EuiTabbedContent",
			"name": "EuiTabbedContent",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTabbedContent",
				"lib": "elasticEui"
			},
			"required": [
				"tabs"
			],
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"autoFocus": {
					"name": "autoFocus",
					"type": "string",
					"enum": [
						"initial",
						"selected"
					],
					"default": "initial",
					"description": "When tabbing into the tabs, set the focus on initial for the first tab, or selected for the currently selected tab. Best use case is for inside of overlay content like popovers or flyouts.",
					"parent": "EuiTabbedContentProps"
				},
				"display": {
					"name": "display",
					"type": "string",
					"enum": [
						"default",
						"condensed"
					],
					"description": "Choose default or alternative condensed display styles",
					"parent": "EuiTabbedContentProps"
				},
				"expand": {
					"name": "expand",
					"type": "boolean",
					"description": "Evenly stretches each tab to fill the horizontal space",
					"parent": "EuiTabbedContentProps"
				},
				"initialSelectedTab": {
					"name": "initialSelectedTab",
					"type": "unknown",
					"description": "Use this prop to set the initially selected tab while letting the tabbed content component control selection state internally",
					"parent": "EuiTabbedContentProps"
				},
				"onTabClick": {
					"name": "onTabClick",
					"type": "Event",
					"parent": "EuiTabbedContentProps"
				},
				"selectedTab": {
					"name": "selectedTab",
					"type": "unknown",
					"description": "Use this prop if you want to control selection state within the owner component",
					"parent": "EuiTabbedContentProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m",
						"l",
						"xl"
					],
					"parent": "EuiTabbedContentProps"
				},
				"tabs": {
					"name": "tabs",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Each tab needs id and content properties, so we can associate it with its panel for accessibility. The name property (a node) is also required to display to the user.",
					"parent": "EuiTabbedContentProps"
				}
			},
			"relativePath": "src/components/tabs/tabbed_content/tabbed_content.tsx"
		},
		"ElasticEui_EuiText": {
			"id": "ElasticEui_EuiText",
			"name": "EuiText",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiText",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"textAlign": {
					"name": "textAlign",
					"type": "string",
					"enum": [
						"left",
						"right",
						"center"
					],
					"parent": "EuiTextProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs",
						"relative"
					],
					"default": "m",
					"description": "Determines the text size. Choose relative to control the font-size based on the value of a parent container.",
					"parent": "EuiTextProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"accent",
						"success",
						"warning",
						"danger",
						"ghost",
						"inherit",
						"-moz-initial",
						"initial",
						"revert",
						"unset",
						"default",
						"subdued",
						"aliceblue",
						"antiquewhite",
						"aqua",
						"aquamarine",
						"azure",
						"beige",
						"bisque",
						"black",
						"blanchedalmond",
						"blue",
						"blueviolet",
						"brown",
						"burlywood",
						"cadetblue",
						"chartreuse",
						"chocolate",
						"coral",
						"cornflowerblue",
						"cornsilk",
						"crimson",
						"cyan",
						"darkblue",
						"darkcyan",
						"darkgoldenrod",
						"darkgray",
						"darkgreen",
						"darkgrey",
						"darkkhaki",
						"darkmagenta",
						"darkolivegreen",
						"darkorange",
						"darkorchid",
						"darkred",
						"darksalmon",
						"darkseagreen",
						"darkslateblue",
						"darkslategray",
						"darkslategrey",
						"darkturquoise",
						"darkviolet",
						"deeppink",
						"deepskyblue",
						"dimgray",
						"dimgrey",
						"dodgerblue",
						"firebrick",
						"floralwhite",
						"forestgreen",
						"fuchsia",
						"gainsboro",
						"ghostwhite",
						"gold",
						"goldenrod",
						"gray",
						"green",
						"greenyellow",
						"grey",
						"honeydew",
						"hotpink",
						"indianred",
						"indigo",
						"ivory",
						"khaki",
						"lavender",
						"lavenderblush",
						"lawngreen",
						"lemonchiffon",
						"lightblue",
						"lightcoral",
						"lightcyan",
						"lightgoldenrodyellow",
						"lightgray",
						"lightgreen",
						"lightgrey",
						"lightpink",
						"lightsalmon",
						"lightseagreen",
						"lightskyblue",
						"lightslategray",
						"lightslategrey",
						"lightsteelblue",
						"lightyellow",
						"lime",
						"limegreen",
						"linen",
						"magenta",
						"maroon",
						"mediumaquamarine",
						"mediumblue",
						"mediumorchid",
						"mediumpurple",
						"mediumseagreen",
						"mediumslateblue",
						"mediumspringgreen",
						"mediumturquoise",
						"mediumvioletred",
						"midnightblue",
						"mintcream",
						"mistyrose",
						"moccasin",
						"navajowhite",
						"navy",
						"oldlace",
						"olive",
						"olivedrab",
						"orange",
						"orangered",
						"orchid",
						"palegoldenrod",
						"palegreen",
						"paleturquoise",
						"palevioletred",
						"papayawhip",
						"peachpuff",
						"peru",
						"pink",
						"plum",
						"powderblue",
						"purple",
						"rebeccapurple",
						"red",
						"rosybrown",
						"royalblue",
						"saddlebrown",
						"salmon",
						"sandybrown",
						"seagreen",
						"seashell",
						"sienna",
						"silver",
						"skyblue",
						"slateblue",
						"slategray",
						"slategrey",
						"snow",
						"springgreen",
						"steelblue",
						"tan",
						"teal",
						"thistle",
						"tomato",
						"transparent",
						"turquoise",
						"violet",
						"wheat",
						"white",
						"whitesmoke",
						"yellow",
						"yellowgreen",
						"ActiveBorder",
						"ActiveCaption",
						"AppWorkspace",
						"Background",
						"ButtonFace",
						"ButtonHighlight",
						"ButtonShadow",
						"ButtonText",
						"CaptionText",
						"GrayText",
						"Highlight",
						"HighlightText",
						"InactiveBorder",
						"InactiveCaption",
						"InactiveCaptionText",
						"InfoBackground",
						"InfoText",
						"Menu",
						"MenuText",
						"Scrollbar",
						"ThreeDDarkShadow",
						"ThreeDFace",
						"ThreeDHighlight",
						"ThreeDLightShadow",
						"ThreeDShadow",
						"Window",
						"WindowFrame",
						"WindowText",
						"currentcolor"
					],
					"description": "Any of our named colors or a hex, rgb or rgba value.",
					"parent": "EuiTextProps"
				},
				"grow": {
					"name": "grow",
					"type": "boolean",
					"default": false,
					"parent": "EuiTextProps"
				}
			},
			"relativePath": "src/components/text/text.tsx"
		},
		"ElasticEui_EuiTextColor": {
			"id": "ElasticEui_EuiTextColor",
			"name": "EuiTextColor",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTextColor",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"accent",
						"success",
						"warning",
						"danger",
						"ghost",
						"inherit",
						"-moz-initial",
						"initial",
						"revert",
						"unset",
						"default",
						"subdued",
						"aliceblue",
						"antiquewhite",
						"aqua",
						"aquamarine",
						"azure",
						"beige",
						"bisque",
						"black",
						"blanchedalmond",
						"blue",
						"blueviolet",
						"brown",
						"burlywood",
						"cadetblue",
						"chartreuse",
						"chocolate",
						"coral",
						"cornflowerblue",
						"cornsilk",
						"crimson",
						"cyan",
						"darkblue",
						"darkcyan",
						"darkgoldenrod",
						"darkgray",
						"darkgreen",
						"darkgrey",
						"darkkhaki",
						"darkmagenta",
						"darkolivegreen",
						"darkorange",
						"darkorchid",
						"darkred",
						"darksalmon",
						"darkseagreen",
						"darkslateblue",
						"darkslategray",
						"darkslategrey",
						"darkturquoise",
						"darkviolet",
						"deeppink",
						"deepskyblue",
						"dimgray",
						"dimgrey",
						"dodgerblue",
						"firebrick",
						"floralwhite",
						"forestgreen",
						"fuchsia",
						"gainsboro",
						"ghostwhite",
						"gold",
						"goldenrod",
						"gray",
						"green",
						"greenyellow",
						"grey",
						"honeydew",
						"hotpink",
						"indianred",
						"indigo",
						"ivory",
						"khaki",
						"lavender",
						"lavenderblush",
						"lawngreen",
						"lemonchiffon",
						"lightblue",
						"lightcoral",
						"lightcyan",
						"lightgoldenrodyellow",
						"lightgray",
						"lightgreen",
						"lightgrey",
						"lightpink",
						"lightsalmon",
						"lightseagreen",
						"lightskyblue",
						"lightslategray",
						"lightslategrey",
						"lightsteelblue",
						"lightyellow",
						"lime",
						"limegreen",
						"linen",
						"magenta",
						"maroon",
						"mediumaquamarine",
						"mediumblue",
						"mediumorchid",
						"mediumpurple",
						"mediumseagreen",
						"mediumslateblue",
						"mediumspringgreen",
						"mediumturquoise",
						"mediumvioletred",
						"midnightblue",
						"mintcream",
						"mistyrose",
						"moccasin",
						"navajowhite",
						"navy",
						"oldlace",
						"olive",
						"olivedrab",
						"orange",
						"orangered",
						"orchid",
						"palegoldenrod",
						"palegreen",
						"paleturquoise",
						"palevioletred",
						"papayawhip",
						"peachpuff",
						"peru",
						"pink",
						"plum",
						"powderblue",
						"purple",
						"rebeccapurple",
						"red",
						"rosybrown",
						"royalblue",
						"saddlebrown",
						"salmon",
						"sandybrown",
						"seagreen",
						"seashell",
						"sienna",
						"silver",
						"skyblue",
						"slateblue",
						"slategray",
						"slategrey",
						"snow",
						"springgreen",
						"steelblue",
						"tan",
						"teal",
						"thistle",
						"tomato",
						"transparent",
						"turquoise",
						"violet",
						"wheat",
						"white",
						"whitesmoke",
						"yellow",
						"yellowgreen",
						"ActiveBorder",
						"ActiveCaption",
						"AppWorkspace",
						"Background",
						"ButtonFace",
						"ButtonHighlight",
						"ButtonShadow",
						"ButtonText",
						"CaptionText",
						"GrayText",
						"Highlight",
						"HighlightText",
						"InactiveBorder",
						"InactiveCaption",
						"InactiveCaptionText",
						"InfoBackground",
						"InfoText",
						"Menu",
						"MenuText",
						"Scrollbar",
						"ThreeDDarkShadow",
						"ThreeDFace",
						"ThreeDHighlight",
						"ThreeDLightShadow",
						"ThreeDShadow",
						"Window",
						"WindowFrame",
						"WindowText",
						"currentcolor"
					],
					"default": "default",
					"description": "Any of our named colors or a hex, rgb or rgba value.",
					"parent": "EuiTextColorProps"
				},
				"component": {
					"name": "component",
					"type": "string",
					"enum": [
						"div",
						"span"
					],
					"default": "span",
					"description": "Determines the root element",
					"parent": "EuiTextColorProps"
				}
			},
			"relativePath": "src/components/text/text_color.tsx"
		},
		"ElasticEui_EuiTextAlign": {
			"id": "ElasticEui_EuiTextAlign",
			"name": "EuiTextAlign",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTextAlign",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"textAlign": {
					"name": "textAlign",
					"type": "string",
					"enum": [
						"left",
						"right",
						"center"
					],
					"default": "left",
					"parent": "EuiTextAlignProps"
				}
			},
			"relativePath": "src/components/text/text_align.tsx"
		},
		"ElasticEui_useEuiTextDiff": {
			"id": "ElasticEui_useEuiTextDiff",
			"name": "UseEuiTextDiff",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useEuiTextDiff",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Defines a string value that labels the current element.",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"beforeText": {
					"name": "beforeText",
					"type": "string",
					"default": "",
					"description": "The starting string",
					"parent": "Props"
				},
				"afterText": {
					"name": "afterText",
					"type": "string",
					"default": "",
					"description": "The string used to compare against beforeText",
					"parent": "Props"
				},
				"insertComponent": {
					"name": "insertComponent",
					"type": "string",
					"enum": [
						"symbol",
						"object",
						"article",
						"button",
						"dialog",
						"figure",
						"form",
						"img",
						"link",
						"main",
						"menu",
						"menuitem",
						"option",
						"switch",
						"table",
						"text",
						"style",
						"slot",
						"title",
						"s",
						"filter",
						"image",
						"stop",
						"time",
						"div",
						"fieldset",
						"legend",
						"big",
						"small",
						"sub",
						"sup",
						"clipPath",
						"mask",
						"path",
						"label",
						"a",
						"span",
						"input",
						"abbr",
						"address",
						"area",
						"aside",
						"audio",
						"b",
						"base",
						"bdi",
						"bdo",
						"blockquote",
						"body",
						"br",
						"canvas",
						"caption",
						"cite",
						"code",
						"col",
						"colgroup",
						"data",
						"datalist",
						"dd",
						"del",
						"details",
						"dfn",
						"dl",
						"dt",
						"em",
						"embed",
						"figcaption",
						"footer",
						"h1",
						"h2",
						"h3",
						"h4",
						"h5",
						"h6",
						"head",
						"header",
						"hgroup",
						"hr",
						"html",
						"i",
						"iframe",
						"ins",
						"kbd",
						"keygen",
						"li",
						"map",
						"mark",
						"meta",
						"meter",
						"nav",
						"noscript",
						"ol",
						"optgroup",
						"output",
						"p",
						"param",
						"picture",
						"pre",
						"progress",
						"q",
						"rp",
						"rt",
						"ruby",
						"samp",
						"script",
						"section",
						"select",
						"source",
						"strong",
						"summary",
						"template",
						"tbody",
						"td",
						"textarea",
						"tfoot",
						"th",
						"thead",
						"tr",
						"track",
						"u",
						"ul",
						"var",
						"video",
						"wbr",
						"webview",
						"circle",
						"pattern",
						"noindex",
						"svg",
						"animate",
						"animateMotion",
						"animateTransform",
						"defs",
						"desc",
						"ellipse",
						"feBlend",
						"feColorMatrix",
						"feComponentTransfer",
						"feComposite",
						"feConvolveMatrix",
						"feDiffuseLighting",
						"feDisplacementMap",
						"feDistantLight",
						"feDropShadow",
						"feFlood",
						"feFuncA",
						"feFuncB",
						"feFuncG",
						"feFuncR",
						"feGaussianBlur",
						"feImage",
						"feMerge",
						"feMergeNode",
						"feMorphology",
						"feOffset",
						"fePointLight",
						"feSpecularLighting",
						"feSpotLight",
						"feTile",
						"feTurbulence",
						"foreignObject",
						"g",
						"line",
						"linearGradient",
						"marker",
						"metadata",
						"mpath",
						"polygon",
						"polyline",
						"radialGradient",
						"rect",
						"textPath",
						"tspan",
						"use",
						"view"
					],
					"default": "ins",
					"description": "HTML element to wrap insertion differences. Defaults to ins",
					"parent": "Props"
				},
				"deleteComponent": {
					"name": "deleteComponent",
					"type": "string",
					"enum": [
						"symbol",
						"object",
						"article",
						"button",
						"dialog",
						"figure",
						"form",
						"img",
						"link",
						"main",
						"menu",
						"menuitem",
						"option",
						"switch",
						"table",
						"text",
						"style",
						"slot",
						"title",
						"s",
						"filter",
						"image",
						"stop",
						"time",
						"div",
						"fieldset",
						"legend",
						"big",
						"small",
						"sub",
						"sup",
						"clipPath",
						"mask",
						"path",
						"label",
						"a",
						"span",
						"input",
						"abbr",
						"address",
						"area",
						"aside",
						"audio",
						"b",
						"base",
						"bdi",
						"bdo",
						"blockquote",
						"body",
						"br",
						"canvas",
						"caption",
						"cite",
						"code",
						"col",
						"colgroup",
						"data",
						"datalist",
						"dd",
						"del",
						"details",
						"dfn",
						"dl",
						"dt",
						"em",
						"embed",
						"figcaption",
						"footer",
						"h1",
						"h2",
						"h3",
						"h4",
						"h5",
						"h6",
						"head",
						"header",
						"hgroup",
						"hr",
						"html",
						"i",
						"iframe",
						"ins",
						"kbd",
						"keygen",
						"li",
						"map",
						"mark",
						"meta",
						"meter",
						"nav",
						"noscript",
						"ol",
						"optgroup",
						"output",
						"p",
						"param",
						"picture",
						"pre",
						"progress",
						"q",
						"rp",
						"rt",
						"ruby",
						"samp",
						"script",
						"section",
						"select",
						"source",
						"strong",
						"summary",
						"template",
						"tbody",
						"td",
						"textarea",
						"tfoot",
						"th",
						"thead",
						"tr",
						"track",
						"u",
						"ul",
						"var",
						"video",
						"wbr",
						"webview",
						"circle",
						"pattern",
						"noindex",
						"svg",
						"animate",
						"animateMotion",
						"animateTransform",
						"defs",
						"desc",
						"ellipse",
						"feBlend",
						"feColorMatrix",
						"feComponentTransfer",
						"feComposite",
						"feConvolveMatrix",
						"feDiffuseLighting",
						"feDisplacementMap",
						"feDistantLight",
						"feDropShadow",
						"feFlood",
						"feFuncA",
						"feFuncB",
						"feFuncG",
						"feFuncR",
						"feGaussianBlur",
						"feImage",
						"feMerge",
						"feMergeNode",
						"feMorphology",
						"feOffset",
						"fePointLight",
						"feSpecularLighting",
						"feSpotLight",
						"feTile",
						"feTurbulence",
						"foreignObject",
						"g",
						"line",
						"linearGradient",
						"marker",
						"metadata",
						"mpath",
						"polygon",
						"polyline",
						"radialGradient",
						"rect",
						"textPath",
						"tspan",
						"use",
						"view"
					],
					"default": "del",
					"description": "HTML element to wrap deletion differences. Defaults to del",
					"parent": "Props"
				},
				"sameComponent": {
					"name": "sameComponent",
					"type": "string",
					"enum": [
						"symbol",
						"object",
						"article",
						"button",
						"dialog",
						"figure",
						"form",
						"img",
						"link",
						"main",
						"menu",
						"menuitem",
						"option",
						"switch",
						"table",
						"text",
						"style",
						"slot",
						"title",
						"s",
						"filter",
						"image",
						"stop",
						"time",
						"div",
						"fieldset",
						"legend",
						"big",
						"small",
						"sub",
						"sup",
						"clipPath",
						"mask",
						"path",
						"label",
						"a",
						"span",
						"input",
						"abbr",
						"address",
						"area",
						"aside",
						"audio",
						"b",
						"base",
						"bdi",
						"bdo",
						"blockquote",
						"body",
						"br",
						"canvas",
						"caption",
						"cite",
						"code",
						"col",
						"colgroup",
						"data",
						"datalist",
						"dd",
						"del",
						"details",
						"dfn",
						"dl",
						"dt",
						"em",
						"embed",
						"figcaption",
						"footer",
						"h1",
						"h2",
						"h3",
						"h4",
						"h5",
						"h6",
						"head",
						"header",
						"hgroup",
						"hr",
						"html",
						"i",
						"iframe",
						"ins",
						"kbd",
						"keygen",
						"li",
						"map",
						"mark",
						"meta",
						"meter",
						"nav",
						"noscript",
						"ol",
						"optgroup",
						"output",
						"p",
						"param",
						"picture",
						"pre",
						"progress",
						"q",
						"rp",
						"rt",
						"ruby",
						"samp",
						"script",
						"section",
						"select",
						"source",
						"strong",
						"summary",
						"template",
						"tbody",
						"td",
						"textarea",
						"tfoot",
						"th",
						"thead",
						"tr",
						"track",
						"u",
						"ul",
						"var",
						"video",
						"wbr",
						"webview",
						"circle",
						"pattern",
						"noindex",
						"svg",
						"animate",
						"animateMotion",
						"animateTransform",
						"defs",
						"desc",
						"ellipse",
						"feBlend",
						"feColorMatrix",
						"feComponentTransfer",
						"feComposite",
						"feConvolveMatrix",
						"feDiffuseLighting",
						"feDisplacementMap",
						"feDistantLight",
						"feDropShadow",
						"feFlood",
						"feFuncA",
						"feFuncB",
						"feFuncG",
						"feFuncR",
						"feGaussianBlur",
						"feImage",
						"feMerge",
						"feMergeNode",
						"feMorphology",
						"feOffset",
						"fePointLight",
						"feSpecularLighting",
						"feSpotLight",
						"feTile",
						"feTurbulence",
						"foreignObject",
						"g",
						"line",
						"linearGradient",
						"marker",
						"metadata",
						"mpath",
						"polygon",
						"polyline",
						"radialGradient",
						"rect",
						"textPath",
						"tspan",
						"use",
						"view"
					],
					"description": "HTML element to wrap text with no differences. Doesnt wrap with anything by default",
					"parent": "Props"
				},
				"timeout": {
					"name": "timeout",
					"type": "number",
					"default": 0.1,
					"description": "Time in milliseconds. Passing a timeout of value 0 disables the timeout state",
					"parent": "Props"
				}
			},
			"relativePath": "src/components/text_diff/text_diff.tsx"
		},
		"ElasticEui_EuiTimeline": {
			"id": "ElasticEui_EuiTimeline",
			"name": "EuiTimeline",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTimeline",
				"lib": "elasticEui"
			},
			"props": {
				"items": {
					"name": "items",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"default": [],
					"description": "List of timeline items to render. See #EuiTimelineItem",
					"parent": "EuiTimelineProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/timeline/timeline.tsx"
		},
		"ElasticEui_EuiTimelineItem": {
			"id": "ElasticEui_EuiTimelineItem",
			"name": "EuiTimelineItem",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTimelineItem",
				"lib": "elasticEui"
			},
			"required": [
				"icon"
			],
			"props": {
				"verticalAlign": {
					"name": "verticalAlign",
					"type": "string",
					"enum": [
						"top",
						"center"
					],
					"default": "center",
					"description": "Vertical alignment of the event with the icon",
					"parent": "EuiTimelineItemProps"
				},
				"component": {
					"name": "component",
					"type": "string",
					"enum": [
						"symbol",
						"object",
						"article",
						"button",
						"dialog",
						"figure",
						"form",
						"img",
						"link",
						"main",
						"menu",
						"menuitem",
						"option",
						"switch",
						"table",
						"text",
						"style",
						"slot",
						"title",
						"s",
						"filter",
						"image",
						"stop",
						"time",
						"div",
						"fieldset",
						"legend",
						"big",
						"small",
						"sub",
						"sup",
						"clipPath",
						"mask",
						"path",
						"label",
						"a",
						"span",
						"input",
						"abbr",
						"address",
						"area",
						"aside",
						"audio",
						"b",
						"base",
						"bdi",
						"bdo",
						"blockquote",
						"body",
						"br",
						"canvas",
						"caption",
						"cite",
						"code",
						"col",
						"colgroup",
						"data",
						"datalist",
						"dd",
						"del",
						"details",
						"dfn",
						"dl",
						"dt",
						"em",
						"embed",
						"figcaption",
						"footer",
						"h1",
						"h2",
						"h3",
						"h4",
						"h5",
						"h6",
						"head",
						"header",
						"hgroup",
						"hr",
						"html",
						"i",
						"iframe",
						"ins",
						"kbd",
						"keygen",
						"li",
						"map",
						"mark",
						"meta",
						"meter",
						"nav",
						"noscript",
						"ol",
						"optgroup",
						"output",
						"p",
						"param",
						"picture",
						"pre",
						"progress",
						"q",
						"rp",
						"rt",
						"ruby",
						"samp",
						"script",
						"section",
						"select",
						"source",
						"strong",
						"summary",
						"template",
						"tbody",
						"td",
						"textarea",
						"tfoot",
						"th",
						"thead",
						"tr",
						"track",
						"u",
						"ul",
						"var",
						"video",
						"wbr",
						"webview",
						"circle",
						"pattern",
						"noindex",
						"svg",
						"animate",
						"animateMotion",
						"animateTransform",
						"defs",
						"desc",
						"ellipse",
						"feBlend",
						"feColorMatrix",
						"feComponentTransfer",
						"feComposite",
						"feConvolveMatrix",
						"feDiffuseLighting",
						"feDisplacementMap",
						"feDistantLight",
						"feDropShadow",
						"feFlood",
						"feFuncA",
						"feFuncB",
						"feFuncG",
						"feFuncR",
						"feGaussianBlur",
						"feImage",
						"feMerge",
						"feMergeNode",
						"feMorphology",
						"feOffset",
						"fePointLight",
						"feSpecularLighting",
						"feSpotLight",
						"feTile",
						"feTurbulence",
						"foreignObject",
						"g",
						"line",
						"linearGradient",
						"marker",
						"metadata",
						"mpath",
						"polygon",
						"polyline",
						"radialGradient",
						"rect",
						"textPath",
						"tspan",
						"use",
						"view"
					],
					"default": "li",
					"description": "Sets the HTML element for EuiTimelineItem. By default, the element renders as a <li/>. Only change the HTML element when it is not wrapped in a EuiTimeline that renders as a <ol/>.",
					"parent": "EuiTimelineItemProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"icon": {
					"name": "icon",
					"type": "string",
					"description": "Any ReactNode, but preferably EuiAvatar, or a string as an EuiIcon[type].",
					"parent": "EuiTimelineItemIconProps"
				},
				"iconAriaLabel": {
					"name": "iconAriaLabel",
					"type": "string",
					"description": "Specify an aria-label for the icon when passed as an IconType. If no aria-label is passed we assume the icon is purely decorative.",
					"parent": "EuiTimelineItemIconProps"
				},
				"children": {
					"name": "children",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Accepts any node. But preferably EuiPanel",
					"parent": "EuiTimelineItemEventProps"
				}
			},
			"relativePath": "src/components/timeline/timeline_item.tsx"
		},
		"ElasticEui_EuiTimelineItemEvent": {
			"id": "ElasticEui_EuiTimelineItemEvent",
			"name": "EuiTimelineItemEvent",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTimelineItemEvent",
				"lib": "elasticEui"
			},
			"props": {
				"children": {
					"name": "children",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Accepts any node. But preferably EuiPanel",
					"parent": "EuiTimelineItemEventProps"
				},
				"verticalAlign": {
					"name": "verticalAlign",
					"type": "string",
					"enum": [
						"top",
						"center"
					],
					"default": "center",
					"parent": "EuiTimelineItemEventProps"
				}
			},
			"relativePath": "src/components/timeline/timeline_item_event.tsx"
		},
		"ElasticEui_EuiTimelineItemIcon": {
			"id": "ElasticEui_EuiTimelineItemIcon",
			"name": "EuiTimelineItemIcon",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTimelineItemIcon",
				"lib": "elasticEui"
			},
			"required": [
				"icon"
			],
			"props": {
				"icon": {
					"name": "icon",
					"type": "string",
					"description": "Any ReactNode, but preferably EuiAvatar, or a string as an EuiIcon[type].",
					"parent": "EuiTimelineItemIconProps"
				},
				"verticalAlign": {
					"name": "verticalAlign",
					"type": "string",
					"enum": [
						"top",
						"center"
					],
					"default": "center",
					"parent": "EuiTimelineItemIconProps"
				},
				"iconAriaLabel": {
					"name": "iconAriaLabel",
					"type": "string",
					"description": "Specify an aria-label for the icon when passed as an IconType. If no aria-label is passed we assume the icon is purely decorative.",
					"parent": "EuiTimelineItemIconProps"
				}
			},
			"relativePath": "src/components/timeline/timeline_item_icon.tsx"
		},
		"ElasticEui_EuiTitle": {
			"id": "ElasticEui_EuiTitle",
			"name": "EuiTitle",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiTitle",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"children": {
					"name": "children",
					"type": "array",
					"description": "ReactElement to render as this components content",
					"items": {
						"type": "Node"
					},
					"parent": "EuiTitleProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m",
						"xs",
						"l",
						"xxxs",
						"xxs"
					],
					"default": "m",
					"parent": "EuiTitleProps"
				},
				"textTransform": {
					"name": "textTransform",
					"type": "string",
					"enum": [
						"uppercase"
					],
					"parent": "EuiTitleProps"
				},
				"id": {
					"name": "id",
					"type": "string",
					"parent": "EuiTitleProps"
				}
			},
			"relativePath": "src/components/title/title.tsx"
		},
		"ElasticEui_EuiToast": {
			"id": "ElasticEui_EuiToast",
			"name": "EuiToast",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiToast",
				"lib": "elasticEui"
			},
			"props": {
				"title": {
					"name": "title",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"parent": "EuiToastProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"enum": [
						"primary",
						"success",
						"warning",
						"danger"
					],
					"parent": "EuiToastProps"
				},
				"iconType": {
					"name": "iconType",
					"type": "string",
					"parent": "EuiToastProps"
				},
				"onClose": {
					"name": "onClose",
					"type": "Event",
					"parent": "EuiToastProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/toast/toast.tsx"
		},
		"ElasticEui_EuiGlobalToastList": {
			"id": "ElasticEui_EuiGlobalToastList",
			"name": "EuiGlobalToastList",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiGlobalToastList",
				"lib": "elasticEui"
			},
			"required": [
				"dismissToast",
				"toastLifeTimeMs"
			],
			"props": {
				"toasts": {
					"name": "toasts",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"default": [],
					"parent": "EuiGlobalToastListProps"
				},
				"dismissToast": {
					"name": "dismissToast",
					"type": "Event",
					"parent": "EuiGlobalToastListProps"
				},
				"toastLifeTimeMs": {
					"name": "toastLifeTimeMs",
					"type": "number",
					"parent": "EuiGlobalToastListProps"
				},
				"side": {
					"name": "side",
					"type": "string",
					"enum": [
						"left",
						"right"
					],
					"default": "right",
					"description": "Determines which side of the browser window the toasts should appear",
					"parent": "EuiGlobalToastListProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/toast/global_toast_list.tsx"
		},
		"ElasticEui_EuiGlobalToastListItem": {
			"id": "ElasticEui_EuiGlobalToastListItem",
			"name": "EuiGlobalToastListItem",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiGlobalToastListItem",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"parent": "CommonProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"parent": "CommonProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				},
				"isDismissed": {
					"name": "isDismissed",
					"type": "boolean",
					"parent": "EuiGlobalToastListItemProps"
				},
				"children": {
					"name": "children",
					"type": "array",
					"description": "ReactElement to render as this components content",
					"items": {
						"type": "Node"
					},
					"parent": "EuiGlobalToastListItemProps"
				}
			},
			"relativePath": "src/components/toast/global_toast_list_item.tsx"
		},
		"ElasticEui_EuiToolTip": {
			"id": "ElasticEui_EuiToolTip",
			"name": "EuiToolTip",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiToolTip",
				"lib": "elasticEui"
			},
			"props": {
				"anchorClassName": {
					"name": "anchorClassName",
					"type": "string",
					"description": "Passes onto the the trigger.",
					"parent": "EuiToolTipProps"
				},
				"children": {
					"name": "children",
					"type": "array",
					"description": "The in-view trigger for your tooltip.",
					"items": {
						"type": "Node"
					},
					"parent": "EuiToolTipProps"
				},
				"className": {
					"name": "className",
					"type": "string",
					"description": "Passes onto the tooltip itself, not the trigger.",
					"parent": "EuiToolTipProps"
				},
				"content": {
					"name": "content",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "The main content of your tooltip.",
					"parent": "EuiToolTipProps"
				},
				"display": {
					"name": "display",
					"type": "string",
					"enum": [
						"block",
						"inlineBlock"
					],
					"default": "inlineBlock",
					"description": "Common display alternatives for the anchor wrapper",
					"parent": "EuiToolTipProps"
				},
				"delay": {
					"name": "delay",
					"type": "string",
					"enum": [
						"regular",
						"long"
					],
					"default": "regular",
					"description": "Delay before showing tooltip. Good for repeatable items.",
					"parent": "EuiToolTipProps"
				},
				"title": {
					"name": "title",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "An optional title for your tooltip.",
					"parent": "EuiToolTipProps"
				},
				"id": {
					"name": "id",
					"type": "string",
					"description": "Unless you provide one, this will be randomly generated.",
					"parent": "EuiToolTipProps"
				},
				"position": {
					"name": "position",
					"type": "string",
					"enum": [
						"left",
						"right",
						"top",
						"bottom"
					],
					"default": "top",
					"description": "Suggested position. If there is not enough room for it this will be changed.",
					"parent": "EuiToolTipProps"
				},
				"onMouseOut": {
					"name": "onMouseOut",
					"type": "Event",
					"description": "If supplied, called when mouse movement causes the tool tip to be hidden.",
					"parent": "EuiToolTipProps"
				}
			},
			"relativePath": "src/components/tool_tip/tool_tip.tsx"
		},
		"ElasticEui_EuiIconTip": {
			"id": "ElasticEui_EuiIconTip",
			"name": "EuiIconTip",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiIconTip",
				"lib": "elasticEui"
			},
			"props": {
				"className": {
					"name": "className",
					"type": "string",
					"description": "Passes onto the tooltip itself, not the trigger.",
					"parent": "EuiToolTipProps"
				},
				"id": {
					"name": "id",
					"type": "string",
					"description": "Unless you provide one, this will be randomly generated.",
					"parent": "EuiToolTipProps"
				},
				"title": {
					"name": "title",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "An optional title for your tooltip.",
					"parent": "EuiToolTipProps"
				},
				"onMouseOut": {
					"name": "onMouseOut",
					"type": "Event",
					"description": "If supplied, called when mouse movement causes the tool tip to be hidden.",
					"parent": "EuiToolTipProps"
				},
				"display": {
					"name": "display",
					"type": "string",
					"enum": [
						"block",
						"inlineBlock"
					],
					"description": "Common display alternatives for the anchor wrapper",
					"parent": "EuiToolTipProps"
				},
				"content": {
					"name": "content",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "The main content of your tooltip.",
					"parent": "EuiToolTipProps"
				},
				"anchorClassName": {
					"name": "anchorClassName",
					"type": "string",
					"description": "Passes onto the the trigger.",
					"parent": "EuiToolTipProps"
				},
				"children": {
					"name": "children",
					"type": "unknown",
					"description": "Children are not allowed as they are built using the icon props",
					"parent": "EuiIconTipProps"
				},
				"color": {
					"name": "color",
					"type": "string",
					"description": "The icon color.",
					"parent": "EuiIconTipProps"
				},
				"type": {
					"name": "type",
					"type": "string",
					"default": "questionInCircle",
					"description": "The icon type.",
					"parent": "EuiIconTipProps"
				},
				"size": {
					"name": "size",
					"type": "string",
					"enum": [
						"s",
						"m",
						"l",
						"xl",
						"original",
						"xxl"
					],
					"description": "The icon size.",
					"parent": "EuiIconTipProps"
				},
				"aria-label": {
					"name": "aria-label",
					"type": "string",
					"description": "Explain what this icon means for screen readers.",
					"parent": "EuiIconTipProps"
				},
				"iconProps": {
					"name": "iconProps",
					"type": "unknown",
					"description": "Pass certain props down to EuiIcon",
					"parent": "EuiIconTipProps"
				},
				"delay": {
					"name": "delay",
					"type": "string",
					"enum": [
						"regular",
						"long"
					],
					"default": "regular",
					"parent": "Props"
				},
				"position": {
					"name": "position",
					"type": "string",
					"enum": [
						"left",
						"right",
						"top",
						"bottom"
					],
					"default": "top",
					"parent": "Props"
				}
			},
			"relativePath": "src/components/tool_tip/icon_tip.tsx"
		},
		"ElasticEui_EuiHideFor": {
			"id": "ElasticEui_EuiHideFor",
			"name": "EuiHideFor",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiHideFor",
				"lib": "elasticEui"
			},
			"required": [
				"sizes"
			],
			"props": {
				"children": {
					"name": "children",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Required otherwise nothing ever gets returned",
					"parent": "EuiHideForProps"
				},
				"sizes": {
					"name": "sizes",
					"type": "string",
					"enum": [
						"none",
						"all"
					],
					"description": "List of all the responsive sizes to hide the children for. Array of #EuiBreakpointSize",
					"parent": "EuiHideForProps"
				}
			},
			"relativePath": "src/components/responsive/hide_for.tsx"
		},
		"ElasticEui_EuiShowFor": {
			"id": "ElasticEui_EuiShowFor",
			"name": "EuiShowFor",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiShowFor",
				"lib": "elasticEui"
			},
			"required": [
				"sizes"
			],
			"props": {
				"children": {
					"name": "children",
					"type": "array",
					"items": {
						"type": "Node"
					},
					"description": "Required otherwise nothing ever gets returned",
					"parent": "EuiShowForProps"
				},
				"sizes": {
					"name": "sizes",
					"type": "string",
					"enum": [
						"none",
						"all"
					],
					"description": "List of all the responsive sizes to show the children for. Array of #EuiBreakpointSize",
					"parent": "EuiShowForProps"
				}
			},
			"relativePath": "src/components/responsive/show_for.tsx"
		},
		"ElasticEui_EuiResizableContainer": {
			"id": "ElasticEui_EuiResizableContainer",
			"name": "EuiResizableContainer",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiResizableContainer",
				"lib": "elasticEui"
			},
			"props": {
				"direction": {
					"name": "direction",
					"type": "string",
					"enum": [
						"horizontal",
						"vertical"
					],
					"default": "horizontal",
					"description": "Specify the container direction",
					"parent": "EuiResizableContainerProps"
				},
				"children": {
					"name": "children",
					"type": "Event",
					"description": "Pure function which accepts Panel and Resizer components in arguments and returns a component tree",
					"parent": "EuiResizableContainerProps"
				},
				"onPanelWidthChange": {
					"name": "onPanelWidthChange",
					"type": "Event",
					"description": "Pure function which accepts an object where keys are IDs of panels, which sizes were changed, and values are actual sizes in percents",
					"parent": "EuiResizableContainerProps"
				},
				"onToggleCollapsed": {
					"name": "onToggleCollapsed",
					"type": "Event",
					"parent": "EuiResizableContainerProps"
				},
				"style": {
					"name": "style",
					"type": "object",
					"parent": "EuiResizableContainerProps"
				},
				"data-test-subj": {
					"name": "data-test-subj",
					"type": "string",
					"parent": "CommonProps"
				}
			},
			"relativePath": "src/components/resizable_container/resizable_container.tsx"
		},
		"ElasticEui_assertNever": {
			"id": "ElasticEui_assertNever",
			"name": "AssertNever",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "assertNever",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/components/common.ts"
		},
		"ElasticEui_keysOf": {
			"id": "ElasticEui_keysOf",
			"name": "KeysOf",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "keysOf",
				"lib": "elasticEui"
			},
			"description": "Wraps Object.keys with proper typescript definition of the resulting array",
			"props": {},
			"relativePath": "src/components/common.ts"
		},
		"ElasticEui_keys": {
			"id": "ElasticEui_keys",
			"name": "keys",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "keys",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/keys.ts"
		},
		"ElasticEui_accessibleClickKeys": {
			"id": "ElasticEui_accessibleClickKeys",
			"name": "AccessibleClickKeys",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "accessibleClickKeys",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/accessibility/accessible_click_keys.ts"
		},
		"ElasticEui_cascadingMenuKeys": {
			"id": "ElasticEui_cascadingMenuKeys",
			"name": "CascadingMenuKeys",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "cascadingMenuKeys",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/accessibility/cascading_menu_keys.ts"
		},
		"ElasticEui_comboBoxKeys": {
			"id": "ElasticEui_comboBoxKeys",
			"name": "ComboBoxKeys",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "comboBoxKeys",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/accessibility/combo_box_keys.ts"
		},
		"ElasticEui_htmlIdGenerator": {
			"id": "ElasticEui_htmlIdGenerator",
			"name": "HtmlIdGenerator",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "htmlIdGenerator",
				"lib": "elasticEui"
			},
			"description": "This function returns a function to generate ids. This can be used to generate unique, but predictable ids to pair labels with their inputs. It takes an optional prefix as a parameter. If you dont specify it, it generates a random id prefix. If you specify a custom prefix it should begin with an letter to be HTML4 compliant.",
			"props": {},
			"relativePath": "src/services/accessibility/html_id_generator.ts"
		},
		"ElasticEui_useGeneratedHtmlId": {
			"id": "ElasticEui_useGeneratedHtmlId",
			"name": "UseGeneratedHtmlId",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useGeneratedHtmlId",
				"lib": "elasticEui"
			},
			"props": {
				"prefix": {
					"name": "prefix",
					"type": "string",
					"description": "Optional prefix to prepend to the generated ID",
					"parent": "UseGeneratedHtmlIdOptions"
				},
				"suffix": {
					"name": "suffix",
					"type": "string",
					"description": "Optional suffix to append to the generated ID",
					"parent": "UseGeneratedHtmlIdOptions"
				},
				"conditionalId": {
					"name": "conditionalId",
					"type": "string",
					"description": "Optional conditional ID to use instead of a randomly generated ID. Typically used by EUI components where IDs can be passed in as custom props",
					"parent": "UseGeneratedHtmlIdOptions"
				}
			},
			"relativePath": "src/services/accessibility/html_id_generator.ts"
		},
		"ElasticEui_LEFT_ALIGNMENT": {
			"id": "ElasticEui_LEFT_ALIGNMENT",
			"name": "LeftAlignment",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "LEFT_ALIGNMENT",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/alignment.ts"
		},
		"ElasticEui_RIGHT_ALIGNMENT": {
			"id": "ElasticEui_RIGHT_ALIGNMENT",
			"name": "RightAlignment",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "RIGHT_ALIGNMENT",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/alignment.ts"
		},
		"ElasticEui_CENTER_ALIGNMENT": {
			"id": "ElasticEui_CENTER_ALIGNMENT",
			"name": "CenterAlignment",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "CENTER_ALIGNMENT",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/alignment.ts"
		},
		"ElasticEui_BREAKPOINTS": {
			"id": "ElasticEui_BREAKPOINTS",
			"name": "Breakpoints",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "BREAKPOINTS",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/breakpoint.ts"
		},
		"ElasticEui_BREAKPOINT_KEYS": {
			"id": "ElasticEui_BREAKPOINT_KEYS",
			"name": "BreakpointKeys",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "BREAKPOINT_KEYS",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/breakpoint.ts"
		},
		"ElasticEui_getBreakpoint": {
			"id": "ElasticEui_getBreakpoint",
			"name": "GetBreakpoint",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "getBreakpoint",
				"lib": "elasticEui"
			},
			"description": "Given the current width and an object of EuiBreakpoints, this function returns the string that is the name of the breakpoint key that is less than or equal to the width",
			"props": {},
			"relativePath": "src/services/breakpoint.ts"
		},
		"ElasticEui_isWithinBreakpoints": {
			"id": "ElasticEui_isWithinBreakpoints",
			"name": "IsWithinBreakpoints",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "isWithinBreakpoints",
				"lib": "elasticEui"
			},
			"description": "Given the current width and an array of breakpoint keys, this function returns true or false if the width falls within any of the named breakpoints",
			"props": {},
			"relativePath": "src/services/breakpoint.ts"
		},
		"ElasticEui_isWithinMaxBreakpoint": {
			"id": "ElasticEui_isWithinMaxBreakpoint",
			"name": "IsWithinMaxBreakpoint",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "isWithinMaxBreakpoint",
				"lib": "elasticEui"
			},
			"description": "Given the current width and a max breakpoint key, this function returns true or false if the width falls within the max breakpoint or any breakpoints below",
			"props": {},
			"relativePath": "src/services/breakpoint.ts"
		},
		"ElasticEui_isWithinMinBreakpoint": {
			"id": "ElasticEui_isWithinMinBreakpoint",
			"name": "IsWithinMinBreakpoint",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "isWithinMinBreakpoint",
				"lib": "elasticEui"
			},
			"description": "Given the current width and a min breakpoint key, this function returns true or false if the width falls within the min breakpoint or any breakpoints above",
			"props": {},
			"relativePath": "src/services/breakpoint.ts"
		},
		"ElasticEui_isColorDark": {
			"id": "ElasticEui_isColorDark",
			"name": "IsColorDark",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "isColorDark",
				"lib": "elasticEui"
			},
			"description": "This function calculates if the specified color is dark, which usually means you need light text if you use it as a background color to fulfill WCAG contrast requirement. The color must be specified via its red, green and blue value in the range of 0 to 255. The formula is based on this Stackoverflow answer: https://stackoverflow.com/a/3943023 which itself is based upon the WCAG recommendation for color contrast.",
			"props": {},
			"relativePath": "src/services/color/is_color_dark.ts"
		},
		"ElasticEui_isValidHex": {
			"id": "ElasticEui_isValidHex",
			"name": "IsValidHex",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "isValidHex",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/color/is_valid_hex.ts"
		},
		"ElasticEui_calculateContrast": {
			"id": "ElasticEui_calculateContrast",
			"name": "CalculateContrast",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "calculateContrast",
				"lib": "elasticEui"
			},
			"required": [
				"0",
				"1",
				"2",
				"length",
				"pop",
				"push",
				"concat",
				"join",
				"reverse",
				"shift",
				"slice",
				"sort",
				"splice",
				"unshift",
				"indexOf",
				"lastIndexOf",
				"every",
				"some",
				"forEach",
				"map",
				"filter",
				"reduce",
				"reduceRight",
				"find",
				"findIndex",
				"fill",
				"copyWithin",
				"entries",
				"keys",
				"values",
				"includes",
				"flatMap",
				"flat",
				"__@iterator@43",
				"__@unscopables@327"
			],
			"props": {
				"0": {
					"name": "0",
					"type": "number"
				},
				"1": {
					"name": "1",
					"type": "number"
				},
				"2": {
					"name": "2",
					"type": "number"
				},
				"length": {
					"name": "length",
					"type": "unknown"
				},
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of an array.",
					"parent": "Array"
				},
				"toLocaleString": {
					"name": "toLocaleString",
					"type": "Event",
					"description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
					"parent": "Array"
				},
				"pop": {
					"name": "pop",
					"type": "Event",
					"description": "Removes the last element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"push": {
					"name": "push",
					"type": "Event",
					"description": "Appends new elements to the end of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"concat": {
					"name": "concat",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Combines two or more arrays. This method returns a new array without modifying any existing arrays.",
					"parent": "Array"
				},
				"join": {
					"name": "join",
					"type": "Event",
					"description": "Adds all the elements of an array into a string, separated by the specified separator string.",
					"parent": "Array"
				},
				"reverse": {
					"name": "reverse",
					"type": "Event",
					"description": "Reverses the elements in an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"shift": {
					"name": "shift",
					"type": "Event",
					"description": "Removes the first element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a copy of a section of an array. For both start and end, a negative index can be used to indicate an offset from the end of the array. For example, -2 refers to the second to last element of the array.",
					"parent": "Array"
				},
				"sort": {
					"name": "sort",
					"type": "Event",
					"description": "Sorts an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"splice": {
					"name": "splice",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
					"parent": "Array"
				},
				"unshift": {
					"name": "unshift",
					"type": "Event",
					"description": "Inserts new elements at the start of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"every": {
					"name": "every",
					"type": "Event",
					"description": "Determines whether all the members of an array satisfy the specified test.",
					"parent": "Array"
				},
				"some": {
					"name": "some",
					"type": "Event",
					"description": "Determines whether the specified callback function returns true for any element of an array.",
					"parent": "Array"
				},
				"forEach": {
					"name": "forEach",
					"type": "Event",
					"description": "Performs the specified action for each element in an array.",
					"parent": "Array"
				},
				"map": {
					"name": "map",
					"type": "Event",
					"description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
					"parent": "Array"
				},
				"filter": {
					"name": "filter",
					"type": "Event",
					"description": "Returns the elements of an array that meet the condition specified in a callback function.",
					"parent": "Array"
				},
				"reduce": {
					"name": "reduce",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"reduceRight": {
					"name": "reduceRight",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"find": {
					"name": "find",
					"description": "Returns the value of the first element in the array where predicate is true, and undefined otherwise.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"findIndex": {
					"name": "findIndex",
					"type": "Event",
					"description": "Returns the index of the first element in the array where predicate is true, and -1 otherwise.",
					"parent": "Array"
				},
				"fill": {
					"name": "fill",
					"type": "Event",
					"description": "Changes all array elements from start to end index to a static value and returns the modified array",
					"parent": "Array"
				},
				"copyWithin": {
					"name": "copyWithin",
					"type": "Event",
					"description": "Returns the this object after copying a section of the array identified by start and end to the same array starting at position target",
					"parent": "Array"
				},
				"entries": {
					"name": "entries",
					"type": "Event",
					"description": "Returns an iterable of key, value pairs for every entry in the array",
					"parent": "Array"
				},
				"keys": {
					"name": "keys",
					"type": "Event",
					"description": "Returns an iterable of keys in the array",
					"parent": "Array"
				},
				"values": {
					"name": "values",
					"type": "Event",
					"description": "Returns an iterable of values in the array",
					"parent": "Array"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Determines whether an array includes a certain element, returning true or false as appropriate.",
					"parent": "Array"
				},
				"flatMap": {
					"name": "flatMap",
					"description": "Calls a defined callback function on each element of an array. Then, flattens the result into a new array. This is identical to a map followed by flat with depth 1.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"flat": {
					"name": "flat",
					"type": "Event",
					"description": "Returns a new array with all sub-array elements concatenated into it recursively up to the specified depth.",
					"parent": "Array"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "Array"
				},
				"__@unscopables@327": {
					"name": "__@unscopables@327",
					"type": "Event",
					"description": "Returns an object whose properties have the value true when they will be absent when used in a with statement.",
					"parent": "Array"
				}
			},
			"relativePath": "src/services/color/luminance_and_contrast.ts"
		},
		"ElasticEui_calculateLuminance": {
			"id": "ElasticEui_calculateLuminance",
			"name": "CalculateLuminance",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "calculateLuminance",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/color/luminance_and_contrast.ts"
		},
		"ElasticEui_hexToHsv": {
			"id": "ElasticEui_hexToHsv",
			"name": "HexToHsv",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "hexToHsv",
				"lib": "elasticEui"
			},
			"required": [
				"charAt",
				"charCodeAt",
				"concat",
				"indexOf",
				"lastIndexOf",
				"localeCompare",
				"match",
				"replace",
				"search",
				"slice",
				"split",
				"substring",
				"toLowerCase",
				"toLocaleLowerCase",
				"toUpperCase",
				"toLocaleUpperCase",
				"trim",
				"length",
				"substr",
				"codePointAt",
				"includes",
				"endsWith",
				"normalize",
				"repeat",
				"startsWith",
				"anchor",
				"big",
				"blink",
				"bold",
				"fixed",
				"fontcolor",
				"fontsize",
				"italics",
				"link",
				"small",
				"strike",
				"sub",
				"sup",
				"padStart",
				"padEnd",
				"trimEnd",
				"trimStart",
				"trimLeft",
				"trimRight",
				"matchAll",
				"replaceAll",
				"__@iterator@43"
			],
			"props": {
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of a string.",
					"parent": "String"
				},
				"charAt": {
					"name": "charAt",
					"type": "Event",
					"description": "Returns the character at the specified index.",
					"parent": "String"
				},
				"charCodeAt": {
					"name": "charCodeAt",
					"type": "Event",
					"description": "Returns the Unicode value of the character at the specified location.",
					"parent": "String"
				},
				"concat": {
					"name": "concat",
					"type": "Event",
					"description": "Returns a string that contains the concatenation of two or more strings.",
					"parent": "String"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the position of the first occurrence of a substring.",
					"parent": "String"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the last occurrence of a substring in the string.",
					"parent": "String"
				},
				"localeCompare": {
					"name": "localeCompare",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Determines whether two strings are equivalent in the current locale. Determines whether two strings are equivalent in the current or specified locale.",
					"parent": "String"
				},
				"match": {
					"name": "match",
					"type": "unknown",
					"description": "Matches a string with a regular expression, and returns an array containing the results of that search. Matches a string or an object that supports being matched against, and returns an array containing the results of that search, or null if no matches are found.",
					"parent": "String"
				},
				"replace": {
					"name": "replace",
					"description": "Replaces text in a string, using a regular expression or search string. Replaces first match with string or all matches with RegExp. Replaces text in a string, using an object that supports replacement within a string.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "String"
				},
				"search": {
					"name": "search",
					"type": "unknown",
					"description": "Finds the first substring match in a regular expression search.",
					"parent": "String"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a section of a string.",
					"parent": "String"
				},
				"split": {
					"name": "split",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Split a string into substrings using the specified separator and return them as an array.",
					"parent": "String"
				},
				"substring": {
					"name": "substring",
					"type": "Event",
					"description": "Returns the substring at the specified location within a String object.",
					"parent": "String"
				},
				"toLowerCase": {
					"name": "toLowerCase",
					"type": "Event",
					"description": "Converts all the alphabetic characters in a string to lowercase.",
					"parent": "String"
				},
				"toLocaleLowerCase": {
					"name": "toLocaleLowerCase",
					"description": "Converts all alphabetic characters to lowercase, taking into account the host environments current locale.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "String"
				},
				"toUpperCase": {
					"name": "toUpperCase",
					"type": "Event",
					"description": "Converts all the alphabetic characters in a string to uppercase.",
					"parent": "String"
				},
				"toLocaleUpperCase": {
					"name": "toLocaleUpperCase",
					"description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environments current locale.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "String"
				},
				"trim": {
					"name": "trim",
					"type": "Event",
					"description": "Removes the leading and trailing white space and line terminator characters from a string.",
					"parent": "String"
				},
				"length": {
					"name": "length",
					"type": "number",
					"description": "Returns the length of a String object.",
					"parent": "String"
				},
				"substr": {
					"name": "substr",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"valueOf": {
					"name": "valueOf",
					"type": "Event",
					"description": "Returns the primitive value of the specified object.",
					"parent": "String"
				},
				"codePointAt": {
					"name": "codePointAt",
					"type": "Event",
					"description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point value of the UTF-16 encoded code point starting at the string element at position pos in the String resulting from converting this object to a String. If there is no element at that position, the result is undefined. If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
					"parent": "String"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Returns true if searchString appears as a substring of the result of converting this object to a String, at one or more positions that are greater than or equal to position; otherwise, returns false.",
					"parent": "String"
				},
				"endsWith": {
					"name": "endsWith",
					"type": "Event",
					"description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at endPosition – length(this). Otherwise returns false.",
					"parent": "String"
				},
				"normalize": {
					"name": "normalize",
					"type": "unknown",
					"description": "Returns the String value result of normalizing the string into the normalization form named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
					"parent": "String"
				},
				"repeat": {
					"name": "repeat",
					"type": "Event",
					"description": "Returns a String value that is made from count copies appended together. If count is 0, the empty string is returned.",
					"parent": "String"
				},
				"startsWith": {
					"name": "startsWith",
					"type": "Event",
					"description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at position. Otherwise returns false.",
					"parent": "String"
				},
				"anchor": {
					"name": "anchor",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"big": {
					"name": "big",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"blink": {
					"name": "blink",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"bold": {
					"name": "bold",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fixed": {
					"name": "fixed",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fontcolor": {
					"name": "fontcolor",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fontsize": {
					"name": "fontsize",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"italics": {
					"name": "italics",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"link": {
					"name": "link",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"small": {
					"name": "small",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"strike": {
					"name": "strike",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"sub": {
					"name": "sub",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"sup": {
					"name": "sup",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"padStart": {
					"name": "padStart",
					"type": "Event",
					"description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the start (left) of the current string.",
					"parent": "String"
				},
				"padEnd": {
					"name": "padEnd",
					"type": "Event",
					"description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string.",
					"parent": "String"
				},
				"trimEnd": {
					"name": "trimEnd",
					"type": "Event",
					"description": "Removes the trailing white space and line terminator characters from a string.",
					"parent": "String"
				},
				"trimStart": {
					"name": "trimStart",
					"type": "Event",
					"description": "Removes the leading white space and line terminator characters from a string.",
					"parent": "String"
				},
				"trimLeft": {
					"name": "trimLeft",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility. Use `trimStart` instead",
					"parent": "String"
				},
				"trimRight": {
					"name": "trimRight",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility. Use `trimEnd` instead",
					"parent": "String"
				},
				"matchAll": {
					"name": "matchAll",
					"type": "Event",
					"description": "Matches a string with a regular expression, and returns an iterable of matches containing the results of that search.",
					"parent": "String"
				},
				"replaceAll": {
					"name": "replaceAll",
					"description": "Replace all instances of a substring in a string, using a regular expression or search string.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "String"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "String"
				}
			},
			"relativePath": "src/services/color/hex_to_hsv.ts"
		},
		"ElasticEui_hexToRgb": {
			"id": "ElasticEui_hexToRgb",
			"name": "HexToRgb",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "hexToRgb",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/color/hex_to_rgb.ts"
		},
		"ElasticEui_hsvToHex": {
			"id": "ElasticEui_hsvToHex",
			"name": "HsvToHex",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "hsvToHex",
				"lib": "elasticEui"
			},
			"required": [
				"h",
				"s",
				"v"
			],
			"props": {
				"h": {
					"name": "h",
					"type": "number",
					"parent": "HSV"
				},
				"s": {
					"name": "s",
					"type": "number",
					"parent": "HSV"
				},
				"v": {
					"name": "v",
					"type": "number",
					"parent": "HSV"
				}
			},
			"relativePath": "src/services/color/hsv_to_hex.ts"
		},
		"ElasticEui_hsvToRgb": {
			"id": "ElasticEui_hsvToRgb",
			"name": "HsvToRgb",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "hsvToRgb",
				"lib": "elasticEui"
			},
			"required": [
				"h",
				"s",
				"v"
			],
			"props": {
				"h": {
					"name": "h",
					"type": "number",
					"parent": "HSV"
				},
				"s": {
					"name": "s",
					"type": "number",
					"parent": "HSV"
				},
				"v": {
					"name": "v",
					"type": "number",
					"parent": "HSV"
				}
			},
			"relativePath": "src/services/color/hsv_to_rgb.ts"
		},
		"ElasticEui_rgbToHex": {
			"id": "ElasticEui_rgbToHex",
			"name": "RgbToHex",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "rgbToHex",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/color/rgb_to_hex.ts"
		},
		"ElasticEui_rgbToHsv": {
			"id": "ElasticEui_rgbToHsv",
			"name": "RgbToHsv",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "rgbToHsv",
				"lib": "elasticEui"
			},
			"required": [
				"r",
				"g",
				"b"
			],
			"props": {
				"r": {
					"name": "r",
					"type": "number",
					"parent": "RGB"
				},
				"g": {
					"name": "g",
					"type": "number",
					"parent": "RGB"
				},
				"b": {
					"name": "b",
					"type": "number",
					"parent": "RGB"
				}
			},
			"relativePath": "src/services/color/rgb_to_hsv.ts"
		},
		"ElasticEui_VISUALIZATION_COLORS": {
			"id": "ElasticEui_VISUALIZATION_COLORS",
			"name": "VisualizationColors",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "VISUALIZATION_COLORS",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/color/visualization_colors.ts"
		},
		"ElasticEui_DEFAULT_VISUALIZATION_COLOR": {
			"id": "ElasticEui_DEFAULT_VISUALIZATION_COLOR",
			"name": "DefaultVisualizationColor",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "DEFAULT_VISUALIZATION_COLOR",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/color/visualization_colors.ts"
		},
		"ElasticEui_colorPalette": {
			"id": "ElasticEui_colorPalette",
			"name": "ColorPalette",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "colorPalette",
				"lib": "elasticEui"
			},
			"description": "This function takes an array of colors and returns an array of interpolated colors based on the number of steps/len needed for use in UI elements such as charts. Derived from https://github.com/gka/palettes (Unlicensed)",
			"required": [
				"length",
				"pop",
				"push",
				"concat",
				"join",
				"reverse",
				"shift",
				"slice",
				"sort",
				"splice",
				"unshift",
				"indexOf",
				"lastIndexOf",
				"every",
				"some",
				"forEach",
				"map",
				"filter",
				"reduce",
				"reduceRight",
				"find",
				"findIndex",
				"fill",
				"copyWithin",
				"entries",
				"keys",
				"values",
				"includes",
				"flatMap",
				"flat",
				"__@iterator@43",
				"__@unscopables@327"
			],
			"props": {
				"length": {
					"name": "length",
					"type": "number",
					"description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
					"parent": "Array"
				},
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of an array.",
					"parent": "Array"
				},
				"toLocaleString": {
					"name": "toLocaleString",
					"type": "Event",
					"description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
					"parent": "Array"
				},
				"pop": {
					"name": "pop",
					"type": "Event",
					"description": "Removes the last element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"push": {
					"name": "push",
					"type": "Event",
					"description": "Appends new elements to the end of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"concat": {
					"name": "concat",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Combines two or more arrays. This method returns a new array without modifying any existing arrays.",
					"parent": "Array"
				},
				"join": {
					"name": "join",
					"type": "Event",
					"description": "Adds all the elements of an array into a string, separated by the specified separator string.",
					"parent": "Array"
				},
				"reverse": {
					"name": "reverse",
					"type": "Event",
					"description": "Reverses the elements in an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"shift": {
					"name": "shift",
					"type": "Event",
					"description": "Removes the first element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a copy of a section of an array. For both start and end, a negative index can be used to indicate an offset from the end of the array. For example, -2 refers to the second to last element of the array.",
					"parent": "Array"
				},
				"sort": {
					"name": "sort",
					"type": "Event",
					"description": "Sorts an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"splice": {
					"name": "splice",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
					"parent": "Array"
				},
				"unshift": {
					"name": "unshift",
					"type": "Event",
					"description": "Inserts new elements at the start of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"every": {
					"name": "every",
					"type": "Event",
					"description": "Determines whether all the members of an array satisfy the specified test.",
					"parent": "Array"
				},
				"some": {
					"name": "some",
					"type": "Event",
					"description": "Determines whether the specified callback function returns true for any element of an array.",
					"parent": "Array"
				},
				"forEach": {
					"name": "forEach",
					"type": "Event",
					"description": "Performs the specified action for each element in an array.",
					"parent": "Array"
				},
				"map": {
					"name": "map",
					"type": "Event",
					"description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
					"parent": "Array"
				},
				"filter": {
					"name": "filter",
					"type": "Event",
					"description": "Returns the elements of an array that meet the condition specified in a callback function.",
					"parent": "Array"
				},
				"reduce": {
					"name": "reduce",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"reduceRight": {
					"name": "reduceRight",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"find": {
					"name": "find",
					"description": "Returns the value of the first element in the array where predicate is true, and undefined otherwise.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"findIndex": {
					"name": "findIndex",
					"type": "Event",
					"description": "Returns the index of the first element in the array where predicate is true, and -1 otherwise.",
					"parent": "Array"
				},
				"fill": {
					"name": "fill",
					"type": "Event",
					"description": "Changes all array elements from start to end index to a static value and returns the modified array",
					"parent": "Array"
				},
				"copyWithin": {
					"name": "copyWithin",
					"type": "Event",
					"description": "Returns the this object after copying a section of the array identified by start and end to the same array starting at position target",
					"parent": "Array"
				},
				"entries": {
					"name": "entries",
					"type": "Event",
					"description": "Returns an iterable of key, value pairs for every entry in the array",
					"parent": "Array"
				},
				"keys": {
					"name": "keys",
					"type": "Event",
					"description": "Returns an iterable of keys in the array",
					"parent": "Array"
				},
				"values": {
					"name": "values",
					"type": "Event",
					"description": "Returns an iterable of values in the array",
					"parent": "Array"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Determines whether an array includes a certain element, returning true or false as appropriate.",
					"parent": "Array"
				},
				"flatMap": {
					"name": "flatMap",
					"description": "Calls a defined callback function on each element of an array. Then, flattens the result into a new array. This is identical to a map followed by flat with depth 1.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"flat": {
					"name": "flat",
					"type": "Event",
					"description": "Returns a new array with all sub-array elements concatenated into it recursively up to the specified depth.",
					"parent": "Array"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "Array"
				},
				"__@unscopables@327": {
					"name": "__@unscopables@327",
					"type": "Event",
					"description": "Returns an object whose properties have the value true when they will be absent when used in a with statement.",
					"parent": "Array"
				}
			},
			"relativePath": "src/services/color/color_palette.ts"
		},
		"ElasticEui_euiPaletteForLightBackground": {
			"id": "ElasticEui_euiPaletteForLightBackground",
			"name": "EuiPaletteForLightBackground",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiPaletteForLightBackground",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/color/eui_palettes.ts"
		},
		"ElasticEui_euiPaletteForDarkBackground": {
			"id": "ElasticEui_euiPaletteForDarkBackground",
			"name": "EuiPaletteForDarkBackground",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiPaletteForDarkBackground",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/color/eui_palettes.ts"
		},
		"ElasticEui_euiPaletteColorBlind": {
			"id": "ElasticEui_euiPaletteColorBlind",
			"name": "EuiPaletteColorBlind",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiPaletteColorBlind",
				"lib": "elasticEui"
			},
			"props": {
				"rotations": {
					"name": "rotations",
					"type": "number",
					"default": 1,
					"description": "How many variations of the series is needed",
					"parent": "EuiPaletteColorBlindProps"
				},
				"order": {
					"name": "order",
					"type": "string",
					"enum": [
						"group",
						"append"
					],
					"default": "append",
					"description": "Order similar colors as groups or just append each variation",
					"parent": "EuiPaletteColorBlindProps"
				},
				"direction": {
					"name": "direction",
					"type": "string",
					"enum": [
						"both",
						"lighter",
						"darker"
					],
					"default": "lighter",
					"description": "Specifies if the direction of the color variations",
					"parent": "EuiPaletteColorBlindProps"
				},
				"sortBy": {
					"name": "sortBy",
					"type": "string",
					"enum": [
						"default",
						"natural"
					],
					"default": "default",
					"description": "Use the default sort order, or re-sort them based on the color wheel (natural)",
					"parent": "EuiPaletteColorBlindProps"
				},
				"sortShift": {
					"name": "sortShift",
					"type": "string",
					"default": "-100",
					"description": "Shift the sorting order by a certain number when used in conjunction with natural sortBy. Defaults to a number close to green.",
					"parent": "EuiPaletteColorBlindProps"
				}
			},
			"relativePath": "src/services/color/eui_palettes.ts"
		},
		"ElasticEui_euiPaletteColorBlindBehindText": {
			"id": "ElasticEui_euiPaletteColorBlindBehindText",
			"name": "EuiPaletteColorBlindBehindText",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiPaletteColorBlindBehindText",
				"lib": "elasticEui"
			},
			"description": "Color blind palette with text is meant for use when text is applied on top of the color. It increases the brightness of the color to give the text more contrast.",
			"props": {
				"rotations": {
					"name": "rotations",
					"type": "number",
					"default": 1,
					"description": "How many variations of the series is needed",
					"parent": "EuiPaletteColorBlindProps"
				},
				"order": {
					"name": "order",
					"type": "string",
					"enum": [
						"group",
						"append"
					],
					"default": "append",
					"description": "Order similar colors as groups or just append each variation",
					"parent": "EuiPaletteColorBlindProps"
				},
				"direction": {
					"name": "direction",
					"type": "string",
					"enum": [
						"both",
						"lighter",
						"darker"
					],
					"default": "lighter",
					"description": "Specifies if the direction of the color variations",
					"parent": "EuiPaletteColorBlindProps"
				},
				"sortBy": {
					"name": "sortBy",
					"type": "string",
					"enum": [
						"default",
						"natural"
					],
					"default": "default",
					"description": "Use the default sort order, or re-sort them based on the color wheel (natural)",
					"parent": "EuiPaletteColorBlindProps"
				},
				"sortShift": {
					"name": "sortShift",
					"type": "string",
					"default": "-100",
					"description": "Shift the sorting order by a certain number when used in conjunction with natural sortBy. Defaults to a number close to green.",
					"parent": "EuiPaletteColorBlindProps"
				}
			},
			"relativePath": "src/services/color/eui_palettes.ts"
		},
		"ElasticEui_euiPaletteForStatus": {
			"id": "ElasticEui_euiPaletteForStatus",
			"name": "EuiPaletteForStatus",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiPaletteForStatus",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/color/eui_palettes.ts"
		},
		"ElasticEui_euiPaletteForTemperature": {
			"id": "ElasticEui_euiPaletteForTemperature",
			"name": "EuiPaletteForTemperature",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiPaletteForTemperature",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/color/eui_palettes.ts"
		},
		"ElasticEui_euiPaletteComplimentary": {
			"id": "ElasticEui_euiPaletteComplimentary",
			"name": "EuiPaletteComplimentary",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiPaletteComplimentary",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/color/eui_palettes.ts"
		},
		"ElasticEui_euiPaletteNegative": {
			"id": "ElasticEui_euiPaletteNegative",
			"name": "EuiPaletteNegative",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiPaletteNegative",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/color/eui_palettes.ts"
		},
		"ElasticEui_euiPalettePositive": {
			"id": "ElasticEui_euiPalettePositive",
			"name": "EuiPalettePositive",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiPalettePositive",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/color/eui_palettes.ts"
		},
		"ElasticEui_euiPaletteCool": {
			"id": "ElasticEui_euiPaletteCool",
			"name": "EuiPaletteCool",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiPaletteCool",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/color/eui_palettes.ts"
		},
		"ElasticEui_euiPaletteWarm": {
			"id": "ElasticEui_euiPaletteWarm",
			"name": "EuiPaletteWarm",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiPaletteWarm",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/color/eui_palettes.ts"
		},
		"ElasticEui_euiPaletteGray": {
			"id": "ElasticEui_euiPaletteGray",
			"name": "EuiPaletteGray",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiPaletteGray",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/color/eui_palettes.ts"
		},
		"ElasticEui_getSteppedGradient": {
			"id": "ElasticEui_getSteppedGradient",
			"name": "GetSteppedGradient",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "getSteppedGradient",
				"lib": "elasticEui"
			},
			"required": [
				"length",
				"pop",
				"push",
				"concat",
				"join",
				"reverse",
				"shift",
				"slice",
				"sort",
				"splice",
				"unshift",
				"indexOf",
				"lastIndexOf",
				"every",
				"some",
				"forEach",
				"map",
				"filter",
				"reduce",
				"reduceRight",
				"find",
				"findIndex",
				"fill",
				"copyWithin",
				"entries",
				"keys",
				"values",
				"includes",
				"flatMap",
				"flat",
				"__@iterator@43",
				"__@unscopables@327"
			],
			"props": {
				"length": {
					"name": "length",
					"type": "number",
					"description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
					"parent": "Array"
				},
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of an array.",
					"parent": "Array"
				},
				"toLocaleString": {
					"name": "toLocaleString",
					"type": "Event",
					"description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
					"parent": "Array"
				},
				"pop": {
					"name": "pop",
					"type": "Event",
					"description": "Removes the last element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"push": {
					"name": "push",
					"type": "Event",
					"description": "Appends new elements to the end of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"concat": {
					"name": "concat",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Combines two or more arrays. This method returns a new array without modifying any existing arrays.",
					"parent": "Array"
				},
				"join": {
					"name": "join",
					"type": "Event",
					"description": "Adds all the elements of an array into a string, separated by the specified separator string.",
					"parent": "Array"
				},
				"reverse": {
					"name": "reverse",
					"type": "Event",
					"description": "Reverses the elements in an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"shift": {
					"name": "shift",
					"type": "Event",
					"description": "Removes the first element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a copy of a section of an array. For both start and end, a negative index can be used to indicate an offset from the end of the array. For example, -2 refers to the second to last element of the array.",
					"parent": "Array"
				},
				"sort": {
					"name": "sort",
					"type": "Event",
					"description": "Sorts an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"splice": {
					"name": "splice",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
					"parent": "Array"
				},
				"unshift": {
					"name": "unshift",
					"type": "Event",
					"description": "Inserts new elements at the start of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"every": {
					"name": "every",
					"type": "Event",
					"description": "Determines whether all the members of an array satisfy the specified test.",
					"parent": "Array"
				},
				"some": {
					"name": "some",
					"type": "Event",
					"description": "Determines whether the specified callback function returns true for any element of an array.",
					"parent": "Array"
				},
				"forEach": {
					"name": "forEach",
					"type": "Event",
					"description": "Performs the specified action for each element in an array.",
					"parent": "Array"
				},
				"map": {
					"name": "map",
					"type": "Event",
					"description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
					"parent": "Array"
				},
				"filter": {
					"name": "filter",
					"type": "Event",
					"description": "Returns the elements of an array that meet the condition specified in a callback function.",
					"parent": "Array"
				},
				"reduce": {
					"name": "reduce",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"reduceRight": {
					"name": "reduceRight",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"find": {
					"name": "find",
					"description": "Returns the value of the first element in the array where predicate is true, and undefined otherwise.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"findIndex": {
					"name": "findIndex",
					"type": "Event",
					"description": "Returns the index of the first element in the array where predicate is true, and -1 otherwise.",
					"parent": "Array"
				},
				"fill": {
					"name": "fill",
					"type": "Event",
					"description": "Changes all array elements from start to end index to a static value and returns the modified array",
					"parent": "Array"
				},
				"copyWithin": {
					"name": "copyWithin",
					"type": "Event",
					"description": "Returns the this object after copying a section of the array identified by start and end to the same array starting at position target",
					"parent": "Array"
				},
				"entries": {
					"name": "entries",
					"type": "Event",
					"description": "Returns an iterable of key, value pairs for every entry in the array",
					"parent": "Array"
				},
				"keys": {
					"name": "keys",
					"type": "Event",
					"description": "Returns an iterable of keys in the array",
					"parent": "Array"
				},
				"values": {
					"name": "values",
					"type": "Event",
					"description": "Returns an iterable of values in the array",
					"parent": "Array"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Determines whether an array includes a certain element, returning true or false as appropriate.",
					"parent": "Array"
				},
				"flatMap": {
					"name": "flatMap",
					"description": "Calls a defined callback function on each element of an array. Then, flattens the result into a new array. This is identical to a map followed by flat with depth 1.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"flat": {
					"name": "flat",
					"type": "Event",
					"description": "Returns a new array with all sub-array elements concatenated into it recursively up to the specified depth.",
					"parent": "Array"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "Array"
				},
				"__@unscopables@327": {
					"name": "__@unscopables@327",
					"type": "Event",
					"description": "Returns an object whose properties have the value true when they will be absent when used in a with statement.",
					"parent": "Array"
				}
			},
			"relativePath": "src/services/color/stepped_gradient.ts"
		},
		"ElasticEui_transparentize": {
			"id": "ElasticEui_transparentize",
			"name": "Transparentize",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "transparentize",
				"lib": "elasticEui"
			},
			"description": "Makes a color more transparent.",
			"props": {},
			"relativePath": "src/services/color/manipulation.ts"
		},
		"ElasticEui_tint": {
			"id": "ElasticEui_tint",
			"name": "Tint",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "tint",
				"lib": "elasticEui"
			},
			"description": "Mixes a provided color with white.",
			"props": {},
			"relativePath": "src/services/color/manipulation.ts"
		},
		"ElasticEui_shade": {
			"id": "ElasticEui_shade",
			"name": "Shade",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "shade",
				"lib": "elasticEui"
			},
			"description": "Mixes a provided color with black.",
			"props": {},
			"relativePath": "src/services/color/manipulation.ts"
		},
		"ElasticEui_saturate": {
			"id": "ElasticEui_saturate",
			"name": "Saturate",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "saturate",
				"lib": "elasticEui"
			},
			"description": "Increases the saturation of a color by manipulating the hsl saturation.",
			"props": {},
			"relativePath": "src/services/color/manipulation.ts"
		},
		"ElasticEui_desaturate": {
			"id": "ElasticEui_desaturate",
			"name": "Desaturate",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "desaturate",
				"lib": "elasticEui"
			},
			"description": "Decreases the saturation of a color by manipulating the hsl saturation.",
			"props": {},
			"relativePath": "src/services/color/manipulation.ts"
		},
		"ElasticEui_lightness": {
			"id": "ElasticEui_lightness",
			"name": "Lightness",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "lightness",
				"lib": "elasticEui"
			},
			"description": "Returns the lightness value of a color. 0-100",
			"props": {},
			"relativePath": "src/services/color/manipulation.ts"
		},
		"ElasticEui_makeHighContrastColor": {
			"id": "ElasticEui_makeHighContrastColor",
			"name": "MakeHighContrastColor",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "makeHighContrastColor",
				"lib": "elasticEui"
			},
			"description": "Creates a new color that meets or exceeds WCAG level AA",
			"props": {},
			"relativePath": "src/services/color/contrast.ts"
		},
		"ElasticEui_makeDisabledContrastColor": {
			"id": "ElasticEui_makeDisabledContrastColor",
			"name": "MakeDisabledContrastColor",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "makeDisabledContrastColor",
				"lib": "elasticEui"
			},
			"description": "Creates a new color with increased contrast Disabled content only needs a contrast of at least 2 because there is no interaction available",
			"props": {},
			"relativePath": "src/services/color/contrast.ts"
		},
		"ElasticEui_useColorPickerState": {
			"id": "ElasticEui_useColorPickerState",
			"name": "UseColorPickerState",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useColorPickerState",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/color_picker/color_picker.ts"
		},
		"ElasticEui_useColorStopsState": {
			"id": "ElasticEui_useColorStopsState",
			"name": "UseColorStopsState",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useColorStopsState",
				"lib": "elasticEui"
			},
			"props": {
				"valueOf": {
					"name": "valueOf",
					"type": "Event",
					"description": "Returns the primitive value of the specified object.",
					"parent": "Boolean"
				}
			},
			"relativePath": "src/services/color_picker/color_picker.ts"
		},
		"ElasticEui_copyToClipboard": {
			"id": "ElasticEui_copyToClipboard",
			"name": "CopyToClipboard",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "copyToClipboard",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/copy_to_clipboard.ts"
		},
		"ElasticEui_formatAuto": {
			"id": "ElasticEui_formatAuto",
			"name": "FormatAuto",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "formatAuto",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/format/format_auto.ts"
		},
		"ElasticEui_formatBoolean": {
			"id": "ElasticEui_formatBoolean",
			"name": "FormatBoolean",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "formatBoolean",
				"lib": "elasticEui"
			},
			"props": {
				"valueOf": {
					"name": "valueOf",
					"type": "Event",
					"description": "Returns the primitive value of the specified object.",
					"parent": "Boolean"
				}
			},
			"relativePath": "src/services/format/format_boolean.ts"
		},
		"ElasticEui_formatDate": {
			"id": "ElasticEui_formatDate",
			"name": "FormatDate",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "formatDate",
				"lib": "elasticEui"
			},
			"required": [
				"charAt",
				"charCodeAt",
				"concat",
				"indexOf",
				"lastIndexOf",
				"localeCompare",
				"match",
				"replace",
				"search",
				"slice",
				"split",
				"substring",
				"toLowerCase",
				"toLocaleLowerCase",
				"toUpperCase",
				"toLocaleUpperCase",
				"trim",
				"length",
				"substr",
				"codePointAt",
				"includes",
				"endsWith",
				"normalize",
				"repeat",
				"startsWith",
				"anchor",
				"big",
				"blink",
				"bold",
				"fixed",
				"fontcolor",
				"fontsize",
				"italics",
				"link",
				"small",
				"strike",
				"sub",
				"sup",
				"padStart",
				"padEnd",
				"trimEnd",
				"trimStart",
				"trimLeft",
				"trimRight",
				"matchAll",
				"replaceAll",
				"__@iterator@43",
				"toFixed",
				"toExponential",
				"toPrecision",
				"format",
				"startOf",
				"endOf",
				"add",
				"subtract",
				"calendar",
				"clone",
				"local",
				"isLocal",
				"utc",
				"isUTC",
				"isUtc",
				"parseZone",
				"isValid",
				"invalidAt",
				"hasAlignedHourOffset",
				"creationData",
				"parsingFlags",
				"quarter",
				"quarters",
				"weekday",
				"isoWeekday",
				"weekYear",
				"isoWeekYear",
				"week",
				"weeks",
				"isoWeek",
				"isoWeeks",
				"weeksInYear",
				"isoWeeksInYear",
				"isoWeeksInISOWeekYear",
				"dayOfYear",
				"from",
				"to",
				"fromNow",
				"toNow",
				"diff",
				"toArray",
				"toDate",
				"toISOString",
				"inspect",
				"toJSON",
				"unix",
				"isLeapYear",
				"zone",
				"utcOffset",
				"isUtcOffset",
				"daysInMonth",
				"isDST",
				"zoneAbbr",
				"zoneName",
				"isBefore",
				"isAfter",
				"isSame",
				"isSameOrAfter",
				"isSameOrBefore",
				"isBetween",
				"lang",
				"locale",
				"localeData",
				"isDSTShifted",
				"max",
				"min",
				"get",
				"set",
				"toObject",
				"toDateString",
				"toTimeString",
				"toLocaleDateString",
				"toLocaleTimeString",
				"getTime",
				"getFullYear",
				"getUTCFullYear",
				"getMonth",
				"getUTCMonth",
				"getDate",
				"getUTCDate",
				"getDay",
				"getUTCDay",
				"getHours",
				"getUTCHours",
				"getMinutes",
				"getUTCMinutes",
				"getSeconds",
				"getUTCSeconds",
				"getMilliseconds",
				"getUTCMilliseconds",
				"getTimezoneOffset",
				"setTime",
				"setMilliseconds",
				"setUTCMilliseconds",
				"setSeconds",
				"setUTCSeconds",
				"setMinutes",
				"setUTCMinutes",
				"setHours",
				"setUTCHours",
				"setDate",
				"setUTCDate",
				"setMonth",
				"setUTCMonth",
				"setFullYear",
				"setUTCFullYear",
				"toUTCString",
				"__@toPrimitive@6037",
				"pop",
				"push",
				"join",
				"reverse",
				"shift",
				"sort",
				"splice",
				"unshift",
				"every",
				"some",
				"forEach",
				"map",
				"filter",
				"reduce",
				"reduceRight",
				"find",
				"findIndex",
				"fill",
				"copyWithin",
				"entries",
				"keys",
				"values",
				"flatMap",
				"flat",
				"__@unscopables@327"
			],
			"props": {
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of a string. Returns a string representation of an object. Returns a string representation of a date. The format of the string depends on the locale. Returns a string representation of an array.",
					"parent": "String"
				},
				"charAt": {
					"name": "charAt",
					"type": "Event",
					"description": "Returns the character at the specified index.",
					"parent": "String"
				},
				"charCodeAt": {
					"name": "charCodeAt",
					"type": "Event",
					"description": "Returns the Unicode value of the character at the specified location.",
					"parent": "String"
				},
				"concat": {
					"name": "concat",
					"type": "Event",
					"description": "Returns a string that contains the concatenation of two or more strings. Combines two or more arrays. This method returns a new array without modifying any existing arrays.",
					"parent": "String"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the position of the first occurrence of a substring. Returns the index of the first occurrence of a value in an array, or -1 if it is not present.",
					"parent": "String"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the last occurrence of a substring in the string. Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.",
					"parent": "String"
				},
				"localeCompare": {
					"name": "localeCompare",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Determines whether two strings are equivalent in the current locale. Determines whether two strings are equivalent in the current or specified locale.",
					"parent": "String"
				},
				"match": {
					"name": "match",
					"type": "unknown",
					"description": "Matches a string with a regular expression, and returns an array containing the results of that search. Matches a string or an object that supports being matched against, and returns an array containing the results of that search, or null if no matches are found.",
					"parent": "String"
				},
				"replace": {
					"name": "replace",
					"description": "Replaces text in a string, using a regular expression or search string. Replaces first match with string or all matches with RegExp. Replaces text in a string, using an object that supports replacement within a string.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "String"
				},
				"search": {
					"name": "search",
					"type": "unknown",
					"description": "Finds the first substring match in a regular expression search.",
					"parent": "String"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a section of a string. Returns a copy of a section of an array. For both start and end, a negative index can be used to indicate an offset from the end of the array. For example, -2 refers to the second to last element of the array.",
					"parent": "String"
				},
				"split": {
					"name": "split",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Split a string into substrings using the specified separator and return them as an array.",
					"parent": "String"
				},
				"substring": {
					"name": "substring",
					"type": "Event",
					"description": "Returns the substring at the specified location within a String object.",
					"parent": "String"
				},
				"toLowerCase": {
					"name": "toLowerCase",
					"type": "Event",
					"description": "Converts all the alphabetic characters in a string to lowercase.",
					"parent": "String"
				},
				"toLocaleLowerCase": {
					"name": "toLocaleLowerCase",
					"description": "Converts all alphabetic characters to lowercase, taking into account the host environments current locale.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "String"
				},
				"toUpperCase": {
					"name": "toUpperCase",
					"type": "Event",
					"description": "Converts all the alphabetic characters in a string to uppercase.",
					"parent": "String"
				},
				"toLocaleUpperCase": {
					"name": "toLocaleUpperCase",
					"description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environments current locale.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "String"
				},
				"trim": {
					"name": "trim",
					"type": "Event",
					"description": "Removes the leading and trailing white space and line terminator characters from a string.",
					"parent": "String"
				},
				"length": {
					"name": "length",
					"type": "number",
					"description": "Returns the length of a String object. Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
					"parent": "String"
				},
				"substr": {
					"name": "substr",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"valueOf": {
					"name": "valueOf",
					"type": "Event",
					"description": "Returns the primitive value of the specified object. Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC.",
					"parent": "String"
				},
				"codePointAt": {
					"name": "codePointAt",
					"type": "Event",
					"description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point value of the UTF-16 encoded code point starting at the string element at position pos in the String resulting from converting this object to a String. If there is no element at that position, the result is undefined. If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
					"parent": "String"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Returns true if searchString appears as a substring of the result of converting this object to a String, at one or more positions that are greater than or equal to position; otherwise, returns false. Determines whether an array includes a certain element, returning true or false as appropriate.",
					"parent": "String"
				},
				"endsWith": {
					"name": "endsWith",
					"type": "Event",
					"description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at endPosition – length(this). Otherwise returns false.",
					"parent": "String"
				},
				"normalize": {
					"name": "normalize",
					"type": "unknown",
					"description": "Returns the String value result of normalizing the string into the normalization form named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
					"parent": "String"
				},
				"repeat": {
					"name": "repeat",
					"type": "Event",
					"description": "Returns a String value that is made from count copies appended together. If count is 0, the empty string is returned.",
					"parent": "String"
				},
				"startsWith": {
					"name": "startsWith",
					"type": "Event",
					"description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at position. Otherwise returns false.",
					"parent": "String"
				},
				"anchor": {
					"name": "anchor",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"big": {
					"name": "big",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"blink": {
					"name": "blink",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"bold": {
					"name": "bold",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fixed": {
					"name": "fixed",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fontcolor": {
					"name": "fontcolor",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fontsize": {
					"name": "fontsize",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"italics": {
					"name": "italics",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"link": {
					"name": "link",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"small": {
					"name": "small",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"strike": {
					"name": "strike",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"sub": {
					"name": "sub",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"sup": {
					"name": "sup",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"padStart": {
					"name": "padStart",
					"type": "Event",
					"description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the start (left) of the current string.",
					"parent": "String"
				},
				"padEnd": {
					"name": "padEnd",
					"type": "Event",
					"description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string.",
					"parent": "String"
				},
				"trimEnd": {
					"name": "trimEnd",
					"type": "Event",
					"description": "Removes the trailing white space and line terminator characters from a string.",
					"parent": "String"
				},
				"trimStart": {
					"name": "trimStart",
					"type": "Event",
					"description": "Removes the leading white space and line terminator characters from a string.",
					"parent": "String"
				},
				"trimLeft": {
					"name": "trimLeft",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility. Use `trimStart` instead",
					"parent": "String"
				},
				"trimRight": {
					"name": "trimRight",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility. Use `trimEnd` instead",
					"parent": "String"
				},
				"matchAll": {
					"name": "matchAll",
					"type": "Event",
					"description": "Matches a string with a regular expression, and returns an iterable of matches containing the results of that search.",
					"parent": "String"
				},
				"replaceAll": {
					"name": "replaceAll",
					"description": "Replace all instances of a substring in a string, using a regular expression or search string.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "String"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "String"
				},
				"toFixed": {
					"name": "toFixed",
					"type": "Event",
					"description": "Returns a string representing a number in fixed-point notation.",
					"parent": "Number"
				},
				"toExponential": {
					"name": "toExponential",
					"type": "Event",
					"description": "Returns a string containing a number represented in exponential notation.",
					"parent": "Number"
				},
				"toPrecision": {
					"name": "toPrecision",
					"type": "Event",
					"description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
					"parent": "Number"
				},
				"toLocaleString": {
					"name": "toLocaleString",
					"type": "Event",
					"description": "Returns a date converted to a string using the current locale. Converts a number to a string by using the current or specified locale. Returns a value as a string value appropriate to the host environments current locale. Converts a date and time to a string by using the current or specified locale. Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
					"parent": "Object"
				},
				"format": {
					"name": "format",
					"type": "Event",
					"parent": "Moment"
				},
				"startOf": {
					"name": "startOf",
					"type": "Event",
					"parent": "Moment"
				},
				"endOf": {
					"name": "endOf",
					"type": "Event",
					"parent": "Moment"
				},
				"add": {
					"name": "add",
					"type": "unknown",
					"parent": "Moment",
					"description": "reverse syntax"
				},
				"subtract": {
					"name": "subtract",
					"type": "unknown",
					"parent": "Moment",
					"description": "reverse syntax"
				},
				"calendar": {
					"name": "calendar",
					"type": "unknown",
					"parent": "Moment"
				},
				"clone": {
					"name": "clone",
					"type": "Event",
					"parent": "Moment"
				},
				"local": {
					"name": "local",
					"type": "Event",
					"parent": "Moment"
				},
				"isLocal": {
					"name": "isLocal",
					"type": "Event",
					"parent": "Moment"
				},
				"utc": {
					"name": "utc",
					"type": "Event",
					"parent": "Moment"
				},
				"isUTC": {
					"name": "isUTC",
					"type": "Event",
					"parent": "Moment"
				},
				"isUtc": {
					"name": "isUtc",
					"type": "Event",
					"parent": "Moment",
					"description": "use isUTC"
				},
				"parseZone": {
					"name": "parseZone",
					"type": "Event",
					"parent": "Moment"
				},
				"isValid": {
					"name": "isValid",
					"type": "Event",
					"parent": "Moment"
				},
				"invalidAt": {
					"name": "invalidAt",
					"type": "Event",
					"parent": "Moment"
				},
				"hasAlignedHourOffset": {
					"name": "hasAlignedHourOffset",
					"type": "Event",
					"parent": "Moment"
				},
				"creationData": {
					"name": "creationData",
					"type": "Event",
					"parent": "Moment"
				},
				"parsingFlags": {
					"name": "parsingFlags",
					"type": "Event",
					"parent": "Moment"
				},
				"year": {
					"name": "year",
					"type": "number",
					"parent": "Moment"
				},
				"years": {
					"name": "years",
					"type": "number",
					"parent": "Moment",
					"description": "use year()"
				},
				"quarter": {
					"name": "quarter",
					"type": "unknown",
					"parent": "Moment"
				},
				"quarters": {
					"name": "quarters",
					"type": "unknown",
					"parent": "Moment"
				},
				"month": {
					"name": "month",
					"type": "number",
					"parent": "Moment"
				},
				"months": {
					"name": "months",
					"type": "number",
					"parent": "Moment",
					"description": "use month()"
				},
				"day": {
					"name": "day",
					"type": "number",
					"parent": "Moment"
				},
				"days": {
					"name": "days",
					"type": "number",
					"parent": "Moment"
				},
				"date": {
					"name": "date",
					"type": "number",
					"parent": "Moment"
				},
				"dates": {
					"name": "dates",
					"type": "number",
					"parent": "Moment",
					"description": "use date()"
				},
				"hour": {
					"name": "hour",
					"type": "number",
					"parent": "Moment"
				},
				"hours": {
					"name": "hours",
					"type": "number",
					"parent": "Moment"
				},
				"minute": {
					"name": "minute",
					"type": "number",
					"parent": "Moment"
				},
				"minutes": {
					"name": "minutes",
					"type": "number",
					"parent": "Moment"
				},
				"second": {
					"name": "second",
					"type": "number",
					"parent": "Moment"
				},
				"seconds": {
					"name": "seconds",
					"type": "number",
					"parent": "Moment"
				},
				"millisecond": {
					"name": "millisecond",
					"type": "number",
					"parent": "Moment"
				},
				"milliseconds": {
					"name": "milliseconds",
					"type": "number",
					"parent": "Moment"
				},
				"weekday": {
					"name": "weekday",
					"type": "unknown",
					"parent": "Moment"
				},
				"isoWeekday": {
					"name": "isoWeekday",
					"type": "unknown",
					"parent": "Moment"
				},
				"weekYear": {
					"name": "weekYear",
					"type": "unknown",
					"parent": "Moment"
				},
				"isoWeekYear": {
					"name": "isoWeekYear",
					"type": "unknown",
					"parent": "Moment"
				},
				"week": {
					"name": "week",
					"type": "unknown",
					"parent": "Moment"
				},
				"weeks": {
					"name": "weeks",
					"type": "unknown",
					"parent": "Moment"
				},
				"isoWeek": {
					"name": "isoWeek",
					"type": "unknown",
					"parent": "Moment"
				},
				"isoWeeks": {
					"name": "isoWeeks",
					"type": "unknown",
					"parent": "Moment"
				},
				"weeksInYear": {
					"name": "weeksInYear",
					"type": "Event",
					"parent": "Moment"
				},
				"isoWeeksInYear": {
					"name": "isoWeeksInYear",
					"type": "Event",
					"parent": "Moment"
				},
				"isoWeeksInISOWeekYear": {
					"name": "isoWeeksInISOWeekYear",
					"type": "Event",
					"parent": "Moment"
				},
				"dayOfYear": {
					"name": "dayOfYear",
					"type": "unknown",
					"parent": "Moment"
				},
				"from": {
					"name": "from",
					"type": "Event",
					"parent": "Moment"
				},
				"to": {
					"name": "to",
					"type": "Event",
					"parent": "Moment"
				},
				"fromNow": {
					"name": "fromNow",
					"type": "Event",
					"parent": "Moment"
				},
				"toNow": {
					"name": "toNow",
					"type": "Event",
					"parent": "Moment"
				},
				"diff": {
					"name": "diff",
					"type": "Event",
					"parent": "Moment"
				},
				"toArray": {
					"name": "toArray",
					"type": "Event",
					"parent": "Moment"
				},
				"toDate": {
					"name": "toDate",
					"type": "Event",
					"parent": "Moment"
				},
				"toISOString": {
					"name": "toISOString",
					"type": "Event",
					"description": "Returns a date as a string value in ISO format.",
					"parent": "Moment"
				},
				"inspect": {
					"name": "inspect",
					"type": "Event",
					"parent": "Moment"
				},
				"toJSON": {
					"name": "toJSON",
					"type": "Event",
					"description": "Used by the JSON.stringify method to enable the transformation of an objects data for JavaScript Object Notation (JSON) serialization.",
					"parent": "Moment"
				},
				"unix": {
					"name": "unix",
					"type": "Event",
					"parent": "Moment"
				},
				"isLeapYear": {
					"name": "isLeapYear",
					"type": "Event",
					"parent": "Moment"
				},
				"zone": {
					"name": "zone",
					"type": "unknown",
					"parent": "Moment",
					"description": "in favor of utcOffset"
				},
				"utcOffset": {
					"name": "utcOffset",
					"type": "unknown",
					"parent": "Moment"
				},
				"isUtcOffset": {
					"name": "isUtcOffset",
					"type": "Event",
					"parent": "Moment"
				},
				"daysInMonth": {
					"name": "daysInMonth",
					"type": "Event",
					"parent": "Moment"
				},
				"isDST": {
					"name": "isDST",
					"type": "Event",
					"parent": "Moment"
				},
				"zoneAbbr": {
					"name": "zoneAbbr",
					"type": "Event",
					"parent": "Moment"
				},
				"zoneName": {
					"name": "zoneName",
					"type": "Event",
					"parent": "Moment"
				},
				"isBefore": {
					"name": "isBefore",
					"type": "Event",
					"parent": "Moment"
				},
				"isAfter": {
					"name": "isAfter",
					"type": "Event",
					"parent": "Moment"
				},
				"isSame": {
					"name": "isSame",
					"type": "Event",
					"parent": "Moment"
				},
				"isSameOrAfter": {
					"name": "isSameOrAfter",
					"type": "Event",
					"parent": "Moment"
				},
				"isSameOrBefore": {
					"name": "isSameOrBefore",
					"type": "Event",
					"parent": "Moment"
				},
				"isBetween": {
					"name": "isBetween",
					"type": "string",
					"enum": [
						"[)"
					],
					"parent": "Moment"
				},
				"lang": {
					"name": "lang",
					"type": "unknown",
					"parent": "Moment",
					"description": "as of 2.8.0, use locale"
				},
				"locale": {
					"name": "locale",
					"type": "unknown",
					"parent": "Moment"
				},
				"localeData": {
					"name": "localeData",
					"type": "Event",
					"parent": "Moment"
				},
				"isDSTShifted": {
					"name": "isDSTShifted",
					"type": "Event",
					"parent": "Moment",
					"description": "no reliable implementation"
				},
				"max": {
					"name": "max",
					"type": "unknown",
					"parent": "Moment",
					"description": "as of 2.7.0, use moment.min/max"
				},
				"min": {
					"name": "min",
					"type": "unknown",
					"parent": "Moment",
					"description": "as of 2.7.0, use moment.min/max"
				},
				"get": {
					"name": "get",
					"type": "Event",
					"parent": "Moment"
				},
				"set": {
					"name": "set",
					"type": "unknown",
					"parent": "Moment"
				},
				"toObject": {
					"name": "toObject",
					"type": "Event",
					"parent": "Moment"
				},
				"constructor": {
					"name": "constructor",
					"type": "Event",
					"description": "The initial value of Object.prototype.constructor is the standard built-in Object constructor.",
					"parent": "Object"
				},
				"hasOwnProperty": {
					"name": "hasOwnProperty",
					"type": "Event",
					"description": "Determines whether an object has a property with the specified name.",
					"parent": "Object"
				},
				"isPrototypeOf": {
					"name": "isPrototypeOf",
					"type": "Event",
					"description": "Determines whether an object exists in another objects prototype chain.",
					"parent": "Object"
				},
				"propertyIsEnumerable": {
					"name": "propertyIsEnumerable",
					"type": "Event",
					"description": "Determines whether a specified property is enumerable.",
					"parent": "Object"
				},
				"toDateString": {
					"name": "toDateString",
					"type": "Event",
					"description": "Returns a date as a string value.",
					"parent": "Date"
				},
				"toTimeString": {
					"name": "toTimeString",
					"type": "Event",
					"description": "Returns a time as a string value.",
					"parent": "Date"
				},
				"toLocaleDateString": {
					"name": "toLocaleDateString",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Returns a date as a string value appropriate to the host environments current locale. Converts a date to a string by using the current or specified locale.",
					"parent": "Date"
				},
				"toLocaleTimeString": {
					"name": "toLocaleTimeString",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Returns a time as a string value appropriate to the host environments current locale. Converts a time to a string by using the current or specified locale.",
					"parent": "Date"
				},
				"getTime": {
					"name": "getTime",
					"type": "Event",
					"description": "Gets the time value in milliseconds.",
					"parent": "Date"
				},
				"getFullYear": {
					"name": "getFullYear",
					"type": "Event",
					"description": "Gets the year, using local time.",
					"parent": "Date"
				},
				"getUTCFullYear": {
					"name": "getUTCFullYear",
					"type": "Event",
					"description": "Gets the year using Universal Coordinated Time (UTC).",
					"parent": "Date"
				},
				"getMonth": {
					"name": "getMonth",
					"type": "Event",
					"description": "Gets the month, using local time.",
					"parent": "Date"
				},
				"getUTCMonth": {
					"name": "getUTCMonth",
					"type": "Event",
					"description": "Gets the month of a Date object using Universal Coordinated Time (UTC).",
					"parent": "Date"
				},
				"getDate": {
					"name": "getDate",
					"type": "Event",
					"description": "Gets the day-of-the-month, using local time.",
					"parent": "Date"
				},
				"getUTCDate": {
					"name": "getUTCDate",
					"type": "Event",
					"description": "Gets the day-of-the-month, using Universal Coordinated Time (UTC).",
					"parent": "Date"
				},
				"getDay": {
					"name": "getDay",
					"type": "Event",
					"description": "Gets the day of the week, using local time.",
					"parent": "Date"
				},
				"getUTCDay": {
					"name": "getUTCDay",
					"type": "Event",
					"description": "Gets the day of the week using Universal Coordinated Time (UTC).",
					"parent": "Date"
				},
				"getHours": {
					"name": "getHours",
					"type": "Event",
					"description": "Gets the hours in a date, using local time.",
					"parent": "Date"
				},
				"getUTCHours": {
					"name": "getUTCHours",
					"type": "Event",
					"description": "Gets the hours value in a Date object using Universal Coordinated Time (UTC).",
					"parent": "Date"
				},
				"getMinutes": {
					"name": "getMinutes",
					"type": "Event",
					"description": "Gets the minutes of a Date object, using local time.",
					"parent": "Date"
				},
				"getUTCMinutes": {
					"name": "getUTCMinutes",
					"type": "Event",
					"description": "Gets the minutes of a Date object using Universal Coordinated Time (UTC).",
					"parent": "Date"
				},
				"getSeconds": {
					"name": "getSeconds",
					"type": "Event",
					"description": "Gets the seconds of a Date object, using local time.",
					"parent": "Date"
				},
				"getUTCSeconds": {
					"name": "getUTCSeconds",
					"type": "Event",
					"description": "Gets the seconds of a Date object using Universal Coordinated Time (UTC).",
					"parent": "Date"
				},
				"getMilliseconds": {
					"name": "getMilliseconds",
					"type": "Event",
					"description": "Gets the milliseconds of a Date, using local time.",
					"parent": "Date"
				},
				"getUTCMilliseconds": {
					"name": "getUTCMilliseconds",
					"type": "Event",
					"description": "Gets the milliseconds of a Date object using Universal Coordinated Time (UTC).",
					"parent": "Date"
				},
				"getTimezoneOffset": {
					"name": "getTimezoneOffset",
					"type": "Event",
					"description": "Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC).",
					"parent": "Date"
				},
				"setTime": {
					"name": "setTime",
					"type": "Event",
					"description": "Sets the date and time value in the Date object.",
					"parent": "Date"
				},
				"setMilliseconds": {
					"name": "setMilliseconds",
					"type": "Event",
					"description": "Sets the milliseconds value in the Date object using local time.",
					"parent": "Date"
				},
				"setUTCMilliseconds": {
					"name": "setUTCMilliseconds",
					"type": "Event",
					"description": "Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).",
					"parent": "Date"
				},
				"setSeconds": {
					"name": "setSeconds",
					"type": "Event",
					"description": "Sets the seconds value in the Date object using local time.",
					"parent": "Date"
				},
				"setUTCSeconds": {
					"name": "setUTCSeconds",
					"type": "Event",
					"description": "Sets the seconds value in the Date object using Universal Coordinated Time (UTC).",
					"parent": "Date"
				},
				"setMinutes": {
					"name": "setMinutes",
					"type": "Event",
					"description": "Sets the minutes value in the Date object using local time.",
					"parent": "Date"
				},
				"setUTCMinutes": {
					"name": "setUTCMinutes",
					"type": "Event",
					"description": "Sets the minutes value in the Date object using Universal Coordinated Time (UTC).",
					"parent": "Date"
				},
				"setHours": {
					"name": "setHours",
					"type": "Event",
					"description": "Sets the hour value in the Date object using local time.",
					"parent": "Date"
				},
				"setUTCHours": {
					"name": "setUTCHours",
					"type": "Event",
					"description": "Sets the hours value in the Date object using Universal Coordinated Time (UTC).",
					"parent": "Date"
				},
				"setDate": {
					"name": "setDate",
					"type": "Event",
					"description": "Sets the numeric day-of-the-month value of the Date object using local time.",
					"parent": "Date"
				},
				"setUTCDate": {
					"name": "setUTCDate",
					"type": "Event",
					"description": "Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).",
					"parent": "Date"
				},
				"setMonth": {
					"name": "setMonth",
					"type": "Event",
					"description": "Sets the month value in the Date object using local time.",
					"parent": "Date"
				},
				"setUTCMonth": {
					"name": "setUTCMonth",
					"type": "Event",
					"description": "Sets the month value in the Date object using Universal Coordinated Time (UTC).",
					"parent": "Date"
				},
				"setFullYear": {
					"name": "setFullYear",
					"type": "Event",
					"description": "Sets the year of the Date object using local time.",
					"parent": "Date"
				},
				"setUTCFullYear": {
					"name": "setUTCFullYear",
					"type": "Event",
					"description": "Sets the year value in the Date object using Universal Coordinated Time (UTC).",
					"parent": "Date"
				},
				"toUTCString": {
					"name": "toUTCString",
					"type": "Event",
					"description": "Returns a date converted to a string using Universal Coordinated Time (UTC).",
					"parent": "Date"
				},
				"__@toPrimitive@6037": {
					"name": "__@toPrimitive@6037",
					"type": "unknown",
					"description": "Converts a Date object to a string. Converts a Date object to a number. Converts a Date object to a string or number.",
					"parent": "Date"
				},
				"pop": {
					"name": "pop",
					"description": "Removes the last element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"type": "Event",
					"parent": "Array"
				},
				"push": {
					"name": "push",
					"type": "Event",
					"description": "Appends new elements to the end of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"join": {
					"name": "join",
					"type": "Event",
					"description": "Adds all the elements of an array into a string, separated by the specified separator string.",
					"parent": "Array"
				},
				"reverse": {
					"name": "reverse",
					"description": "Reverses the elements in an array in place. This method mutates the array and returns a reference to the same array.",
					"type": "Event",
					"parent": "Array"
				},
				"shift": {
					"name": "shift",
					"description": "Removes the first element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"type": "Event",
					"parent": "Array"
				},
				"sort": {
					"name": "sort",
					"description": "Sorts an array in place. This method mutates the array and returns a reference to the same array.",
					"type": "Event",
					"parent": "Array"
				},
				"splice": {
					"name": "splice",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
					"parent": "Array"
				},
				"unshift": {
					"name": "unshift",
					"type": "Event",
					"description": "Inserts new elements at the start of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"every": {
					"name": "every",
					"type": "Event",
					"description": "Determines whether all the members of an array satisfy the specified test.",
					"parent": "Array"
				},
				"some": {
					"name": "some",
					"type": "Event",
					"description": "Determines whether the specified callback function returns true for any element of an array.",
					"parent": "Array"
				},
				"forEach": {
					"name": "forEach",
					"type": "Event",
					"description": "Performs the specified action for each element in an array.",
					"parent": "Array"
				},
				"map": {
					"name": "map",
					"type": "Event",
					"description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
					"parent": "Array"
				},
				"filter": {
					"name": "filter",
					"description": "Returns the elements of an array that meet the condition specified in a callback function.",
					"type": "Event",
					"parent": "Array"
				},
				"reduce": {
					"name": "reduce",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"reduceRight": {
					"name": "reduceRight",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"find": {
					"name": "find",
					"type": "Event",
					"description": "Returns the value of the first element in the array where predicate is true, and undefined otherwise.",
					"parent": "Array"
				},
				"findIndex": {
					"name": "findIndex",
					"type": "Event",
					"description": "Returns the index of the first element in the array where predicate is true, and -1 otherwise.",
					"parent": "Array"
				},
				"fill": {
					"name": "fill",
					"description": "Changes all array elements from start to end index to a static value and returns the modified array",
					"type": "Event",
					"parent": "Array"
				},
				"copyWithin": {
					"name": "copyWithin",
					"description": "Returns the this object after copying a section of the array identified by start and end to the same array starting at position target",
					"type": "Event",
					"parent": "Array"
				},
				"entries": {
					"name": "entries",
					"type": "Event",
					"description": "Returns an iterable of key, value pairs for every entry in the array",
					"parent": "Array"
				},
				"keys": {
					"name": "keys",
					"type": "Event",
					"description": "Returns an iterable of keys in the array",
					"parent": "Array"
				},
				"values": {
					"name": "values",
					"type": "Event",
					"description": "Returns an iterable of values in the array",
					"parent": "Array"
				},
				"flatMap": {
					"name": "flatMap",
					"description": "Calls a defined callback function on each element of an array. Then, flattens the result into a new array. This is identical to a map followed by flat with depth 1.",
					"type": "Event",
					"parent": "Array"
				},
				"flat": {
					"name": "flat",
					"type": "Event",
					"description": "Returns a new array with all sub-array elements concatenated into it recursively up to the specified depth.",
					"parent": "Array"
				},
				"__@unscopables@327": {
					"name": "__@unscopables@327",
					"type": "Event",
					"description": "Returns an object whose properties have the value true when they will be absent when used in a with statement.",
					"parent": "Array"
				},
				"y": {
					"name": "y",
					"type": "number",
					"parent": "MomentInputObject"
				},
				"M": {
					"name": "M",
					"type": "number",
					"parent": "MomentInputObject"
				},
				"d": {
					"name": "d",
					"type": "number",
					"parent": "MomentInputObject"
				},
				"D": {
					"name": "D",
					"type": "number",
					"parent": "MomentInputObject"
				},
				"h": {
					"name": "h",
					"type": "number",
					"parent": "MomentInputObject"
				},
				"m": {
					"name": "m",
					"type": "number",
					"parent": "MomentInputObject"
				},
				"s": {
					"name": "s",
					"type": "number",
					"parent": "MomentInputObject"
				},
				"ms": {
					"name": "ms",
					"type": "number",
					"parent": "MomentInputObject"
				}
			},
			"relativePath": "src/services/format/format_date.ts"
		},
		"ElasticEui_dateFormatAliases": {
			"id": "ElasticEui_dateFormatAliases",
			"name": "DateFormatAliases",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "dateFormatAliases",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/format/format_date.ts"
		},
		"ElasticEui_formatNumber": {
			"id": "ElasticEui_formatNumber",
			"name": "FormatNumber",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "formatNumber",
				"lib": "elasticEui"
			},
			"required": [
				"toFixed",
				"toExponential",
				"toPrecision"
			],
			"props": {
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of an object.",
					"parent": "Number"
				},
				"toFixed": {
					"name": "toFixed",
					"type": "Event",
					"description": "Returns a string representing a number in fixed-point notation.",
					"parent": "Number"
				},
				"toExponential": {
					"name": "toExponential",
					"type": "Event",
					"description": "Returns a string containing a number represented in exponential notation.",
					"parent": "Number"
				},
				"toPrecision": {
					"name": "toPrecision",
					"type": "Event",
					"description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
					"parent": "Number"
				},
				"valueOf": {
					"name": "valueOf",
					"type": "Event",
					"description": "Returns the primitive value of the specified object.",
					"parent": "Number"
				},
				"toLocaleString": {
					"name": "toLocaleString",
					"type": "Event",
					"description": "Converts a number to a string by using the current or specified locale.",
					"parent": "Number"
				}
			},
			"relativePath": "src/services/format/format_number.ts"
		},
		"ElasticEui_formatText": {
			"id": "ElasticEui_formatText",
			"name": "FormatText",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "formatText",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/format/format_text.ts"
		},
		"ElasticEui_isEvenlyDivisibleBy": {
			"id": "ElasticEui_isEvenlyDivisibleBy",
			"name": "IsEvenlyDivisibleBy",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "isEvenlyDivisibleBy",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/number/number.ts"
		},
		"ElasticEui_isWithinRange": {
			"id": "ElasticEui_isWithinRange",
			"name": "IsWithinRange",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "isWithinRange",
				"lib": "elasticEui"
			},
			"required": [
				"charAt",
				"charCodeAt",
				"concat",
				"indexOf",
				"lastIndexOf",
				"localeCompare",
				"match",
				"replace",
				"search",
				"slice",
				"split",
				"substring",
				"toLowerCase",
				"toLocaleLowerCase",
				"toUpperCase",
				"toLocaleUpperCase",
				"trim",
				"length",
				"substr",
				"codePointAt",
				"includes",
				"endsWith",
				"normalize",
				"repeat",
				"startsWith",
				"anchor",
				"big",
				"blink",
				"bold",
				"fixed",
				"fontcolor",
				"fontsize",
				"italics",
				"link",
				"small",
				"strike",
				"sub",
				"sup",
				"padStart",
				"padEnd",
				"trimEnd",
				"trimStart",
				"trimLeft",
				"trimRight",
				"matchAll",
				"replaceAll",
				"__@iterator@43",
				"toFixed",
				"toExponential",
				"toPrecision"
			],
			"props": {
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of a string. Returns a string representation of an object.",
					"parent": "String"
				},
				"charAt": {
					"name": "charAt",
					"type": "Event",
					"description": "Returns the character at the specified index.",
					"parent": "String"
				},
				"charCodeAt": {
					"name": "charCodeAt",
					"type": "Event",
					"description": "Returns the Unicode value of the character at the specified location.",
					"parent": "String"
				},
				"concat": {
					"name": "concat",
					"type": "Event",
					"description": "Returns a string that contains the concatenation of two or more strings.",
					"parent": "String"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the position of the first occurrence of a substring.",
					"parent": "String"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the last occurrence of a substring in the string.",
					"parent": "String"
				},
				"localeCompare": {
					"name": "localeCompare",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Determines whether two strings are equivalent in the current locale. Determines whether two strings are equivalent in the current or specified locale.",
					"parent": "String"
				},
				"match": {
					"name": "match",
					"type": "unknown",
					"description": "Matches a string with a regular expression, and returns an array containing the results of that search. Matches a string or an object that supports being matched against, and returns an array containing the results of that search, or null if no matches are found.",
					"parent": "String"
				},
				"replace": {
					"name": "replace",
					"description": "Replaces text in a string, using a regular expression or search string. Replaces first match with string or all matches with RegExp. Replaces text in a string, using an object that supports replacement within a string.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "String"
				},
				"search": {
					"name": "search",
					"type": "unknown",
					"description": "Finds the first substring match in a regular expression search.",
					"parent": "String"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a section of a string.",
					"parent": "String"
				},
				"split": {
					"name": "split",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Split a string into substrings using the specified separator and return them as an array.",
					"parent": "String"
				},
				"substring": {
					"name": "substring",
					"type": "Event",
					"description": "Returns the substring at the specified location within a String object.",
					"parent": "String"
				},
				"toLowerCase": {
					"name": "toLowerCase",
					"type": "Event",
					"description": "Converts all the alphabetic characters in a string to lowercase.",
					"parent": "String"
				},
				"toLocaleLowerCase": {
					"name": "toLocaleLowerCase",
					"description": "Converts all alphabetic characters to lowercase, taking into account the host environments current locale.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "String"
				},
				"toUpperCase": {
					"name": "toUpperCase",
					"type": "Event",
					"description": "Converts all the alphabetic characters in a string to uppercase.",
					"parent": "String"
				},
				"toLocaleUpperCase": {
					"name": "toLocaleUpperCase",
					"description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environments current locale.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "String"
				},
				"trim": {
					"name": "trim",
					"type": "Event",
					"description": "Removes the leading and trailing white space and line terminator characters from a string.",
					"parent": "String"
				},
				"length": {
					"name": "length",
					"type": "number",
					"description": "Returns the length of a String object.",
					"parent": "String"
				},
				"substr": {
					"name": "substr",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"valueOf": {
					"name": "valueOf",
					"type": "Event",
					"description": "Returns the primitive value of the specified object.",
					"parent": "String"
				},
				"codePointAt": {
					"name": "codePointAt",
					"type": "Event",
					"description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point value of the UTF-16 encoded code point starting at the string element at position pos in the String resulting from converting this object to a String. If there is no element at that position, the result is undefined. If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
					"parent": "String"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Returns true if searchString appears as a substring of the result of converting this object to a String, at one or more positions that are greater than or equal to position; otherwise, returns false.",
					"parent": "String"
				},
				"endsWith": {
					"name": "endsWith",
					"type": "Event",
					"description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at endPosition – length(this). Otherwise returns false.",
					"parent": "String"
				},
				"normalize": {
					"name": "normalize",
					"type": "unknown",
					"description": "Returns the String value result of normalizing the string into the normalization form named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
					"parent": "String"
				},
				"repeat": {
					"name": "repeat",
					"type": "Event",
					"description": "Returns a String value that is made from count copies appended together. If count is 0, the empty string is returned.",
					"parent": "String"
				},
				"startsWith": {
					"name": "startsWith",
					"type": "Event",
					"description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at position. Otherwise returns false.",
					"parent": "String"
				},
				"anchor": {
					"name": "anchor",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"big": {
					"name": "big",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"blink": {
					"name": "blink",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"bold": {
					"name": "bold",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fixed": {
					"name": "fixed",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fontcolor": {
					"name": "fontcolor",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fontsize": {
					"name": "fontsize",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"italics": {
					"name": "italics",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"link": {
					"name": "link",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"small": {
					"name": "small",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"strike": {
					"name": "strike",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"sub": {
					"name": "sub",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"sup": {
					"name": "sup",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"padStart": {
					"name": "padStart",
					"type": "Event",
					"description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the start (left) of the current string.",
					"parent": "String"
				},
				"padEnd": {
					"name": "padEnd",
					"type": "Event",
					"description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string.",
					"parent": "String"
				},
				"trimEnd": {
					"name": "trimEnd",
					"type": "Event",
					"description": "Removes the trailing white space and line terminator characters from a string.",
					"parent": "String"
				},
				"trimStart": {
					"name": "trimStart",
					"type": "Event",
					"description": "Removes the leading white space and line terminator characters from a string.",
					"parent": "String"
				},
				"trimLeft": {
					"name": "trimLeft",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility. Use `trimStart` instead",
					"parent": "String"
				},
				"trimRight": {
					"name": "trimRight",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility. Use `trimEnd` instead",
					"parent": "String"
				},
				"matchAll": {
					"name": "matchAll",
					"type": "Event",
					"description": "Matches a string with a regular expression, and returns an iterable of matches containing the results of that search.",
					"parent": "String"
				},
				"replaceAll": {
					"name": "replaceAll",
					"description": "Replace all instances of a substring in a string, using a regular expression or search string.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "String"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "String"
				},
				"toFixed": {
					"name": "toFixed",
					"type": "Event",
					"description": "Returns a string representing a number in fixed-point notation.",
					"parent": "Number"
				},
				"toExponential": {
					"name": "toExponential",
					"type": "Event",
					"description": "Returns a string containing a number represented in exponential notation.",
					"parent": "Number"
				},
				"toPrecision": {
					"name": "toPrecision",
					"type": "Event",
					"description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
					"parent": "Number"
				},
				"toLocaleString": {
					"name": "toLocaleString",
					"type": "Event",
					"description": "Returns a date converted to a string using the current locale. Converts a number to a string by using the current or specified locale.",
					"parent": "Object"
				}
			},
			"relativePath": "src/services/number/number.ts"
		},
		"ElasticEui_Pager": {
			"id": "ElasticEui_Pager",
			"name": "Pager",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "Pager",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/paging/pager.ts"
		},
		"ElasticEui_Random": {
			"id": "ElasticEui_Random",
			"name": "Random",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "Random",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/random.ts"
		},
		"ElasticEui_getSecureRelForTarget": {
			"id": "ElasticEui_getSecureRelForTarget",
			"name": "GetSecureRelForTarget",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "getSecureRelForTarget",
				"lib": "elasticEui"
			},
			"props": {
				"href": {
					"name": "href",
					"type": "string"
				},
				"target": {
					"name": "target",
					"type": "string",
					"default": ""
				},
				"rel": {
					"name": "rel",
					"type": "string"
				}
			},
			"relativePath": "src/services/security/get_secure_rel_for_target.ts"
		},
		"ElasticEui_toSentenceCase": {
			"id": "ElasticEui_toSentenceCase",
			"name": "ToSentenceCase",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "toSentenceCase",
				"lib": "elasticEui"
			},
			"description": "This function returns the same string with the first letter of the first word capitalized.",
			"props": {},
			"relativePath": "src/services/string/to_case.ts"
		},
		"ElasticEui_toInitials": {
			"id": "ElasticEui_toInitials",
			"name": "ToInitials",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "toInitials",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/string/to_initials.ts"
		},
		"ElasticEui_slugify": {
			"id": "ElasticEui_slugify",
			"name": "Slugify",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "slugify",
				"lib": "elasticEui"
			},
			"description": "Lowercases input and replaces spaces with hyphens: e.g. GridView Example -> gridview-example",
			"props": {},
			"relativePath": "src/services/string/slugify.ts"
		},
		"ElasticEui_PropertySortType": {
			"id": "ElasticEui_PropertySortType",
			"name": "PropertySortType",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "PropertySortType",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/sort/property_sort.ts"
		},
		"ElasticEui_SortDirectionType": {
			"id": "ElasticEui_SortDirectionType",
			"name": "SortDirectionType",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "SortDirectionType",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/sort/sort_direction.ts"
		},
		"ElasticEui_SortDirection": {
			"id": "ElasticEui_SortDirection",
			"name": "SortDirection",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "SortDirection",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/sort/sort_direction.ts"
		},
		"ElasticEui_SortableProperties": {
			"id": "ElasticEui_SortableProperties",
			"name": "SortableProperties",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "SortableProperties",
				"lib": "elasticEui"
			},
			"description": "Stores sort information for a set of SortableProperties, including which property is currently being sorted on, as well as the last sort order for each property.",
			"props": {},
			"relativePath": "src/services/sort/sortable_properties.ts"
		},
		"ElasticEui_Comparators": {
			"id": "ElasticEui_Comparators",
			"name": "Comparators",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "Comparators",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/sort/comparators.ts"
		},
		"ElasticEui_calculatePopoverPosition": {
			"id": "ElasticEui_calculatePopoverPosition",
			"name": "CalculatePopoverPosition",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "calculatePopoverPosition",
				"lib": "elasticEui"
			},
			"description": "Determine the best position for a popover that avoids clipping by the window view port.",
			"required": [
				"right",
				"bottom",
				"top",
				"left",
				"width",
				"height"
			],
			"props": {
				"right": {
					"name": "right",
					"type": "number",
					"parent": "EuiPopoverAnchorRect"
				},
				"bottom": {
					"name": "bottom",
					"type": "number",
					"parent": "EuiPopoverAnchorRect"
				},
				"top": {
					"name": "top",
					"type": "number",
					"parent": "EuiPopoverBoundingBox"
				},
				"left": {
					"name": "left",
					"type": "number",
					"parent": "EuiPopoverBoundingBox"
				},
				"width": {
					"name": "width",
					"type": "number",
					"parent": "EuiPopoverBoundingBox"
				},
				"height": {
					"name": "height",
					"type": "number",
					"parent": "EuiPopoverBoundingBox"
				}
			},
			"relativePath": "src/services/popover/calculate_popover_position.ts"
		},
		"ElasticEui_findPopoverPosition": {
			"id": "ElasticEui_findPopoverPosition",
			"name": "FindPopoverPosition",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "findPopoverPosition",
				"lib": "elasticEui"
			},
			"description": "Calculates the absolute positioning (relative to document.body) to place a popover element",
			"required": [
				"anchor",
				"popover",
				"position"
			],
			"props": {
				"anchor": {
					"name": "anchor",
					"type": "Node",
					"parent": "FindPopoverPositionArgs"
				},
				"popover": {
					"name": "popover",
					"type": "Node",
					"parent": "FindPopoverPositionArgs"
				},
				"align": {
					"name": "align",
					"type": "string",
					"enum": [
						"left",
						"right",
						"top",
						"bottom"
					],
					"parent": "FindPopoverPositionArgs"
				},
				"position": {
					"name": "position",
					"type": "string",
					"enum": [
						"left",
						"right",
						"top",
						"bottom"
					],
					"parent": "FindPopoverPositionArgs"
				},
				"forcePosition": {
					"name": "forcePosition",
					"type": "boolean",
					"parent": "FindPopoverPositionArgs"
				},
				"buffer": {
					"name": "buffer",
					"type": "number",
					"default": 16,
					"parent": "FindPopoverPositionArgs"
				},
				"offset": {
					"name": "offset",
					"type": "number",
					"default": 0,
					"parent": "FindPopoverPositionArgs"
				},
				"allowCrossAxis": {
					"name": "allowCrossAxis",
					"type": "boolean",
					"default": false,
					"parent": "FindPopoverPositionArgs"
				},
				"container": {
					"name": "container",
					"type": "Node",
					"parent": "FindPopoverPositionArgs"
				},
				"arrowConfig": {
					"name": "arrowConfig",
					"type": "unknown",
					"parent": "FindPopoverPositionArgs"
				},
				"returnBoundingBox": {
					"name": "returnBoundingBox",
					"type": "boolean",
					"parent": "FindPopoverPositionArgs"
				}
			},
			"relativePath": "src/services/popover/popover_positioning.ts"
		},
		"ElasticEui_getDurationAndPerformOnFrame": {
			"id": "ElasticEui_getDurationAndPerformOnFrame",
			"name": "GetDurationAndPerformOnFrame",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "getDurationAndPerformOnFrame",
				"lib": "elasticEui"
			},
			"required": [
				"length",
				"pop",
				"push",
				"concat",
				"join",
				"reverse",
				"shift",
				"slice",
				"sort",
				"splice",
				"unshift",
				"indexOf",
				"lastIndexOf",
				"every",
				"some",
				"forEach",
				"map",
				"filter",
				"reduce",
				"reduceRight",
				"find",
				"findIndex",
				"fill",
				"copyWithin",
				"entries",
				"keys",
				"values",
				"includes",
				"flatMap",
				"flat",
				"__@iterator@43",
				"__@unscopables@327"
			],
			"props": {
				"length": {
					"name": "length",
					"type": "number",
					"description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
					"parent": "Array"
				},
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of an array.",
					"parent": "Array"
				},
				"toLocaleString": {
					"name": "toLocaleString",
					"type": "Event",
					"description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
					"parent": "Array"
				},
				"pop": {
					"name": "pop",
					"type": "Event",
					"description": "Removes the last element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"push": {
					"name": "push",
					"type": "Event",
					"description": "Appends new elements to the end of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"concat": {
					"name": "concat",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Combines two or more arrays. This method returns a new array without modifying any existing arrays.",
					"parent": "Array"
				},
				"join": {
					"name": "join",
					"type": "Event",
					"description": "Adds all the elements of an array into a string, separated by the specified separator string.",
					"parent": "Array"
				},
				"reverse": {
					"name": "reverse",
					"type": "Event",
					"description": "Reverses the elements in an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"shift": {
					"name": "shift",
					"type": "Event",
					"description": "Removes the first element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a copy of a section of an array. For both start and end, a negative index can be used to indicate an offset from the end of the array. For example, -2 refers to the second to last element of the array.",
					"parent": "Array"
				},
				"sort": {
					"name": "sort",
					"type": "Event",
					"description": "Sorts an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"splice": {
					"name": "splice",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
					"parent": "Array"
				},
				"unshift": {
					"name": "unshift",
					"type": "Event",
					"description": "Inserts new elements at the start of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"every": {
					"name": "every",
					"type": "Event",
					"description": "Determines whether all the members of an array satisfy the specified test.",
					"parent": "Array"
				},
				"some": {
					"name": "some",
					"type": "Event",
					"description": "Determines whether the specified callback function returns true for any element of an array.",
					"parent": "Array"
				},
				"forEach": {
					"name": "forEach",
					"type": "Event",
					"description": "Performs the specified action for each element in an array.",
					"parent": "Array"
				},
				"map": {
					"name": "map",
					"type": "Event",
					"description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
					"parent": "Array"
				},
				"filter": {
					"name": "filter",
					"type": "Event",
					"description": "Returns the elements of an array that meet the condition specified in a callback function.",
					"parent": "Array"
				},
				"reduce": {
					"name": "reduce",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"reduceRight": {
					"name": "reduceRight",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"find": {
					"name": "find",
					"description": "Returns the value of the first element in the array where predicate is true, and undefined otherwise.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"findIndex": {
					"name": "findIndex",
					"type": "Event",
					"description": "Returns the index of the first element in the array where predicate is true, and -1 otherwise.",
					"parent": "Array"
				},
				"fill": {
					"name": "fill",
					"type": "Event",
					"description": "Changes all array elements from start to end index to a static value and returns the modified array",
					"parent": "Array"
				},
				"copyWithin": {
					"name": "copyWithin",
					"type": "Event",
					"description": "Returns the this object after copying a section of the array identified by start and end to the same array starting at position target",
					"parent": "Array"
				},
				"entries": {
					"name": "entries",
					"type": "Event",
					"description": "Returns an iterable of key, value pairs for every entry in the array",
					"parent": "Array"
				},
				"keys": {
					"name": "keys",
					"type": "Event",
					"description": "Returns an iterable of keys in the array",
					"parent": "Array"
				},
				"values": {
					"name": "values",
					"type": "Event",
					"description": "Returns an iterable of values in the array",
					"parent": "Array"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Determines whether an array includes a certain element, returning true or false as appropriate.",
					"parent": "Array"
				},
				"flatMap": {
					"name": "flatMap",
					"description": "Calls a defined callback function on each element of an array. Then, flattens the result into a new array. This is identical to a map followed by flat with depth 1.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"flat": {
					"name": "flat",
					"type": "Event",
					"description": "Returns a new array with all sub-array elements concatenated into it recursively up to the specified depth.",
					"parent": "Array"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "Array"
				},
				"__@unscopables@327": {
					"name": "__@unscopables@327",
					"type": "Event",
					"description": "Returns an object whose properties have the value true when they will be absent when used in a with statement.",
					"parent": "Array"
				}
			},
			"relativePath": "src/services/transition/transition.ts"
		},
		"ElasticEui_getTransitionTimings": {
			"id": "ElasticEui_getTransitionTimings",
			"name": "GetTransitionTimings",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "getTransitionTimings",
				"lib": "elasticEui"
			},
			"required": [
				"attributes",
				"classList",
				"className",
				"clientHeight",
				"clientLeft",
				"clientTop",
				"clientWidth",
				"id",
				"localName",
				"namespaceURI",
				"onfullscreenchange",
				"onfullscreenerror",
				"outerHTML",
				"ownerDocument",
				"part",
				"prefix",
				"scrollHeight",
				"scrollLeft",
				"scrollTop",
				"scrollWidth",
				"shadowRoot",
				"slot",
				"tagName",
				"attachShadow",
				"closest",
				"getAttribute",
				"getAttributeNS",
				"getAttributeNames",
				"getAttributeNode",
				"getAttributeNodeNS",
				"getBoundingClientRect",
				"getClientRects",
				"getElementsByClassName",
				"getElementsByTagName",
				"getElementsByTagNameNS",
				"hasAttribute",
				"hasAttributeNS",
				"hasAttributes",
				"hasPointerCapture",
				"insertAdjacentElement",
				"insertAdjacentHTML",
				"insertAdjacentText",
				"matches",
				"releasePointerCapture",
				"removeAttribute",
				"removeAttributeNS",
				"removeAttributeNode",
				"requestFullscreen",
				"requestPointerLock",
				"scroll",
				"scrollBy",
				"scrollIntoView",
				"scrollTo",
				"setAttribute",
				"setAttributeNS",
				"setAttributeNode",
				"setAttributeNodeNS",
				"setPointerCapture",
				"toggleAttribute",
				"webkitMatchesSelector",
				"addEventListener",
				"removeEventListener",
				"baseURI",
				"childNodes",
				"firstChild",
				"isConnected",
				"lastChild",
				"nextSibling",
				"nodeName",
				"nodeType",
				"nodeValue",
				"parentElement",
				"parentNode",
				"previousSibling",
				"textContent",
				"appendChild",
				"cloneNode",
				"compareDocumentPosition",
				"contains",
				"getRootNode",
				"hasChildNodes",
				"insertBefore",
				"isDefaultNamespace",
				"isEqualNode",
				"isSameNode",
				"lookupNamespaceURI",
				"lookupPrefix",
				"normalize",
				"removeChild",
				"replaceChild",
				"ATTRIBUTE_NODE",
				"CDATA_SECTION_NODE",
				"COMMENT_NODE",
				"DOCUMENT_FRAGMENT_NODE",
				"DOCUMENT_NODE",
				"DOCUMENT_POSITION_CONTAINED_BY",
				"DOCUMENT_POSITION_CONTAINS",
				"DOCUMENT_POSITION_DISCONNECTED",
				"DOCUMENT_POSITION_FOLLOWING",
				"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
				"DOCUMENT_POSITION_PRECEDING",
				"DOCUMENT_TYPE_NODE",
				"ELEMENT_NODE",
				"ENTITY_NODE",
				"ENTITY_REFERENCE_NODE",
				"NOTATION_NODE",
				"PROCESSING_INSTRUCTION_NODE",
				"TEXT_NODE",
				"dispatchEvent",
				"ariaAtomic",
				"ariaAutoComplete",
				"ariaBusy",
				"ariaChecked",
				"ariaColCount",
				"ariaColIndex",
				"ariaColSpan",
				"ariaCurrent",
				"ariaDisabled",
				"ariaExpanded",
				"ariaHasPopup",
				"ariaHidden",
				"ariaKeyShortcuts",
				"ariaLabel",
				"ariaLevel",
				"ariaLive",
				"ariaModal",
				"ariaMultiLine",
				"ariaMultiSelectable",
				"ariaOrientation",
				"ariaPlaceholder",
				"ariaPosInSet",
				"ariaPressed",
				"ariaReadOnly",
				"ariaRequired",
				"ariaRoleDescription",
				"ariaRowCount",
				"ariaRowIndex",
				"ariaRowSpan",
				"ariaSelected",
				"ariaSetSize",
				"ariaSort",
				"ariaValueMax",
				"ariaValueMin",
				"ariaValueNow",
				"ariaValueText",
				"animate",
				"getAnimations",
				"after",
				"before",
				"remove",
				"replaceWith",
				"innerHTML",
				"nextElementSibling",
				"previousElementSibling",
				"childElementCount",
				"children",
				"firstElementChild",
				"lastElementChild",
				"append",
				"prepend",
				"querySelector",
				"querySelectorAll",
				"replaceChildren",
				"assignedSlot"
			],
			"props": {
				"attributes": {
					"name": "attributes",
					"type": "unknown",
					"parent": "Element"
				},
				"classList": {
					"name": "classList",
					"type": "unknown",
					"description": "Allows for manipulation of elements class content attribute as a set of whitespace-separated tokens through a DOMTokenList object.",
					"parent": "Element"
				},
				"className": {
					"name": "className",
					"type": "string",
					"description": "Returns the value of elements class content attribute. Can be set to change it.",
					"parent": "Element"
				},
				"clientHeight": {
					"name": "clientHeight",
					"type": "number",
					"parent": "Element"
				},
				"clientLeft": {
					"name": "clientLeft",
					"type": "number",
					"parent": "Element"
				},
				"clientTop": {
					"name": "clientTop",
					"type": "number",
					"parent": "Element"
				},
				"clientWidth": {
					"name": "clientWidth",
					"type": "number",
					"parent": "Element"
				},
				"id": {
					"name": "id",
					"type": "string",
					"description": "Returns the value of elements id content attribute. Can be set to change it.",
					"parent": "Element"
				},
				"localName": {
					"name": "localName",
					"type": "string",
					"description": "Returns the local name.",
					"parent": "Element"
				},
				"namespaceURI": {
					"name": "namespaceURI",
					"type": "string",
					"description": "Returns the namespace.",
					"parent": "Element"
				},
				"onfullscreenchange": {
					"name": "onfullscreenchange",
					"type": "Event",
					"parent": "Element"
				},
				"onfullscreenerror": {
					"name": "onfullscreenerror",
					"type": "Event",
					"parent": "Element"
				},
				"outerHTML": {
					"name": "outerHTML",
					"type": "string",
					"parent": "Element"
				},
				"ownerDocument": {
					"name": "ownerDocument",
					"type": "unknown",
					"description": "Returns the node document. Returns null for documents.",
					"parent": "Element"
				},
				"part": {
					"name": "part",
					"type": "unknown",
					"parent": "Element"
				},
				"prefix": {
					"name": "prefix",
					"type": "string",
					"description": "Returns the namespace prefix.",
					"parent": "Element"
				},
				"scrollHeight": {
					"name": "scrollHeight",
					"type": "number",
					"parent": "Element"
				},
				"scrollLeft": {
					"name": "scrollLeft",
					"type": "number",
					"parent": "Element"
				},
				"scrollTop": {
					"name": "scrollTop",
					"type": "number",
					"parent": "Element"
				},
				"scrollWidth": {
					"name": "scrollWidth",
					"type": "number",
					"parent": "Element"
				},
				"shadowRoot": {
					"name": "shadowRoot",
					"type": "unknown",
					"description": "Returns elements shadow root, if any, and if shadow roots mode is open, and null otherwise.",
					"parent": "Element"
				},
				"slot": {
					"name": "slot",
					"type": "string",
					"description": "Returns the value of elements slot content attribute. Can be set to change it.",
					"parent": "Element"
				},
				"tagName": {
					"name": "tagName",
					"type": "string",
					"description": "Returns the HTML-uppercased qualified name.",
					"parent": "Element"
				},
				"attachShadow": {
					"name": "attachShadow",
					"type": "Event",
					"description": "Creates a shadow root for element and returns it.",
					"parent": "Element"
				},
				"closest": {
					"name": "closest",
					"type": "unknown",
					"description": "Returns the first (starting at element) inclusive ancestor that matches selectors, and null otherwise.",
					"parent": "Element"
				},
				"getAttribute": {
					"name": "getAttribute",
					"type": "Event",
					"description": "Returns elements first attribute whose qualified name is qualifiedName, and null if there is no such attribute otherwise.",
					"parent": "Element"
				},
				"getAttributeNS": {
					"name": "getAttributeNS",
					"type": "Event",
					"description": "Returns elements attribute whose namespace is namespace and local name is localName, and null if there is no such attribute otherwise.",
					"parent": "Element"
				},
				"getAttributeNames": {
					"name": "getAttributeNames",
					"type": "Event",
					"description": "Returns the qualified names of all elements attributes. Can contain duplicates.",
					"parent": "Element"
				},
				"getAttributeNode": {
					"name": "getAttributeNode",
					"type": "Event",
					"parent": "Element"
				},
				"getAttributeNodeNS": {
					"name": "getAttributeNodeNS",
					"type": "Event",
					"parent": "Element"
				},
				"getBoundingClientRect": {
					"name": "getBoundingClientRect",
					"type": "Event",
					"parent": "Element"
				},
				"getClientRects": {
					"name": "getClientRects",
					"type": "Event",
					"parent": "Element"
				},
				"getElementsByClassName": {
					"name": "getElementsByClassName",
					"type": "Event",
					"description": "Returns a HTMLCollection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. The classNames argument is interpreted as a space-separated list of classes.",
					"parent": "Element"
				},
				"getElementsByTagName": {
					"name": "getElementsByTagName",
					"type": "unknown",
					"parent": "Element"
				},
				"getElementsByTagNameNS": {
					"name": "getElementsByTagNameNS",
					"type": "unknown",
					"parent": "Element"
				},
				"hasAttribute": {
					"name": "hasAttribute",
					"type": "Event",
					"description": "Returns true if element has an attribute whose qualified name is qualifiedName, and false otherwise.",
					"parent": "Element"
				},
				"hasAttributeNS": {
					"name": "hasAttributeNS",
					"type": "Event",
					"description": "Returns true if element has an attribute whose namespace is namespace and local name is localName.",
					"parent": "Element"
				},
				"hasAttributes": {
					"name": "hasAttributes",
					"type": "Event",
					"description": "Returns true if element has attributes, and false otherwise.",
					"parent": "Element"
				},
				"hasPointerCapture": {
					"name": "hasPointerCapture",
					"type": "Event",
					"parent": "Element"
				},
				"insertAdjacentElement": {
					"name": "insertAdjacentElement",
					"type": "Event",
					"parent": "Element"
				},
				"insertAdjacentHTML": {
					"name": "insertAdjacentHTML",
					"type": "Event",
					"parent": "Element"
				},
				"insertAdjacentText": {
					"name": "insertAdjacentText",
					"type": "Event",
					"parent": "Element"
				},
				"matches": {
					"name": "matches",
					"type": "Event",
					"description": "Returns true if matching selectors against elements root yields element, and false otherwise.",
					"parent": "Element"
				},
				"releasePointerCapture": {
					"name": "releasePointerCapture",
					"type": "Event",
					"parent": "Element"
				},
				"removeAttribute": {
					"name": "removeAttribute",
					"type": "Event",
					"description": "Removes elements first attribute whose qualified name is qualifiedName.",
					"parent": "Element"
				},
				"removeAttributeNS": {
					"name": "removeAttributeNS",
					"type": "Event",
					"description": "Removes elements attribute whose namespace is namespace and local name is localName.",
					"parent": "Element"
				},
				"removeAttributeNode": {
					"name": "removeAttributeNode",
					"type": "Event",
					"parent": "Element"
				},
				"requestFullscreen": {
					"name": "requestFullscreen",
					"type": "Event",
					"description": "Displays element fullscreen and resolves promise when done.  When supplied, optionss navigationUI member indicates whether showing navigation UI while in fullscreen is preferred or not. If set to show, navigation simplicity is preferred over screen space, and if set to hide, more screen space is preferred. User agents are always free to honor user preference over the applications. The default value auto indicates no application preference.",
					"parent": "Element"
				},
				"requestPointerLock": {
					"name": "requestPointerLock",
					"type": "Event",
					"parent": "Element"
				},
				"scroll": {
					"name": "scroll",
					"type": "unknown",
					"parent": "Element"
				},
				"scrollBy": {
					"name": "scrollBy",
					"type": "unknown",
					"parent": "Element"
				},
				"scrollIntoView": {
					"name": "scrollIntoView",
					"type": "Event",
					"parent": "Element"
				},
				"scrollTo": {
					"name": "scrollTo",
					"type": "unknown",
					"parent": "Element"
				},
				"setAttribute": {
					"name": "setAttribute",
					"type": "Event",
					"description": "Sets the value of elements first attribute whose qualified name is qualifiedName to value.",
					"parent": "Element"
				},
				"setAttributeNS": {
					"name": "setAttributeNS",
					"type": "Event",
					"description": "Sets the value of elements attribute whose namespace is namespace and local name is localName to value.",
					"parent": "Element"
				},
				"setAttributeNode": {
					"name": "setAttributeNode",
					"type": "Event",
					"parent": "Element"
				},
				"setAttributeNodeNS": {
					"name": "setAttributeNodeNS",
					"type": "Event",
					"parent": "Element"
				},
				"setPointerCapture": {
					"name": "setPointerCapture",
					"type": "Event",
					"parent": "Element"
				},
				"toggleAttribute": {
					"name": "toggleAttribute",
					"type": "Event",
					"description": "If force is not given, toggles qualifiedName, removing it if it is present and adding it if it is not present. If force is true, adds qualifiedName. If force is false, removes qualifiedName.  Returns true if qualifiedName is now present, and false otherwise.",
					"parent": "Element"
				},
				"webkitMatchesSelector": {
					"name": "webkitMatchesSelector",
					"type": "Event",
					"parent": "Element",
					"description": "This is a legacy alias of `matches`."
				},
				"addEventListener": {
					"name": "addEventListener",
					"type": "Event",
					"description": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.  The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as optionss capture.  When set to true, optionss capture prevents callback from being invoked when the events eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when events eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if events eventPhase attribute value is AT_TARGET.  When set to true, optionss passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.  When set to true, optionss once indicates that the callback will only be invoked once after which the event listener will be removed.  If an AbortSignal is passed for optionss signal, then the event listener will be removed when signal is aborted.  The event listener is appended to targets event listener list and is not appended if it has the same type, callback, and capture.",
					"parent": "Element"
				},
				"removeEventListener": {
					"name": "removeEventListener",
					"type": "Event",
					"description": "Removes the event listener in targets event listener list with the same type, callback, and options.",
					"parent": "Element"
				},
				"baseURI": {
					"name": "baseURI",
					"type": "string",
					"description": "Returns nodes node documents document base URL.",
					"parent": "Node"
				},
				"childNodes": {
					"name": "childNodes",
					"type": "unknown",
					"description": "Returns the children.",
					"parent": "Node"
				},
				"firstChild": {
					"name": "firstChild",
					"type": "unknown",
					"description": "Returns the first child.",
					"parent": "Node"
				},
				"isConnected": {
					"name": "isConnected",
					"type": "boolean",
					"description": "Returns true if node is connected and false otherwise.",
					"parent": "Node"
				},
				"lastChild": {
					"name": "lastChild",
					"type": "unknown",
					"description": "Returns the last child.",
					"parent": "Node"
				},
				"nextSibling": {
					"name": "nextSibling",
					"type": "unknown",
					"description": "Returns the next sibling.",
					"parent": "Node"
				},
				"nodeName": {
					"name": "nodeName",
					"type": "string",
					"description": "Returns a string appropriate for the type of node.",
					"parent": "Node"
				},
				"nodeType": {
					"name": "nodeType",
					"type": "number",
					"description": "Returns the type of node.",
					"parent": "Node"
				},
				"nodeValue": {
					"name": "nodeValue",
					"type": "string",
					"parent": "Node"
				},
				"parentElement": {
					"name": "parentElement",
					"type": "Node",
					"description": "Returns the parent element.",
					"parent": "Node"
				},
				"parentNode": {
					"name": "parentNode",
					"type": "unknown",
					"description": "Returns the parent.",
					"parent": "Node"
				},
				"previousSibling": {
					"name": "previousSibling",
					"type": "unknown",
					"description": "Returns the previous sibling.",
					"parent": "Node"
				},
				"textContent": {
					"name": "textContent",
					"type": "string",
					"parent": "Node"
				},
				"appendChild": {
					"name": "appendChild",
					"type": "Event",
					"parent": "Node"
				},
				"cloneNode": {
					"name": "cloneNode",
					"type": "Event",
					"description": "Returns a copy of node. If deep is true, the copy also includes the nodes descendants.",
					"parent": "Node"
				},
				"compareDocumentPosition": {
					"name": "compareDocumentPosition",
					"type": "Event",
					"description": "Returns a bitmask indicating the position of other relative to node.",
					"parent": "Node"
				},
				"contains": {
					"name": "contains",
					"type": "Event",
					"description": "Returns true if other is an inclusive descendant of node, and false otherwise.",
					"parent": "Node"
				},
				"getRootNode": {
					"name": "getRootNode",
					"type": "Event",
					"description": "Returns nodes root.",
					"parent": "Node"
				},
				"hasChildNodes": {
					"name": "hasChildNodes",
					"type": "Event",
					"description": "Returns whether node has children.",
					"parent": "Node"
				},
				"insertBefore": {
					"name": "insertBefore",
					"type": "Event",
					"parent": "Node"
				},
				"isDefaultNamespace": {
					"name": "isDefaultNamespace",
					"type": "Event",
					"parent": "Node"
				},
				"isEqualNode": {
					"name": "isEqualNode",
					"type": "Event",
					"description": "Returns whether node and otherNode have the same properties.",
					"parent": "Node"
				},
				"isSameNode": {
					"name": "isSameNode",
					"type": "Event",
					"parent": "Node"
				},
				"lookupNamespaceURI": {
					"name": "lookupNamespaceURI",
					"type": "Event",
					"parent": "Node"
				},
				"lookupPrefix": {
					"name": "lookupPrefix",
					"type": "Event",
					"parent": "Node"
				},
				"normalize": {
					"name": "normalize",
					"type": "Event",
					"description": "Removes empty exclusive Text nodes and concatenates the data of remaining contiguous exclusive Text nodes into the first of their nodes.",
					"parent": "Node"
				},
				"removeChild": {
					"name": "removeChild",
					"type": "Event",
					"parent": "Node"
				},
				"replaceChild": {
					"name": "replaceChild",
					"type": "Event",
					"parent": "Node"
				},
				"ATTRIBUTE_NODE": {
					"name": "ATTRIBUTE_NODE",
					"type": "number",
					"parent": "Node"
				},
				"CDATA_SECTION_NODE": {
					"name": "CDATA_SECTION_NODE",
					"type": "number",
					"description": "node is a CDATASection node.",
					"parent": "Node"
				},
				"COMMENT_NODE": {
					"name": "COMMENT_NODE",
					"type": "number",
					"description": "node is a Comment node.",
					"parent": "Node"
				},
				"DOCUMENT_FRAGMENT_NODE": {
					"name": "DOCUMENT_FRAGMENT_NODE",
					"type": "number",
					"description": "node is a DocumentFragment node.",
					"parent": "Node"
				},
				"DOCUMENT_NODE": {
					"name": "DOCUMENT_NODE",
					"type": "number",
					"description": "node is a document.",
					"parent": "Node"
				},
				"DOCUMENT_POSITION_CONTAINED_BY": {
					"name": "DOCUMENT_POSITION_CONTAINED_BY",
					"type": "number",
					"description": "Set when other is a descendant of node.",
					"parent": "Node"
				},
				"DOCUMENT_POSITION_CONTAINS": {
					"name": "DOCUMENT_POSITION_CONTAINS",
					"type": "number",
					"description": "Set when other is an ancestor of node.",
					"parent": "Node"
				},
				"DOCUMENT_POSITION_DISCONNECTED": {
					"name": "DOCUMENT_POSITION_DISCONNECTED",
					"type": "number",
					"description": "Set when node and other are not in the same tree.",
					"parent": "Node"
				},
				"DOCUMENT_POSITION_FOLLOWING": {
					"name": "DOCUMENT_POSITION_FOLLOWING",
					"type": "number",
					"description": "Set when other is following node.",
					"parent": "Node"
				},
				"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
					"name": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
					"type": "number",
					"parent": "Node"
				},
				"DOCUMENT_POSITION_PRECEDING": {
					"name": "DOCUMENT_POSITION_PRECEDING",
					"type": "number",
					"description": "Set when other is preceding node.",
					"parent": "Node"
				},
				"DOCUMENT_TYPE_NODE": {
					"name": "DOCUMENT_TYPE_NODE",
					"type": "number",
					"description": "node is a doctype.",
					"parent": "Node"
				},
				"ELEMENT_NODE": {
					"name": "ELEMENT_NODE",
					"type": "number",
					"description": "node is an element.",
					"parent": "Node"
				},
				"ENTITY_NODE": {
					"name": "ENTITY_NODE",
					"type": "number",
					"parent": "Node"
				},
				"ENTITY_REFERENCE_NODE": {
					"name": "ENTITY_REFERENCE_NODE",
					"type": "number",
					"parent": "Node"
				},
				"NOTATION_NODE": {
					"name": "NOTATION_NODE",
					"type": "number",
					"parent": "Node"
				},
				"PROCESSING_INSTRUCTION_NODE": {
					"name": "PROCESSING_INSTRUCTION_NODE",
					"type": "number",
					"description": "node is a ProcessingInstruction node.",
					"parent": "Node"
				},
				"TEXT_NODE": {
					"name": "TEXT_NODE",
					"type": "number",
					"description": "node is a Text node.",
					"parent": "Node"
				},
				"dispatchEvent": {
					"name": "dispatchEvent",
					"type": "Event",
					"description": "Dispatches a synthetic event event to target and returns true if either events cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.",
					"parent": "EventTarget"
				},
				"ariaAtomic": {
					"name": "ariaAtomic",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaAutoComplete": {
					"name": "ariaAutoComplete",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaBusy": {
					"name": "ariaBusy",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaChecked": {
					"name": "ariaChecked",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaColCount": {
					"name": "ariaColCount",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaColIndex": {
					"name": "ariaColIndex",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaColSpan": {
					"name": "ariaColSpan",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaCurrent": {
					"name": "ariaCurrent",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaDisabled": {
					"name": "ariaDisabled",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaExpanded": {
					"name": "ariaExpanded",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaHasPopup": {
					"name": "ariaHasPopup",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaHidden": {
					"name": "ariaHidden",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaKeyShortcuts": {
					"name": "ariaKeyShortcuts",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaLabel": {
					"name": "ariaLabel",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaLevel": {
					"name": "ariaLevel",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaLive": {
					"name": "ariaLive",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaModal": {
					"name": "ariaModal",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaMultiLine": {
					"name": "ariaMultiLine",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaMultiSelectable": {
					"name": "ariaMultiSelectable",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaOrientation": {
					"name": "ariaOrientation",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaPlaceholder": {
					"name": "ariaPlaceholder",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaPosInSet": {
					"name": "ariaPosInSet",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaPressed": {
					"name": "ariaPressed",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaReadOnly": {
					"name": "ariaReadOnly",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaRequired": {
					"name": "ariaRequired",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaRoleDescription": {
					"name": "ariaRoleDescription",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaRowCount": {
					"name": "ariaRowCount",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaRowIndex": {
					"name": "ariaRowIndex",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaRowSpan": {
					"name": "ariaRowSpan",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaSelected": {
					"name": "ariaSelected",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaSetSize": {
					"name": "ariaSetSize",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaSort": {
					"name": "ariaSort",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaValueMax": {
					"name": "ariaValueMax",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaValueMin": {
					"name": "ariaValueMin",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaValueNow": {
					"name": "ariaValueNow",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaValueText": {
					"name": "ariaValueText",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"animate": {
					"name": "animate",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Animatable"
				},
				"getAnimations": {
					"name": "getAnimations",
					"type": "Event",
					"parent": "Animatable"
				},
				"after": {
					"name": "after",
					"type": "Event",
					"description": "Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.  Throws a HierarchyRequestError DOMException if the constraints of the node tree are violated.",
					"parent": "ChildNode"
				},
				"before": {
					"name": "before",
					"type": "Event",
					"description": "Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.  Throws a HierarchyRequestError DOMException if the constraints of the node tree are violated.",
					"parent": "ChildNode"
				},
				"remove": {
					"name": "remove",
					"type": "Event",
					"description": "Removes node.",
					"parent": "ChildNode"
				},
				"replaceWith": {
					"name": "replaceWith",
					"type": "Event",
					"description": "Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.  Throws a HierarchyRequestError DOMException if the constraints of the node tree are violated.",
					"parent": "ChildNode"
				},
				"innerHTML": {
					"name": "innerHTML",
					"type": "string",
					"parent": "InnerHTML"
				},
				"nextElementSibling": {
					"name": "nextElementSibling",
					"type": "Node",
					"description": "Returns the first following sibling that is an element, and null otherwise.",
					"parent": "NonDocumentTypeChildNode"
				},
				"previousElementSibling": {
					"name": "previousElementSibling",
					"type": "Node",
					"description": "Returns the first preceding sibling that is an element, and null otherwise.",
					"parent": "NonDocumentTypeChildNode"
				},
				"childElementCount": {
					"name": "childElementCount",
					"type": "number",
					"parent": "ParentNode"
				},
				"children": {
					"name": "children",
					"type": "unknown",
					"description": "Returns the child elements.",
					"parent": "ParentNode"
				},
				"firstElementChild": {
					"name": "firstElementChild",
					"type": "Node",
					"description": "Returns the first child that is an element, and null otherwise.",
					"parent": "ParentNode"
				},
				"lastElementChild": {
					"name": "lastElementChild",
					"type": "Node",
					"description": "Returns the last child that is an element, and null otherwise.",
					"parent": "ParentNode"
				},
				"append": {
					"name": "append",
					"type": "Event",
					"description": "Inserts nodes after the last child of node, while replacing strings in nodes with equivalent Text nodes.  Throws a HierarchyRequestError DOMException if the constraints of the node tree are violated.",
					"parent": "ParentNode"
				},
				"prepend": {
					"name": "prepend",
					"type": "Event",
					"description": "Inserts nodes before the first child of node, while replacing strings in nodes with equivalent Text nodes.  Throws a HierarchyRequestError DOMException if the constraints of the node tree are violated.",
					"parent": "ParentNode"
				},
				"querySelector": {
					"name": "querySelector",
					"type": "unknown",
					"description": "Returns the first element that is a descendant of node that matches selectors.",
					"parent": "ParentNode"
				},
				"querySelectorAll": {
					"name": "querySelectorAll",
					"type": "unknown",
					"description": "Returns all element descendants of node that match selectors.",
					"parent": "ParentNode"
				},
				"replaceChildren": {
					"name": "replaceChildren",
					"type": "Event",
					"description": "Replace all children of node with nodes, while replacing strings in nodes with equivalent Text nodes.  Throws a HierarchyRequestError DOMException if the constraints of the node tree are violated.",
					"parent": "ParentNode"
				},
				"assignedSlot": {
					"name": "assignedSlot",
					"type": "unknown",
					"parent": "Slottable"
				}
			},
			"relativePath": "src/services/transition/transition.ts"
		},
		"ElasticEui_getWaitDuration": {
			"id": "ElasticEui_getWaitDuration",
			"name": "GetWaitDuration",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "getWaitDuration",
				"lib": "elasticEui"
			},
			"required": [
				"length",
				"pop",
				"push",
				"concat",
				"join",
				"reverse",
				"shift",
				"slice",
				"sort",
				"splice",
				"unshift",
				"indexOf",
				"lastIndexOf",
				"every",
				"some",
				"forEach",
				"map",
				"filter",
				"reduce",
				"reduceRight",
				"find",
				"findIndex",
				"fill",
				"copyWithin",
				"entries",
				"keys",
				"values",
				"includes",
				"flatMap",
				"flat",
				"__@iterator@43",
				"__@unscopables@327"
			],
			"props": {
				"length": {
					"name": "length",
					"type": "number",
					"description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
					"parent": "Array"
				},
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of an array.",
					"parent": "Array"
				},
				"toLocaleString": {
					"name": "toLocaleString",
					"type": "Event",
					"description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
					"parent": "Array"
				},
				"pop": {
					"name": "pop",
					"type": "Event",
					"description": "Removes the last element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"push": {
					"name": "push",
					"type": "Event",
					"description": "Appends new elements to the end of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"concat": {
					"name": "concat",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Combines two or more arrays. This method returns a new array without modifying any existing arrays.",
					"parent": "Array"
				},
				"join": {
					"name": "join",
					"type": "Event",
					"description": "Adds all the elements of an array into a string, separated by the specified separator string.",
					"parent": "Array"
				},
				"reverse": {
					"name": "reverse",
					"type": "Event",
					"description": "Reverses the elements in an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"shift": {
					"name": "shift",
					"type": "Event",
					"description": "Removes the first element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a copy of a section of an array. For both start and end, a negative index can be used to indicate an offset from the end of the array. For example, -2 refers to the second to last element of the array.",
					"parent": "Array"
				},
				"sort": {
					"name": "sort",
					"type": "Event",
					"description": "Sorts an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"splice": {
					"name": "splice",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
					"parent": "Array"
				},
				"unshift": {
					"name": "unshift",
					"type": "Event",
					"description": "Inserts new elements at the start of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"every": {
					"name": "every",
					"type": "Event",
					"description": "Determines whether all the members of an array satisfy the specified test.",
					"parent": "Array"
				},
				"some": {
					"name": "some",
					"type": "Event",
					"description": "Determines whether the specified callback function returns true for any element of an array.",
					"parent": "Array"
				},
				"forEach": {
					"name": "forEach",
					"type": "Event",
					"description": "Performs the specified action for each element in an array.",
					"parent": "Array"
				},
				"map": {
					"name": "map",
					"type": "Event",
					"description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
					"parent": "Array"
				},
				"filter": {
					"name": "filter",
					"type": "Event",
					"description": "Returns the elements of an array that meet the condition specified in a callback function.",
					"parent": "Array"
				},
				"reduce": {
					"name": "reduce",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"reduceRight": {
					"name": "reduceRight",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"find": {
					"name": "find",
					"description": "Returns the value of the first element in the array where predicate is true, and undefined otherwise.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"findIndex": {
					"name": "findIndex",
					"type": "Event",
					"description": "Returns the index of the first element in the array where predicate is true, and -1 otherwise.",
					"parent": "Array"
				},
				"fill": {
					"name": "fill",
					"type": "Event",
					"description": "Changes all array elements from start to end index to a static value and returns the modified array",
					"parent": "Array"
				},
				"copyWithin": {
					"name": "copyWithin",
					"type": "Event",
					"description": "Returns the this object after copying a section of the array identified by start and end to the same array starting at position target",
					"parent": "Array"
				},
				"entries": {
					"name": "entries",
					"type": "Event",
					"description": "Returns an iterable of key, value pairs for every entry in the array",
					"parent": "Array"
				},
				"keys": {
					"name": "keys",
					"type": "Event",
					"description": "Returns an iterable of keys in the array",
					"parent": "Array"
				},
				"values": {
					"name": "values",
					"type": "Event",
					"description": "Returns an iterable of values in the array",
					"parent": "Array"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Determines whether an array includes a certain element, returning true or false as appropriate.",
					"parent": "Array"
				},
				"flatMap": {
					"name": "flatMap",
					"description": "Calls a defined callback function on each element of an array. Then, flattens the result into a new array. This is identical to a map followed by flat with depth 1.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"flat": {
					"name": "flat",
					"type": "Event",
					"description": "Returns a new array with all sub-array elements concatenated into it recursively up to the specified depth.",
					"parent": "Array"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "Array"
				},
				"__@unscopables@327": {
					"name": "__@unscopables@327",
					"type": "Event",
					"description": "Returns an object whose properties have the value true when they will be absent when used in a with statement.",
					"parent": "Array"
				}
			},
			"relativePath": "src/services/transition/transition.ts"
		},
		"ElasticEui_performOnFrame": {
			"id": "ElasticEui_performOnFrame",
			"name": "PerformOnFrame",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "performOnFrame",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/transition/transition.ts"
		},
		"ElasticEui_EuiWindowEvent": {
			"id": "ElasticEui_EuiWindowEvent",
			"name": "EuiWindowEvent",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiWindowEvent",
				"lib": "elasticEui"
			},
			"required": [
				"event",
				"handler"
			],
			"props": {
				"event": {
					"name": "event",
					"type": "string",
					"enum": [
						"submit",
						"reset",
						"offline",
						"online",
						"pause",
						"play",
						"storage",
						"input",
						"progress",
						"select",
						"scroll",
						"drag",
						"invalid",
						"error",
						"resize",
						"message",
						"abort",
						"animationcancel",
						"animationend",
						"animationiteration",
						"animationstart",
						"auxclick",
						"beforeinput",
						"blur",
						"canplay",
						"canplaythrough",
						"change",
						"click",
						"close",
						"compositionend",
						"compositionstart",
						"compositionupdate",
						"contextmenu",
						"cuechange",
						"dblclick",
						"dragend",
						"dragenter",
						"dragleave",
						"dragover",
						"dragstart",
						"drop",
						"durationchange",
						"emptied",
						"ended",
						"focus",
						"focusin",
						"focusout",
						"formdata",
						"gotpointercapture",
						"keydown",
						"keypress",
						"keyup",
						"load",
						"loadeddata",
						"loadedmetadata",
						"loadstart",
						"lostpointercapture",
						"mousedown",
						"mouseenter",
						"mouseleave",
						"mousemove",
						"mouseout",
						"mouseover",
						"mouseup",
						"playing",
						"pointercancel",
						"pointerdown",
						"pointerenter",
						"pointerleave",
						"pointermove",
						"pointerout",
						"pointerover",
						"pointerup",
						"ratechange",
						"securitypolicyviolation",
						"seeked",
						"seeking",
						"selectionchange",
						"selectstart",
						"stalled",
						"suspend",
						"timeupdate",
						"toggle",
						"touchcancel",
						"touchend",
						"touchmove",
						"touchstart",
						"transitioncancel",
						"transitionend",
						"transitionrun",
						"transitionstart",
						"volumechange",
						"waiting",
						"webkitanimationend",
						"webkitanimationiteration",
						"webkitanimationstart",
						"webkittransitionend",
						"wheel",
						"devicemotion",
						"deviceorientation",
						"gamepadconnected",
						"gamepaddisconnected",
						"orientationchange",
						"afterprint",
						"beforeprint",
						"beforeunload",
						"hashchange",
						"languagechange",
						"messageerror",
						"pagehide",
						"pageshow",
						"popstate",
						"rejectionhandled",
						"unhandledrejection",
						"unload"
					],
					"parent": "Props"
				},
				"handler": {
					"name": "handler",
					"type": "Event",
					"parent": "Props"
				}
			},
			"relativePath": "src/services/window_event/window_event.ts"
		},
		"ElasticEui_throttle": {
			"id": "ElasticEui_throttle",
			"name": "Throttle",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "throttle",
				"lib": "elasticEui"
			},
			"required": [
				"apply",
				"call",
				"bind",
				"prototype",
				"length",
				"arguments",
				"caller",
				"name",
				"__@hasInstance@2072"
			],
			"props": {
				"apply": {
					"name": "apply",
					"type": "Event",
					"description": "Calls the function with the specified object as the this value and the elements of specified array as the arguments.",
					"parent": "CallableFunction"
				},
				"call": {
					"name": "call",
					"type": "Event",
					"description": "Calls the function with the specified object as the this value and the specified rest arguments as the arguments.",
					"parent": "CallableFunction"
				},
				"bind": {
					"name": "bind",
					"type": "Event",
					"description": "For a given function, creates a bound function that has the same body as the original function. The this object of the bound function is associated with the specified object, and has the specified initial parameters.",
					"parent": "CallableFunction"
				},
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of a function.",
					"parent": "Function"
				},
				"prototype": {
					"name": "prototype",
					"type": "unknown",
					"parent": "Function"
				},
				"length": {
					"name": "length",
					"type": "number",
					"parent": "Function"
				},
				"arguments": {
					"name": "arguments",
					"type": "unknown",
					"parent": "Function"
				},
				"caller": {
					"name": "caller",
					"type": "Event",
					"parent": "Function"
				},
				"name": {
					"name": "name",
					"type": "string",
					"description": "Returns the name of the function. Function names are read-only and can not be changed.",
					"parent": "Function"
				},
				"__@hasInstance@2072": {
					"name": "__@hasInstance@2072",
					"type": "Event",
					"description": "Determines whether the given value inherits from this function if this function was used as a constructor function.  A constructor function can control which objects are recognized as its instances by instanceof by overriding this method.",
					"parent": "Function"
				}
			},
			"relativePath": "src/services/throttle.ts"
		},
		"ElasticEui_warnOnce": {
			"id": "ElasticEui_warnOnce",
			"name": "WarnOnce",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "warnOnce",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/console/warn_once.ts"
		},
		"ElasticEui_findElementBySelectorOrRef": {
			"id": "ElasticEui_findElementBySelectorOrRef",
			"name": "FindElementBySelectorOrRef",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "findElementBySelectorOrRef",
				"lib": "elasticEui"
			},
			"required": [
				"charAt",
				"charCodeAt",
				"concat",
				"indexOf",
				"lastIndexOf",
				"localeCompare",
				"match",
				"replace",
				"search",
				"slice",
				"split",
				"substring",
				"toLowerCase",
				"toLocaleLowerCase",
				"toUpperCase",
				"toLocaleUpperCase",
				"trim",
				"length",
				"substr",
				"codePointAt",
				"includes",
				"endsWith",
				"normalize",
				"repeat",
				"startsWith",
				"anchor",
				"big",
				"blink",
				"bold",
				"fixed",
				"fontcolor",
				"fontsize",
				"italics",
				"link",
				"small",
				"strike",
				"sub",
				"sup",
				"padStart",
				"padEnd",
				"trimEnd",
				"trimStart",
				"trimLeft",
				"trimRight",
				"matchAll",
				"replaceAll",
				"__@iterator@43",
				"accessKey",
				"accessKeyLabel",
				"autocapitalize",
				"dir",
				"draggable",
				"hidden",
				"innerText",
				"lang",
				"offsetHeight",
				"offsetLeft",
				"offsetParent",
				"offsetTop",
				"offsetWidth",
				"outerText",
				"spellcheck",
				"title",
				"translate",
				"attachInternals",
				"click",
				"addEventListener",
				"removeEventListener",
				"attributes",
				"classList",
				"className",
				"clientHeight",
				"clientLeft",
				"clientTop",
				"clientWidth",
				"id",
				"localName",
				"namespaceURI",
				"onfullscreenchange",
				"onfullscreenerror",
				"outerHTML",
				"ownerDocument",
				"part",
				"prefix",
				"scrollHeight",
				"scrollLeft",
				"scrollTop",
				"scrollWidth",
				"shadowRoot",
				"slot",
				"tagName",
				"attachShadow",
				"closest",
				"getAttribute",
				"getAttributeNS",
				"getAttributeNames",
				"getAttributeNode",
				"getAttributeNodeNS",
				"getBoundingClientRect",
				"getClientRects",
				"getElementsByClassName",
				"getElementsByTagName",
				"getElementsByTagNameNS",
				"hasAttribute",
				"hasAttributeNS",
				"hasAttributes",
				"hasPointerCapture",
				"insertAdjacentElement",
				"insertAdjacentHTML",
				"insertAdjacentText",
				"matches",
				"releasePointerCapture",
				"removeAttribute",
				"removeAttributeNS",
				"removeAttributeNode",
				"requestFullscreen",
				"requestPointerLock",
				"scroll",
				"scrollBy",
				"scrollIntoView",
				"scrollTo",
				"setAttribute",
				"setAttributeNS",
				"setAttributeNode",
				"setAttributeNodeNS",
				"setPointerCapture",
				"toggleAttribute",
				"webkitMatchesSelector",
				"baseURI",
				"childNodes",
				"firstChild",
				"isConnected",
				"lastChild",
				"nextSibling",
				"nodeName",
				"nodeType",
				"nodeValue",
				"parentElement",
				"parentNode",
				"previousSibling",
				"textContent",
				"appendChild",
				"cloneNode",
				"compareDocumentPosition",
				"contains",
				"getRootNode",
				"hasChildNodes",
				"insertBefore",
				"isDefaultNamespace",
				"isEqualNode",
				"isSameNode",
				"lookupNamespaceURI",
				"lookupPrefix",
				"removeChild",
				"replaceChild",
				"ATTRIBUTE_NODE",
				"CDATA_SECTION_NODE",
				"COMMENT_NODE",
				"DOCUMENT_FRAGMENT_NODE",
				"DOCUMENT_NODE",
				"DOCUMENT_POSITION_CONTAINED_BY",
				"DOCUMENT_POSITION_CONTAINS",
				"DOCUMENT_POSITION_DISCONNECTED",
				"DOCUMENT_POSITION_FOLLOWING",
				"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
				"DOCUMENT_POSITION_PRECEDING",
				"DOCUMENT_TYPE_NODE",
				"ELEMENT_NODE",
				"ENTITY_NODE",
				"ENTITY_REFERENCE_NODE",
				"NOTATION_NODE",
				"PROCESSING_INSTRUCTION_NODE",
				"TEXT_NODE",
				"dispatchEvent",
				"ariaAtomic",
				"ariaAutoComplete",
				"ariaBusy",
				"ariaChecked",
				"ariaColCount",
				"ariaColIndex",
				"ariaColSpan",
				"ariaCurrent",
				"ariaDisabled",
				"ariaExpanded",
				"ariaHasPopup",
				"ariaHidden",
				"ariaKeyShortcuts",
				"ariaLabel",
				"ariaLevel",
				"ariaLive",
				"ariaModal",
				"ariaMultiLine",
				"ariaMultiSelectable",
				"ariaOrientation",
				"ariaPlaceholder",
				"ariaPosInSet",
				"ariaPressed",
				"ariaReadOnly",
				"ariaRequired",
				"ariaRoleDescription",
				"ariaRowCount",
				"ariaRowIndex",
				"ariaRowSpan",
				"ariaSelected",
				"ariaSetSize",
				"ariaSort",
				"ariaValueMax",
				"ariaValueMin",
				"ariaValueNow",
				"ariaValueText",
				"animate",
				"getAnimations",
				"after",
				"before",
				"remove",
				"replaceWith",
				"innerHTML",
				"nextElementSibling",
				"previousElementSibling",
				"childElementCount",
				"children",
				"firstElementChild",
				"lastElementChild",
				"append",
				"prepend",
				"querySelector",
				"querySelectorAll",
				"replaceChildren",
				"assignedSlot",
				"oncopy",
				"oncut",
				"onpaste",
				"style",
				"contentEditable",
				"enterKeyHint",
				"inputMode",
				"isContentEditable",
				"onabort",
				"onanimationcancel",
				"onanimationend",
				"onanimationiteration",
				"onanimationstart",
				"onauxclick",
				"onblur",
				"oncanplay",
				"oncanplaythrough",
				"onchange",
				"onclick",
				"onclose",
				"oncontextmenu",
				"oncuechange",
				"ondblclick",
				"ondrag",
				"ondragend",
				"ondragenter",
				"ondragleave",
				"ondragover",
				"ondragstart",
				"ondrop",
				"ondurationchange",
				"onemptied",
				"onended",
				"onerror",
				"onfocus",
				"onformdata",
				"ongotpointercapture",
				"oninput",
				"oninvalid",
				"onkeydown",
				"onkeypress",
				"onkeyup",
				"onload",
				"onloadeddata",
				"onloadedmetadata",
				"onloadstart",
				"onlostpointercapture",
				"onmousedown",
				"onmouseenter",
				"onmouseleave",
				"onmousemove",
				"onmouseout",
				"onmouseover",
				"onmouseup",
				"onpause",
				"onplay",
				"onplaying",
				"onpointercancel",
				"onpointerdown",
				"onpointerenter",
				"onpointerleave",
				"onpointermove",
				"onpointerout",
				"onpointerover",
				"onpointerup",
				"onprogress",
				"onratechange",
				"onreset",
				"onresize",
				"onscroll",
				"onseeked",
				"onseeking",
				"onselect",
				"onselectionchange",
				"onselectstart",
				"onstalled",
				"onsubmit",
				"onsuspend",
				"ontimeupdate",
				"ontoggle",
				"ontransitioncancel",
				"ontransitionend",
				"ontransitionrun",
				"ontransitionstart",
				"onvolumechange",
				"onwaiting",
				"onwebkitanimationend",
				"onwebkitanimationiteration",
				"onwebkitanimationstart",
				"onwebkittransitionend",
				"onwheel",
				"autofocus",
				"dataset",
				"tabIndex",
				"blur",
				"focus",
				"apply",
				"call",
				"bind",
				"prototype",
				"arguments",
				"caller",
				"name",
				"__@hasInstance@2072"
			],
			"props": {
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of a string. Returns a string representation of an object. Returns a string representation of a function.",
					"parent": "String"
				},
				"charAt": {
					"name": "charAt",
					"type": "Event",
					"description": "Returns the character at the specified index.",
					"parent": "String"
				},
				"charCodeAt": {
					"name": "charCodeAt",
					"type": "Event",
					"description": "Returns the Unicode value of the character at the specified location.",
					"parent": "String"
				},
				"concat": {
					"name": "concat",
					"type": "Event",
					"description": "Returns a string that contains the concatenation of two or more strings.",
					"parent": "String"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the position of the first occurrence of a substring.",
					"parent": "String"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the last occurrence of a substring in the string.",
					"parent": "String"
				},
				"localeCompare": {
					"name": "localeCompare",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Determines whether two strings are equivalent in the current locale. Determines whether two strings are equivalent in the current or specified locale.",
					"parent": "String"
				},
				"match": {
					"name": "match",
					"type": "unknown",
					"description": "Matches a string with a regular expression, and returns an array containing the results of that search. Matches a string or an object that supports being matched against, and returns an array containing the results of that search, or null if no matches are found.",
					"parent": "String"
				},
				"replace": {
					"name": "replace",
					"description": "Replaces text in a string, using a regular expression or search string. Replaces first match with string or all matches with RegExp. Replaces text in a string, using an object that supports replacement within a string.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "String"
				},
				"search": {
					"name": "search",
					"type": "unknown",
					"description": "Finds the first substring match in a regular expression search.",
					"parent": "String"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a section of a string.",
					"parent": "String"
				},
				"split": {
					"name": "split",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Split a string into substrings using the specified separator and return them as an array.",
					"parent": "String"
				},
				"substring": {
					"name": "substring",
					"type": "Event",
					"description": "Returns the substring at the specified location within a String object.",
					"parent": "String"
				},
				"toLowerCase": {
					"name": "toLowerCase",
					"type": "Event",
					"description": "Converts all the alphabetic characters in a string to lowercase.",
					"parent": "String"
				},
				"toLocaleLowerCase": {
					"name": "toLocaleLowerCase",
					"description": "Converts all alphabetic characters to lowercase, taking into account the host environments current locale.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "String"
				},
				"toUpperCase": {
					"name": "toUpperCase",
					"type": "Event",
					"description": "Converts all the alphabetic characters in a string to uppercase.",
					"parent": "String"
				},
				"toLocaleUpperCase": {
					"name": "toLocaleUpperCase",
					"description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environments current locale.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "String"
				},
				"trim": {
					"name": "trim",
					"type": "Event",
					"description": "Removes the leading and trailing white space and line terminator characters from a string.",
					"parent": "String"
				},
				"length": {
					"name": "length",
					"type": "number",
					"description": "Returns the length of a String object.",
					"parent": "String"
				},
				"substr": {
					"name": "substr",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"valueOf": {
					"name": "valueOf",
					"type": "Event",
					"description": "Returns the primitive value of the specified object.",
					"parent": "String"
				},
				"codePointAt": {
					"name": "codePointAt",
					"type": "Event",
					"description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point value of the UTF-16 encoded code point starting at the string element at position pos in the String resulting from converting this object to a String. If there is no element at that position, the result is undefined. If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
					"parent": "String"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Returns true if searchString appears as a substring of the result of converting this object to a String, at one or more positions that are greater than or equal to position; otherwise, returns false.",
					"parent": "String"
				},
				"endsWith": {
					"name": "endsWith",
					"type": "Event",
					"description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at endPosition – length(this). Otherwise returns false.",
					"parent": "String"
				},
				"normalize": {
					"name": "normalize",
					"type": "Event",
					"description": "Returns the String value result of normalizing the string into the normalization form named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms. Removes empty exclusive Text nodes and concatenates the data of remaining contiguous exclusive Text nodes into the first of their nodes.",
					"parent": "String"
				},
				"repeat": {
					"name": "repeat",
					"type": "Event",
					"description": "Returns a String value that is made from count copies appended together. If count is 0, the empty string is returned.",
					"parent": "String"
				},
				"startsWith": {
					"name": "startsWith",
					"type": "Event",
					"description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at position. Otherwise returns false.",
					"parent": "String"
				},
				"anchor": {
					"name": "anchor",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"big": {
					"name": "big",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"blink": {
					"name": "blink",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"bold": {
					"name": "bold",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fixed": {
					"name": "fixed",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fontcolor": {
					"name": "fontcolor",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fontsize": {
					"name": "fontsize",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"italics": {
					"name": "italics",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"link": {
					"name": "link",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"small": {
					"name": "small",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"strike": {
					"name": "strike",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"sub": {
					"name": "sub",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"sup": {
					"name": "sup",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"padStart": {
					"name": "padStart",
					"type": "Event",
					"description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the start (left) of the current string.",
					"parent": "String"
				},
				"padEnd": {
					"name": "padEnd",
					"type": "Event",
					"description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string.",
					"parent": "String"
				},
				"trimEnd": {
					"name": "trimEnd",
					"type": "Event",
					"description": "Removes the trailing white space and line terminator characters from a string.",
					"parent": "String"
				},
				"trimStart": {
					"name": "trimStart",
					"type": "Event",
					"description": "Removes the leading white space and line terminator characters from a string.",
					"parent": "String"
				},
				"trimLeft": {
					"name": "trimLeft",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility. Use `trimStart` instead",
					"parent": "String"
				},
				"trimRight": {
					"name": "trimRight",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility. Use `trimEnd` instead",
					"parent": "String"
				},
				"matchAll": {
					"name": "matchAll",
					"type": "Event",
					"description": "Matches a string with a regular expression, and returns an iterable of matches containing the results of that search.",
					"parent": "String"
				},
				"replaceAll": {
					"name": "replaceAll",
					"description": "Replace all instances of a substring in a string, using a regular expression or search string.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "String"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "String"
				},
				"accessKey": {
					"name": "accessKey",
					"type": "string",
					"parent": "HTMLElement"
				},
				"accessKeyLabel": {
					"name": "accessKeyLabel",
					"type": "string",
					"parent": "HTMLElement"
				},
				"autocapitalize": {
					"name": "autocapitalize",
					"type": "string",
					"parent": "HTMLElement"
				},
				"dir": {
					"name": "dir",
					"type": "string",
					"parent": "HTMLElement"
				},
				"draggable": {
					"name": "draggable",
					"type": "boolean",
					"parent": "HTMLElement"
				},
				"hidden": {
					"name": "hidden",
					"type": "boolean",
					"parent": "HTMLElement"
				},
				"innerText": {
					"name": "innerText",
					"type": "string",
					"parent": "HTMLElement"
				},
				"lang": {
					"name": "lang",
					"type": "string",
					"parent": "HTMLElement"
				},
				"offsetHeight": {
					"name": "offsetHeight",
					"type": "number",
					"parent": "HTMLElement"
				},
				"offsetLeft": {
					"name": "offsetLeft",
					"type": "number",
					"parent": "HTMLElement"
				},
				"offsetParent": {
					"name": "offsetParent",
					"type": "Node",
					"parent": "HTMLElement"
				},
				"offsetTop": {
					"name": "offsetTop",
					"type": "number",
					"parent": "HTMLElement"
				},
				"offsetWidth": {
					"name": "offsetWidth",
					"type": "number",
					"parent": "HTMLElement"
				},
				"outerText": {
					"name": "outerText",
					"type": "string",
					"parent": "HTMLElement"
				},
				"spellcheck": {
					"name": "spellcheck",
					"type": "boolean",
					"parent": "HTMLElement"
				},
				"title": {
					"name": "title",
					"type": "string",
					"parent": "HTMLElement"
				},
				"translate": {
					"name": "translate",
					"type": "boolean",
					"parent": "HTMLElement"
				},
				"attachInternals": {
					"name": "attachInternals",
					"type": "Event",
					"parent": "HTMLElement"
				},
				"click": {
					"name": "click",
					"type": "Event",
					"parent": "HTMLElement"
				},
				"addEventListener": {
					"name": "addEventListener",
					"type": "Event",
					"description": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.  The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as optionss capture.  When set to true, optionss capture prevents callback from being invoked when the events eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when events eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if events eventPhase attribute value is AT_TARGET.  When set to true, optionss passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.  When set to true, optionss once indicates that the callback will only be invoked once after which the event listener will be removed.  If an AbortSignal is passed for optionss signal, then the event listener will be removed when signal is aborted.  The event listener is appended to targets event listener list and is not appended if it has the same type, callback, and capture.",
					"parent": "HTMLElement"
				},
				"removeEventListener": {
					"name": "removeEventListener",
					"type": "Event",
					"description": "Removes the event listener in targets event listener list with the same type, callback, and options.",
					"parent": "HTMLElement"
				},
				"attributes": {
					"name": "attributes",
					"type": "unknown",
					"parent": "Element"
				},
				"classList": {
					"name": "classList",
					"type": "unknown",
					"description": "Allows for manipulation of elements class content attribute as a set of whitespace-separated tokens through a DOMTokenList object.",
					"parent": "Element"
				},
				"className": {
					"name": "className",
					"type": "string",
					"description": "Returns the value of elements class content attribute. Can be set to change it.",
					"parent": "Element"
				},
				"clientHeight": {
					"name": "clientHeight",
					"type": "number",
					"parent": "Element"
				},
				"clientLeft": {
					"name": "clientLeft",
					"type": "number",
					"parent": "Element"
				},
				"clientTop": {
					"name": "clientTop",
					"type": "number",
					"parent": "Element"
				},
				"clientWidth": {
					"name": "clientWidth",
					"type": "number",
					"parent": "Element"
				},
				"id": {
					"name": "id",
					"type": "string",
					"description": "Returns the value of elements id content attribute. Can be set to change it.",
					"parent": "Element"
				},
				"localName": {
					"name": "localName",
					"type": "string",
					"description": "Returns the local name.",
					"parent": "Element"
				},
				"namespaceURI": {
					"name": "namespaceURI",
					"type": "string",
					"description": "Returns the namespace.",
					"parent": "Element"
				},
				"onfullscreenchange": {
					"name": "onfullscreenchange",
					"type": "Event",
					"parent": "Element"
				},
				"onfullscreenerror": {
					"name": "onfullscreenerror",
					"type": "Event",
					"parent": "Element"
				},
				"outerHTML": {
					"name": "outerHTML",
					"type": "string",
					"parent": "Element"
				},
				"ownerDocument": {
					"name": "ownerDocument",
					"type": "unknown",
					"description": "Returns the node document. Returns null for documents.",
					"parent": "Element"
				},
				"part": {
					"name": "part",
					"type": "unknown",
					"parent": "Element"
				},
				"prefix": {
					"name": "prefix",
					"type": "string",
					"description": "Returns the namespace prefix.",
					"parent": "Element"
				},
				"scrollHeight": {
					"name": "scrollHeight",
					"type": "number",
					"parent": "Element"
				},
				"scrollLeft": {
					"name": "scrollLeft",
					"type": "number",
					"parent": "Element"
				},
				"scrollTop": {
					"name": "scrollTop",
					"type": "number",
					"parent": "Element"
				},
				"scrollWidth": {
					"name": "scrollWidth",
					"type": "number",
					"parent": "Element"
				},
				"shadowRoot": {
					"name": "shadowRoot",
					"type": "unknown",
					"description": "Returns elements shadow root, if any, and if shadow roots mode is open, and null otherwise.",
					"parent": "Element"
				},
				"slot": {
					"name": "slot",
					"type": "string",
					"description": "Returns the value of elements slot content attribute. Can be set to change it.",
					"parent": "Element"
				},
				"tagName": {
					"name": "tagName",
					"type": "string",
					"description": "Returns the HTML-uppercased qualified name.",
					"parent": "Element"
				},
				"attachShadow": {
					"name": "attachShadow",
					"type": "Event",
					"description": "Creates a shadow root for element and returns it.",
					"parent": "Element"
				},
				"closest": {
					"name": "closest",
					"type": "unknown",
					"description": "Returns the first (starting at element) inclusive ancestor that matches selectors, and null otherwise.",
					"parent": "Element"
				},
				"getAttribute": {
					"name": "getAttribute",
					"type": "Event",
					"description": "Returns elements first attribute whose qualified name is qualifiedName, and null if there is no such attribute otherwise.",
					"parent": "Element"
				},
				"getAttributeNS": {
					"name": "getAttributeNS",
					"type": "Event",
					"description": "Returns elements attribute whose namespace is namespace and local name is localName, and null if there is no such attribute otherwise.",
					"parent": "Element"
				},
				"getAttributeNames": {
					"name": "getAttributeNames",
					"type": "Event",
					"description": "Returns the qualified names of all elements attributes. Can contain duplicates.",
					"parent": "Element"
				},
				"getAttributeNode": {
					"name": "getAttributeNode",
					"type": "Event",
					"parent": "Element"
				},
				"getAttributeNodeNS": {
					"name": "getAttributeNodeNS",
					"type": "Event",
					"parent": "Element"
				},
				"getBoundingClientRect": {
					"name": "getBoundingClientRect",
					"type": "Event",
					"parent": "Element"
				},
				"getClientRects": {
					"name": "getClientRects",
					"type": "Event",
					"parent": "Element"
				},
				"getElementsByClassName": {
					"name": "getElementsByClassName",
					"type": "Event",
					"description": "Returns a HTMLCollection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. The classNames argument is interpreted as a space-separated list of classes.",
					"parent": "Element"
				},
				"getElementsByTagName": {
					"name": "getElementsByTagName",
					"type": "unknown",
					"parent": "Element"
				},
				"getElementsByTagNameNS": {
					"name": "getElementsByTagNameNS",
					"type": "unknown",
					"parent": "Element"
				},
				"hasAttribute": {
					"name": "hasAttribute",
					"type": "Event",
					"description": "Returns true if element has an attribute whose qualified name is qualifiedName, and false otherwise.",
					"parent": "Element"
				},
				"hasAttributeNS": {
					"name": "hasAttributeNS",
					"type": "Event",
					"description": "Returns true if element has an attribute whose namespace is namespace and local name is localName.",
					"parent": "Element"
				},
				"hasAttributes": {
					"name": "hasAttributes",
					"type": "Event",
					"description": "Returns true if element has attributes, and false otherwise.",
					"parent": "Element"
				},
				"hasPointerCapture": {
					"name": "hasPointerCapture",
					"type": "Event",
					"parent": "Element"
				},
				"insertAdjacentElement": {
					"name": "insertAdjacentElement",
					"type": "Event",
					"parent": "Element"
				},
				"insertAdjacentHTML": {
					"name": "insertAdjacentHTML",
					"type": "Event",
					"parent": "Element"
				},
				"insertAdjacentText": {
					"name": "insertAdjacentText",
					"type": "Event",
					"parent": "Element"
				},
				"matches": {
					"name": "matches",
					"type": "Event",
					"description": "Returns true if matching selectors against elements root yields element, and false otherwise.",
					"parent": "Element"
				},
				"releasePointerCapture": {
					"name": "releasePointerCapture",
					"type": "Event",
					"parent": "Element"
				},
				"removeAttribute": {
					"name": "removeAttribute",
					"type": "Event",
					"description": "Removes elements first attribute whose qualified name is qualifiedName.",
					"parent": "Element"
				},
				"removeAttributeNS": {
					"name": "removeAttributeNS",
					"type": "Event",
					"description": "Removes elements attribute whose namespace is namespace and local name is localName.",
					"parent": "Element"
				},
				"removeAttributeNode": {
					"name": "removeAttributeNode",
					"type": "Event",
					"parent": "Element"
				},
				"requestFullscreen": {
					"name": "requestFullscreen",
					"type": "Event",
					"description": "Displays element fullscreen and resolves promise when done.  When supplied, optionss navigationUI member indicates whether showing navigation UI while in fullscreen is preferred or not. If set to show, navigation simplicity is preferred over screen space, and if set to hide, more screen space is preferred. User agents are always free to honor user preference over the applications. The default value auto indicates no application preference.",
					"parent": "Element"
				},
				"requestPointerLock": {
					"name": "requestPointerLock",
					"type": "Event",
					"parent": "Element"
				},
				"scroll": {
					"name": "scroll",
					"type": "unknown",
					"parent": "Element"
				},
				"scrollBy": {
					"name": "scrollBy",
					"type": "unknown",
					"parent": "Element"
				},
				"scrollIntoView": {
					"name": "scrollIntoView",
					"type": "Event",
					"parent": "Element"
				},
				"scrollTo": {
					"name": "scrollTo",
					"type": "unknown",
					"parent": "Element"
				},
				"setAttribute": {
					"name": "setAttribute",
					"type": "Event",
					"description": "Sets the value of elements first attribute whose qualified name is qualifiedName to value.",
					"parent": "Element"
				},
				"setAttributeNS": {
					"name": "setAttributeNS",
					"type": "Event",
					"description": "Sets the value of elements attribute whose namespace is namespace and local name is localName to value.",
					"parent": "Element"
				},
				"setAttributeNode": {
					"name": "setAttributeNode",
					"type": "Event",
					"parent": "Element"
				},
				"setAttributeNodeNS": {
					"name": "setAttributeNodeNS",
					"type": "Event",
					"parent": "Element"
				},
				"setPointerCapture": {
					"name": "setPointerCapture",
					"type": "Event",
					"parent": "Element"
				},
				"toggleAttribute": {
					"name": "toggleAttribute",
					"type": "Event",
					"description": "If force is not given, toggles qualifiedName, removing it if it is present and adding it if it is not present. If force is true, adds qualifiedName. If force is false, removes qualifiedName.  Returns true if qualifiedName is now present, and false otherwise.",
					"parent": "Element"
				},
				"webkitMatchesSelector": {
					"name": "webkitMatchesSelector",
					"type": "Event",
					"parent": "Element",
					"description": "This is a legacy alias of `matches`."
				},
				"baseURI": {
					"name": "baseURI",
					"type": "string",
					"description": "Returns nodes node documents document base URL.",
					"parent": "Node"
				},
				"childNodes": {
					"name": "childNodes",
					"type": "unknown",
					"description": "Returns the children.",
					"parent": "Node"
				},
				"firstChild": {
					"name": "firstChild",
					"type": "unknown",
					"description": "Returns the first child.",
					"parent": "Node"
				},
				"isConnected": {
					"name": "isConnected",
					"type": "boolean",
					"description": "Returns true if node is connected and false otherwise.",
					"parent": "Node"
				},
				"lastChild": {
					"name": "lastChild",
					"type": "unknown",
					"description": "Returns the last child.",
					"parent": "Node"
				},
				"nextSibling": {
					"name": "nextSibling",
					"type": "unknown",
					"description": "Returns the next sibling.",
					"parent": "Node"
				},
				"nodeName": {
					"name": "nodeName",
					"type": "string",
					"description": "Returns a string appropriate for the type of node.",
					"parent": "Node"
				},
				"nodeType": {
					"name": "nodeType",
					"type": "number",
					"description": "Returns the type of node.",
					"parent": "Node"
				},
				"nodeValue": {
					"name": "nodeValue",
					"type": "string",
					"parent": "Node"
				},
				"parentElement": {
					"name": "parentElement",
					"type": "Node",
					"description": "Returns the parent element.",
					"parent": "Node"
				},
				"parentNode": {
					"name": "parentNode",
					"type": "unknown",
					"description": "Returns the parent.",
					"parent": "Node"
				},
				"previousSibling": {
					"name": "previousSibling",
					"type": "unknown",
					"description": "Returns the previous sibling.",
					"parent": "Node"
				},
				"textContent": {
					"name": "textContent",
					"type": "string",
					"parent": "Node"
				},
				"appendChild": {
					"name": "appendChild",
					"type": "Event",
					"parent": "Node"
				},
				"cloneNode": {
					"name": "cloneNode",
					"type": "Event",
					"description": "Returns a copy of node. If deep is true, the copy also includes the nodes descendants.",
					"parent": "Node"
				},
				"compareDocumentPosition": {
					"name": "compareDocumentPosition",
					"type": "Event",
					"description": "Returns a bitmask indicating the position of other relative to node.",
					"parent": "Node"
				},
				"contains": {
					"name": "contains",
					"type": "Event",
					"description": "Returns true if other is an inclusive descendant of node, and false otherwise.",
					"parent": "Node"
				},
				"getRootNode": {
					"name": "getRootNode",
					"type": "Event",
					"description": "Returns nodes root.",
					"parent": "Node"
				},
				"hasChildNodes": {
					"name": "hasChildNodes",
					"type": "Event",
					"description": "Returns whether node has children.",
					"parent": "Node"
				},
				"insertBefore": {
					"name": "insertBefore",
					"type": "Event",
					"parent": "Node"
				},
				"isDefaultNamespace": {
					"name": "isDefaultNamespace",
					"type": "Event",
					"parent": "Node"
				},
				"isEqualNode": {
					"name": "isEqualNode",
					"type": "Event",
					"description": "Returns whether node and otherNode have the same properties.",
					"parent": "Node"
				},
				"isSameNode": {
					"name": "isSameNode",
					"type": "Event",
					"parent": "Node"
				},
				"lookupNamespaceURI": {
					"name": "lookupNamespaceURI",
					"type": "Event",
					"parent": "Node"
				},
				"lookupPrefix": {
					"name": "lookupPrefix",
					"type": "Event",
					"parent": "Node"
				},
				"removeChild": {
					"name": "removeChild",
					"type": "Event",
					"parent": "Node"
				},
				"replaceChild": {
					"name": "replaceChild",
					"type": "Event",
					"parent": "Node"
				},
				"ATTRIBUTE_NODE": {
					"name": "ATTRIBUTE_NODE",
					"type": "number",
					"parent": "Node"
				},
				"CDATA_SECTION_NODE": {
					"name": "CDATA_SECTION_NODE",
					"type": "number",
					"description": "node is a CDATASection node.",
					"parent": "Node"
				},
				"COMMENT_NODE": {
					"name": "COMMENT_NODE",
					"type": "number",
					"description": "node is a Comment node.",
					"parent": "Node"
				},
				"DOCUMENT_FRAGMENT_NODE": {
					"name": "DOCUMENT_FRAGMENT_NODE",
					"type": "number",
					"description": "node is a DocumentFragment node.",
					"parent": "Node"
				},
				"DOCUMENT_NODE": {
					"name": "DOCUMENT_NODE",
					"type": "number",
					"description": "node is a document.",
					"parent": "Node"
				},
				"DOCUMENT_POSITION_CONTAINED_BY": {
					"name": "DOCUMENT_POSITION_CONTAINED_BY",
					"type": "number",
					"description": "Set when other is a descendant of node.",
					"parent": "Node"
				},
				"DOCUMENT_POSITION_CONTAINS": {
					"name": "DOCUMENT_POSITION_CONTAINS",
					"type": "number",
					"description": "Set when other is an ancestor of node.",
					"parent": "Node"
				},
				"DOCUMENT_POSITION_DISCONNECTED": {
					"name": "DOCUMENT_POSITION_DISCONNECTED",
					"type": "number",
					"description": "Set when node and other are not in the same tree.",
					"parent": "Node"
				},
				"DOCUMENT_POSITION_FOLLOWING": {
					"name": "DOCUMENT_POSITION_FOLLOWING",
					"type": "number",
					"description": "Set when other is following node.",
					"parent": "Node"
				},
				"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
					"name": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
					"type": "number",
					"parent": "Node"
				},
				"DOCUMENT_POSITION_PRECEDING": {
					"name": "DOCUMENT_POSITION_PRECEDING",
					"type": "number",
					"description": "Set when other is preceding node.",
					"parent": "Node"
				},
				"DOCUMENT_TYPE_NODE": {
					"name": "DOCUMENT_TYPE_NODE",
					"type": "number",
					"description": "node is a doctype.",
					"parent": "Node"
				},
				"ELEMENT_NODE": {
					"name": "ELEMENT_NODE",
					"type": "number",
					"description": "node is an element.",
					"parent": "Node"
				},
				"ENTITY_NODE": {
					"name": "ENTITY_NODE",
					"type": "number",
					"parent": "Node"
				},
				"ENTITY_REFERENCE_NODE": {
					"name": "ENTITY_REFERENCE_NODE",
					"type": "number",
					"parent": "Node"
				},
				"NOTATION_NODE": {
					"name": "NOTATION_NODE",
					"type": "number",
					"parent": "Node"
				},
				"PROCESSING_INSTRUCTION_NODE": {
					"name": "PROCESSING_INSTRUCTION_NODE",
					"type": "number",
					"description": "node is a ProcessingInstruction node.",
					"parent": "Node"
				},
				"TEXT_NODE": {
					"name": "TEXT_NODE",
					"type": "number",
					"description": "node is a Text node.",
					"parent": "Node"
				},
				"dispatchEvent": {
					"name": "dispatchEvent",
					"type": "Event",
					"description": "Dispatches a synthetic event event to target and returns true if either events cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.",
					"parent": "EventTarget"
				},
				"ariaAtomic": {
					"name": "ariaAtomic",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaAutoComplete": {
					"name": "ariaAutoComplete",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaBusy": {
					"name": "ariaBusy",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaChecked": {
					"name": "ariaChecked",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaColCount": {
					"name": "ariaColCount",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaColIndex": {
					"name": "ariaColIndex",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaColSpan": {
					"name": "ariaColSpan",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaCurrent": {
					"name": "ariaCurrent",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaDisabled": {
					"name": "ariaDisabled",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaExpanded": {
					"name": "ariaExpanded",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaHasPopup": {
					"name": "ariaHasPopup",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaHidden": {
					"name": "ariaHidden",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaKeyShortcuts": {
					"name": "ariaKeyShortcuts",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaLabel": {
					"name": "ariaLabel",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaLevel": {
					"name": "ariaLevel",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaLive": {
					"name": "ariaLive",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaModal": {
					"name": "ariaModal",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaMultiLine": {
					"name": "ariaMultiLine",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaMultiSelectable": {
					"name": "ariaMultiSelectable",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaOrientation": {
					"name": "ariaOrientation",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaPlaceholder": {
					"name": "ariaPlaceholder",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaPosInSet": {
					"name": "ariaPosInSet",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaPressed": {
					"name": "ariaPressed",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaReadOnly": {
					"name": "ariaReadOnly",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaRequired": {
					"name": "ariaRequired",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaRoleDescription": {
					"name": "ariaRoleDescription",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaRowCount": {
					"name": "ariaRowCount",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaRowIndex": {
					"name": "ariaRowIndex",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaRowSpan": {
					"name": "ariaRowSpan",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaSelected": {
					"name": "ariaSelected",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaSetSize": {
					"name": "ariaSetSize",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaSort": {
					"name": "ariaSort",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaValueMax": {
					"name": "ariaValueMax",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaValueMin": {
					"name": "ariaValueMin",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaValueNow": {
					"name": "ariaValueNow",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"ariaValueText": {
					"name": "ariaValueText",
					"type": "string",
					"parent": "ARIAMixin"
				},
				"animate": {
					"name": "animate",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Animatable"
				},
				"getAnimations": {
					"name": "getAnimations",
					"type": "Event",
					"parent": "Animatable"
				},
				"after": {
					"name": "after",
					"type": "Event",
					"description": "Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.  Throws a HierarchyRequestError DOMException if the constraints of the node tree are violated.",
					"parent": "ChildNode"
				},
				"before": {
					"name": "before",
					"type": "Event",
					"description": "Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.  Throws a HierarchyRequestError DOMException if the constraints of the node tree are violated.",
					"parent": "ChildNode"
				},
				"remove": {
					"name": "remove",
					"type": "Event",
					"description": "Removes node.",
					"parent": "ChildNode"
				},
				"replaceWith": {
					"name": "replaceWith",
					"type": "Event",
					"description": "Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.  Throws a HierarchyRequestError DOMException if the constraints of the node tree are violated.",
					"parent": "ChildNode"
				},
				"innerHTML": {
					"name": "innerHTML",
					"type": "string",
					"parent": "InnerHTML"
				},
				"nextElementSibling": {
					"name": "nextElementSibling",
					"type": "Node",
					"description": "Returns the first following sibling that is an element, and null otherwise.",
					"parent": "NonDocumentTypeChildNode"
				},
				"previousElementSibling": {
					"name": "previousElementSibling",
					"type": "Node",
					"description": "Returns the first preceding sibling that is an element, and null otherwise.",
					"parent": "NonDocumentTypeChildNode"
				},
				"childElementCount": {
					"name": "childElementCount",
					"type": "number",
					"parent": "ParentNode"
				},
				"children": {
					"name": "children",
					"type": "unknown",
					"description": "Returns the child elements.",
					"parent": "ParentNode"
				},
				"firstElementChild": {
					"name": "firstElementChild",
					"type": "Node",
					"description": "Returns the first child that is an element, and null otherwise.",
					"parent": "ParentNode"
				},
				"lastElementChild": {
					"name": "lastElementChild",
					"type": "Node",
					"description": "Returns the last child that is an element, and null otherwise.",
					"parent": "ParentNode"
				},
				"append": {
					"name": "append",
					"type": "Event",
					"description": "Inserts nodes after the last child of node, while replacing strings in nodes with equivalent Text nodes.  Throws a HierarchyRequestError DOMException if the constraints of the node tree are violated.",
					"parent": "ParentNode"
				},
				"prepend": {
					"name": "prepend",
					"type": "Event",
					"description": "Inserts nodes before the first child of node, while replacing strings in nodes with equivalent Text nodes.  Throws a HierarchyRequestError DOMException if the constraints of the node tree are violated.",
					"parent": "ParentNode"
				},
				"querySelector": {
					"name": "querySelector",
					"type": "unknown",
					"description": "Returns the first element that is a descendant of node that matches selectors.",
					"parent": "ParentNode"
				},
				"querySelectorAll": {
					"name": "querySelectorAll",
					"type": "unknown",
					"description": "Returns all element descendants of node that match selectors.",
					"parent": "ParentNode"
				},
				"replaceChildren": {
					"name": "replaceChildren",
					"type": "Event",
					"description": "Replace all children of node with nodes, while replacing strings in nodes with equivalent Text nodes.  Throws a HierarchyRequestError DOMException if the constraints of the node tree are violated.",
					"parent": "ParentNode"
				},
				"assignedSlot": {
					"name": "assignedSlot",
					"type": "unknown",
					"parent": "Slottable"
				},
				"oncopy": {
					"name": "oncopy",
					"type": "Event",
					"parent": "DocumentAndElementEventHandlers"
				},
				"oncut": {
					"name": "oncut",
					"type": "Event",
					"parent": "DocumentAndElementEventHandlers"
				},
				"onpaste": {
					"name": "onpaste",
					"type": "Event",
					"parent": "DocumentAndElementEventHandlers"
				},
				"style": {
					"name": "style",
					"type": "unknown",
					"parent": "ElementCSSInlineStyle"
				},
				"contentEditable": {
					"name": "contentEditable",
					"type": "string",
					"parent": "ElementContentEditable"
				},
				"enterKeyHint": {
					"name": "enterKeyHint",
					"type": "string",
					"parent": "ElementContentEditable"
				},
				"inputMode": {
					"name": "inputMode",
					"type": "string",
					"parent": "ElementContentEditable"
				},
				"isContentEditable": {
					"name": "isContentEditable",
					"type": "boolean",
					"parent": "ElementContentEditable"
				},
				"onabort": {
					"name": "onabort",
					"type": "Event",
					"description": "Fires when the user aborts the download.",
					"parent": "GlobalEventHandlers"
				},
				"onanimationcancel": {
					"name": "onanimationcancel",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"onanimationend": {
					"name": "onanimationend",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"onanimationiteration": {
					"name": "onanimationiteration",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"onanimationstart": {
					"name": "onanimationstart",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"onauxclick": {
					"name": "onauxclick",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"onblur": {
					"name": "onblur",
					"type": "Event",
					"description": "Fires when the object loses the input focus.",
					"parent": "GlobalEventHandlers"
				},
				"oncanplay": {
					"name": "oncanplay",
					"type": "Event",
					"description": "Occurs when playback is possible, but would require further buffering.",
					"parent": "GlobalEventHandlers"
				},
				"oncanplaythrough": {
					"name": "oncanplaythrough",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"onchange": {
					"name": "onchange",
					"type": "Event",
					"description": "Fires when the contents of the object or selection have changed.",
					"parent": "GlobalEventHandlers"
				},
				"onclick": {
					"name": "onclick",
					"type": "Event",
					"description": "Fires when the user clicks the left mouse button on the object",
					"parent": "GlobalEventHandlers"
				},
				"onclose": {
					"name": "onclose",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"oncontextmenu": {
					"name": "oncontextmenu",
					"type": "Event",
					"description": "Fires when the user clicks the right mouse button in the client area, opening the context menu.",
					"parent": "GlobalEventHandlers"
				},
				"oncuechange": {
					"name": "oncuechange",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"ondblclick": {
					"name": "ondblclick",
					"type": "Event",
					"description": "Fires when the user double-clicks the object.",
					"parent": "GlobalEventHandlers"
				},
				"ondrag": {
					"name": "ondrag",
					"type": "Event",
					"description": "Fires on the source object continuously during a drag operation.",
					"parent": "GlobalEventHandlers"
				},
				"ondragend": {
					"name": "ondragend",
					"type": "Event",
					"description": "Fires on the source object when the user releases the mouse at the close of a drag operation.",
					"parent": "GlobalEventHandlers"
				},
				"ondragenter": {
					"name": "ondragenter",
					"type": "Event",
					"description": "Fires on the target element when the user drags the object to a valid drop target.",
					"parent": "GlobalEventHandlers"
				},
				"ondragleave": {
					"name": "ondragleave",
					"type": "Event",
					"description": "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.",
					"parent": "GlobalEventHandlers"
				},
				"ondragover": {
					"name": "ondragover",
					"type": "Event",
					"description": "Fires on the target element continuously while the user drags the object over a valid drop target.",
					"parent": "GlobalEventHandlers"
				},
				"ondragstart": {
					"name": "ondragstart",
					"type": "Event",
					"description": "Fires on the source object when the user starts to drag a text selection or selected object.",
					"parent": "GlobalEventHandlers"
				},
				"ondrop": {
					"name": "ondrop",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"ondurationchange": {
					"name": "ondurationchange",
					"type": "Event",
					"description": "Occurs when the duration attribute is updated.",
					"parent": "GlobalEventHandlers"
				},
				"onemptied": {
					"name": "onemptied",
					"type": "Event",
					"description": "Occurs when the media element is reset to its initial state.",
					"parent": "GlobalEventHandlers"
				},
				"onended": {
					"name": "onended",
					"type": "Event",
					"description": "Occurs when the end of playback is reached.",
					"parent": "GlobalEventHandlers"
				},
				"onerror": {
					"name": "onerror",
					"type": "unknown",
					"description": "Fires when an error occurs during object loading.",
					"parent": "GlobalEventHandlers"
				},
				"onfocus": {
					"name": "onfocus",
					"type": "Event",
					"description": "Fires when the object receives focus.",
					"parent": "GlobalEventHandlers"
				},
				"onformdata": {
					"name": "onformdata",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"ongotpointercapture": {
					"name": "ongotpointercapture",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"oninput": {
					"name": "oninput",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"oninvalid": {
					"name": "oninvalid",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"onkeydown": {
					"name": "onkeydown",
					"type": "Event",
					"description": "Fires when the user presses a key.",
					"parent": "GlobalEventHandlers"
				},
				"onkeypress": {
					"name": "onkeypress",
					"type": "Event",
					"description": "null",
					"parent": "GlobalEventHandlers"
				},
				"onkeyup": {
					"name": "onkeyup",
					"type": "Event",
					"description": "Fires when the user releases a key.",
					"parent": "GlobalEventHandlers"
				},
				"onload": {
					"name": "onload",
					"type": "Event",
					"description": "Fires immediately after the browser loads the object.",
					"parent": "GlobalEventHandlers"
				},
				"onloadeddata": {
					"name": "onloadeddata",
					"type": "Event",
					"description": "Occurs when media data is loaded at the current playback position.",
					"parent": "GlobalEventHandlers"
				},
				"onloadedmetadata": {
					"name": "onloadedmetadata",
					"type": "Event",
					"description": "Occurs when the duration and dimensions of the media have been determined.",
					"parent": "GlobalEventHandlers"
				},
				"onloadstart": {
					"name": "onloadstart",
					"type": "Event",
					"description": "Occurs when Internet Explorer begins looking for media data.",
					"parent": "GlobalEventHandlers"
				},
				"onlostpointercapture": {
					"name": "onlostpointercapture",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"onmousedown": {
					"name": "onmousedown",
					"type": "Event",
					"description": "Fires when the user clicks the object with either mouse button.",
					"parent": "GlobalEventHandlers"
				},
				"onmouseenter": {
					"name": "onmouseenter",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"onmouseleave": {
					"name": "onmouseleave",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"onmousemove": {
					"name": "onmousemove",
					"type": "Event",
					"description": "Fires when the user moves the mouse over the object.",
					"parent": "GlobalEventHandlers"
				},
				"onmouseout": {
					"name": "onmouseout",
					"type": "Event",
					"description": "Fires when the user moves the mouse pointer outside the boundaries of the object.",
					"parent": "GlobalEventHandlers"
				},
				"onmouseover": {
					"name": "onmouseover",
					"type": "Event",
					"description": "Fires when the user moves the mouse pointer into the object.",
					"parent": "GlobalEventHandlers"
				},
				"onmouseup": {
					"name": "onmouseup",
					"type": "Event",
					"description": "Fires when the user releases a mouse button while the mouse is over the object.",
					"parent": "GlobalEventHandlers"
				},
				"onpause": {
					"name": "onpause",
					"type": "Event",
					"description": "Occurs when playback is paused.",
					"parent": "GlobalEventHandlers"
				},
				"onplay": {
					"name": "onplay",
					"type": "Event",
					"description": "Occurs when the play method is requested.",
					"parent": "GlobalEventHandlers"
				},
				"onplaying": {
					"name": "onplaying",
					"type": "Event",
					"description": "Occurs when the audio or video has started playing.",
					"parent": "GlobalEventHandlers"
				},
				"onpointercancel": {
					"name": "onpointercancel",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"onpointerdown": {
					"name": "onpointerdown",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"onpointerenter": {
					"name": "onpointerenter",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"onpointerleave": {
					"name": "onpointerleave",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"onpointermove": {
					"name": "onpointermove",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"onpointerout": {
					"name": "onpointerout",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"onpointerover": {
					"name": "onpointerover",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"onpointerup": {
					"name": "onpointerup",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"onprogress": {
					"name": "onprogress",
					"type": "Event",
					"description": "Occurs to indicate progress while downloading media data.",
					"parent": "GlobalEventHandlers"
				},
				"onratechange": {
					"name": "onratechange",
					"type": "Event",
					"description": "Occurs when the playback rate is increased or decreased.",
					"parent": "GlobalEventHandlers"
				},
				"onreset": {
					"name": "onreset",
					"type": "Event",
					"description": "Fires when the user resets a form.",
					"parent": "GlobalEventHandlers"
				},
				"onresize": {
					"name": "onresize",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"onscroll": {
					"name": "onscroll",
					"type": "Event",
					"description": "Fires when the user repositions the scroll box in the scroll bar on the object.",
					"parent": "GlobalEventHandlers"
				},
				"onseeked": {
					"name": "onseeked",
					"type": "Event",
					"description": "Occurs when the seek operation ends.",
					"parent": "GlobalEventHandlers"
				},
				"onseeking": {
					"name": "onseeking",
					"type": "Event",
					"description": "Occurs when the current playback position is moved.",
					"parent": "GlobalEventHandlers"
				},
				"onselect": {
					"name": "onselect",
					"type": "Event",
					"description": "Fires when the current selection changes.",
					"parent": "GlobalEventHandlers"
				},
				"onselectionchange": {
					"name": "onselectionchange",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"onselectstart": {
					"name": "onselectstart",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"onstalled": {
					"name": "onstalled",
					"type": "Event",
					"description": "Occurs when the download has stopped.",
					"parent": "GlobalEventHandlers"
				},
				"onsubmit": {
					"name": "onsubmit",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"onsuspend": {
					"name": "onsuspend",
					"type": "Event",
					"description": "Occurs if the load operation has been intentionally halted.",
					"parent": "GlobalEventHandlers"
				},
				"ontimeupdate": {
					"name": "ontimeupdate",
					"type": "Event",
					"description": "Occurs to indicate the current playback position.",
					"parent": "GlobalEventHandlers"
				},
				"ontoggle": {
					"name": "ontoggle",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"ontouchcancel": {
					"name": "ontouchcancel",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"ontouchend": {
					"name": "ontouchend",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"ontouchmove": {
					"name": "ontouchmove",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"ontouchstart": {
					"name": "ontouchstart",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"ontransitioncancel": {
					"name": "ontransitioncancel",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"ontransitionend": {
					"name": "ontransitionend",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"ontransitionrun": {
					"name": "ontransitionrun",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"ontransitionstart": {
					"name": "ontransitionstart",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"onvolumechange": {
					"name": "onvolumechange",
					"type": "Event",
					"description": "Occurs when the volume is changed, or playback is muted or unmuted.",
					"parent": "GlobalEventHandlers"
				},
				"onwaiting": {
					"name": "onwaiting",
					"type": "Event",
					"description": "Occurs when playback stops because the next frame of a video resource is not available.",
					"parent": "GlobalEventHandlers"
				},
				"onwebkitanimationend": {
					"name": "onwebkitanimationend",
					"type": "Event",
					"parent": "GlobalEventHandlers",
					"description": "This is a legacy alias of `onanimationend`."
				},
				"onwebkitanimationiteration": {
					"name": "onwebkitanimationiteration",
					"type": "Event",
					"parent": "GlobalEventHandlers",
					"description": "This is a legacy alias of `onanimationiteration`."
				},
				"onwebkitanimationstart": {
					"name": "onwebkitanimationstart",
					"type": "Event",
					"parent": "GlobalEventHandlers",
					"description": "This is a legacy alias of `onanimationstart`."
				},
				"onwebkittransitionend": {
					"name": "onwebkittransitionend",
					"type": "Event",
					"parent": "GlobalEventHandlers",
					"description": "This is a legacy alias of `ontransitionend`."
				},
				"onwheel": {
					"name": "onwheel",
					"type": "Event",
					"parent": "GlobalEventHandlers"
				},
				"autofocus": {
					"name": "autofocus",
					"type": "boolean",
					"parent": "HTMLOrSVGElement"
				},
				"dataset": {
					"name": "dataset",
					"type": "unknown",
					"parent": "HTMLOrSVGElement"
				},
				"nonce": {
					"name": "nonce",
					"type": "string",
					"parent": "HTMLOrSVGElement"
				},
				"tabIndex": {
					"name": "tabIndex",
					"type": "number",
					"parent": "HTMLOrSVGElement"
				},
				"blur": {
					"name": "blur",
					"type": "Event",
					"parent": "HTMLOrSVGElement"
				},
				"focus": {
					"name": "focus",
					"type": "Event",
					"parent": "HTMLOrSVGElement"
				},
				"apply": {
					"name": "apply",
					"type": "Event",
					"description": "Calls the function with the specified object as the this value and the elements of specified array as the arguments.",
					"parent": "CallableFunction"
				},
				"call": {
					"name": "call",
					"type": "Event",
					"description": "Calls the function with the specified object as the this value and the specified rest arguments as the arguments.",
					"parent": "CallableFunction"
				},
				"bind": {
					"name": "bind",
					"type": "Event",
					"description": "For a given function, creates a bound function that has the same body as the original function. The this object of the bound function is associated with the specified object, and has the specified initial parameters.",
					"parent": "CallableFunction"
				},
				"prototype": {
					"name": "prototype",
					"type": "unknown",
					"parent": "Function"
				},
				"arguments": {
					"name": "arguments",
					"type": "unknown",
					"parent": "Function"
				},
				"caller": {
					"name": "caller",
					"type": "Event",
					"parent": "Function"
				},
				"name": {
					"name": "name",
					"type": "string",
					"description": "Returns the name of the function. Function names are read-only and can not be changed.",
					"parent": "Function"
				},
				"__@hasInstance@2072": {
					"name": "__@hasInstance@2072",
					"type": "Event",
					"description": "Determines whether the given value inherits from this function if this function was used as a constructor function.  A constructor function can control which objects are recognized as its instances by instanceof by overriding this method.",
					"parent": "Function"
				}
			},
			"relativePath": "src/services/findElement.ts"
		},
		"ElasticEui_useDependentState": {
			"id": "ElasticEui_useDependentState",
			"name": "UseDependentState",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useDependentState",
				"lib": "elasticEui"
			},
			"required": [
				"apply",
				"call",
				"bind",
				"prototype",
				"length",
				"arguments",
				"caller",
				"name",
				"__@hasInstance@2072"
			],
			"props": {
				"apply": {
					"name": "apply",
					"type": "Event",
					"description": "Calls the function with the specified object as the this value and the elements of specified array as the arguments.",
					"parent": "CallableFunction"
				},
				"call": {
					"name": "call",
					"type": "Event",
					"description": "Calls the function with the specified object as the this value and the specified rest arguments as the arguments.",
					"parent": "CallableFunction"
				},
				"bind": {
					"name": "bind",
					"type": "Event",
					"description": "For a given function, creates a bound function that has the same body as the original function. The this object of the bound function is associated with the specified object, and has the specified initial parameters.",
					"parent": "CallableFunction"
				},
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of a function.",
					"parent": "Function"
				},
				"prototype": {
					"name": "prototype",
					"type": "unknown",
					"parent": "Function"
				},
				"length": {
					"name": "length",
					"type": "number",
					"parent": "Function"
				},
				"arguments": {
					"name": "arguments",
					"type": "unknown",
					"parent": "Function"
				},
				"caller": {
					"name": "caller",
					"type": "Event",
					"parent": "Function"
				},
				"name": {
					"name": "name",
					"type": "string",
					"description": "Returns the name of the function. Function names are read-only and can not be changed.",
					"parent": "Function"
				},
				"__@hasInstance@2072": {
					"name": "__@hasInstance@2072",
					"type": "Event",
					"description": "Determines whether the given value inherits from this function if this function was used as a constructor function.  A constructor function can control which objects are recognized as its instances by instanceof by overriding this method.",
					"parent": "Function"
				}
			},
			"relativePath": "src/services/hooks/useDependentState.ts"
		},
		"ElasticEui_useCombinedRefs": {
			"id": "ElasticEui_useCombinedRefs",
			"name": "UseCombinedRefs",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useCombinedRefs",
				"lib": "elasticEui"
			},
			"required": [
				"length",
				"pop",
				"push",
				"concat",
				"join",
				"reverse",
				"shift",
				"slice",
				"sort",
				"splice",
				"unshift",
				"indexOf",
				"lastIndexOf",
				"every",
				"some",
				"forEach",
				"map",
				"filter",
				"reduce",
				"reduceRight",
				"find",
				"findIndex",
				"fill",
				"copyWithin",
				"entries",
				"keys",
				"values",
				"includes",
				"flatMap",
				"flat",
				"__@iterator@43",
				"__@unscopables@327"
			],
			"props": {
				"length": {
					"name": "length",
					"type": "number",
					"description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
					"parent": "Array"
				},
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of an array.",
					"parent": "Array"
				},
				"toLocaleString": {
					"name": "toLocaleString",
					"type": "Event",
					"description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
					"parent": "Array"
				},
				"pop": {
					"name": "pop",
					"type": "Event",
					"description": "Removes the last element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"push": {
					"name": "push",
					"type": "Event",
					"description": "Appends new elements to the end of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"concat": {
					"name": "concat",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Combines two or more arrays. This method returns a new array without modifying any existing arrays.",
					"parent": "Array"
				},
				"join": {
					"name": "join",
					"type": "Event",
					"description": "Adds all the elements of an array into a string, separated by the specified separator string.",
					"parent": "Array"
				},
				"reverse": {
					"name": "reverse",
					"description": "Reverses the elements in an array in place. This method mutates the array and returns a reference to the same array.",
					"type": "Event",
					"parent": "Array"
				},
				"shift": {
					"name": "shift",
					"type": "Event",
					"description": "Removes the first element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"slice": {
					"name": "slice",
					"description": "Returns a copy of a section of an array. For both start and end, a negative index can be used to indicate an offset from the end of the array. For example, -2 refers to the second to last element of the array.",
					"type": "Event",
					"parent": "Array"
				},
				"sort": {
					"name": "sort",
					"description": "Sorts an array in place. This method mutates the array and returns a reference to the same array.",
					"type": "Event",
					"parent": "Array"
				},
				"splice": {
					"name": "splice",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
					"parent": "Array"
				},
				"unshift": {
					"name": "unshift",
					"type": "Event",
					"description": "Inserts new elements at the start of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"every": {
					"name": "every",
					"type": "Event",
					"description": "Determines whether all the members of an array satisfy the specified test.",
					"parent": "Array"
				},
				"some": {
					"name": "some",
					"type": "Event",
					"description": "Determines whether the specified callback function returns true for any element of an array.",
					"parent": "Array"
				},
				"forEach": {
					"name": "forEach",
					"type": "Event",
					"description": "Performs the specified action for each element in an array.",
					"parent": "Array"
				},
				"map": {
					"name": "map",
					"type": "Event",
					"description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
					"parent": "Array"
				},
				"filter": {
					"name": "filter",
					"type": "Event",
					"description": "Returns the elements of an array that meet the condition specified in a callback function.",
					"parent": "Array"
				},
				"reduce": {
					"name": "reduce",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"reduceRight": {
					"name": "reduceRight",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"find": {
					"name": "find",
					"type": "Event",
					"description": "Returns the value of the first element in the array where predicate is true, and undefined otherwise.",
					"parent": "Array"
				},
				"findIndex": {
					"name": "findIndex",
					"type": "Event",
					"description": "Returns the index of the first element in the array where predicate is true, and -1 otherwise.",
					"parent": "Array"
				},
				"fill": {
					"name": "fill",
					"description": "Changes all array elements from start to end index to a static value and returns the modified array",
					"type": "Event",
					"parent": "Array"
				},
				"copyWithin": {
					"name": "copyWithin",
					"description": "Returns the this object after copying a section of the array identified by start and end to the same array starting at position target",
					"type": "Event",
					"parent": "Array"
				},
				"entries": {
					"name": "entries",
					"type": "Event",
					"description": "Returns an iterable of key, value pairs for every entry in the array",
					"parent": "Array"
				},
				"keys": {
					"name": "keys",
					"type": "Event",
					"description": "Returns an iterable of keys in the array",
					"parent": "Array"
				},
				"values": {
					"name": "values",
					"type": "Event",
					"description": "Returns an iterable of values in the array",
					"parent": "Array"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Determines whether an array includes a certain element, returning true or false as appropriate.",
					"parent": "Array"
				},
				"flatMap": {
					"name": "flatMap",
					"description": "Calls a defined callback function on each element of an array. Then, flattens the result into a new array. This is identical to a map followed by flat with depth 1.",
					"type": "Event",
					"parent": "Array"
				},
				"flat": {
					"name": "flat",
					"type": "Event",
					"description": "Returns a new array with all sub-array elements concatenated into it recursively up to the specified depth.",
					"parent": "Array"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "Array"
				},
				"__@unscopables@327": {
					"name": "__@unscopables@327",
					"type": "Event",
					"description": "Returns an object whose properties have the value true when they will be absent when used in a with statement.",
					"parent": "Array"
				}
			},
			"relativePath": "src/services/hooks/useCombinedRefs.ts"
		},
		"ElasticEui_useForceRender": {
			"id": "ElasticEui_useForceRender",
			"name": "UseForceRender",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useForceRender",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/hooks/useForceRender.ts"
		},
		"ElasticEui_useIsWithinBreakpoints": {
			"id": "ElasticEui_useIsWithinBreakpoints",
			"name": "UseIsWithinBreakpoints",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useIsWithinBreakpoints",
				"lib": "elasticEui"
			},
			"description": "Given the current window.innerWidth and an array of breakpoint keys, this hook stores state and returns true or false if the window.innerWidth falls within any of the named breakpoints.",
			"required": [
				"length",
				"pop",
				"push",
				"concat",
				"join",
				"reverse",
				"shift",
				"slice",
				"sort",
				"splice",
				"unshift",
				"indexOf",
				"lastIndexOf",
				"every",
				"some",
				"forEach",
				"map",
				"filter",
				"reduce",
				"reduceRight",
				"find",
				"findIndex",
				"fill",
				"copyWithin",
				"entries",
				"keys",
				"values",
				"includes",
				"flatMap",
				"flat",
				"__@iterator@43",
				"__@unscopables@327"
			],
			"props": {
				"length": {
					"name": "length",
					"type": "number",
					"description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
					"parent": "Array"
				},
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of an array.",
					"parent": "Array"
				},
				"toLocaleString": {
					"name": "toLocaleString",
					"type": "Event",
					"description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
					"parent": "Array"
				},
				"pop": {
					"name": "pop",
					"type": "Event",
					"description": "Removes the last element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"push": {
					"name": "push",
					"type": "Event",
					"description": "Appends new elements to the end of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"concat": {
					"name": "concat",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Combines two or more arrays. This method returns a new array without modifying any existing arrays.",
					"parent": "Array"
				},
				"join": {
					"name": "join",
					"type": "Event",
					"description": "Adds all the elements of an array into a string, separated by the specified separator string.",
					"parent": "Array"
				},
				"reverse": {
					"name": "reverse",
					"type": "Event",
					"description": "Reverses the elements in an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"shift": {
					"name": "shift",
					"type": "Event",
					"description": "Removes the first element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.",
					"parent": "Array"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a copy of a section of an array. For both start and end, a negative index can be used to indicate an offset from the end of the array. For example, -2 refers to the second to last element of the array.",
					"parent": "Array"
				},
				"sort": {
					"name": "sort",
					"type": "Event",
					"description": "Sorts an array in place. This method mutates the array and returns a reference to the same array.",
					"parent": "Array"
				},
				"splice": {
					"name": "splice",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
					"parent": "Array"
				},
				"unshift": {
					"name": "unshift",
					"type": "Event",
					"description": "Inserts new elements at the start of an array, and returns the new length of the array.",
					"parent": "Array"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.",
					"parent": "Array"
				},
				"every": {
					"name": "every",
					"type": "Event",
					"description": "Determines whether all the members of an array satisfy the specified test.",
					"parent": "Array"
				},
				"some": {
					"name": "some",
					"type": "Event",
					"description": "Determines whether the specified callback function returns true for any element of an array.",
					"parent": "Array"
				},
				"forEach": {
					"name": "forEach",
					"type": "Event",
					"description": "Performs the specified action for each element in an array.",
					"parent": "Array"
				},
				"map": {
					"name": "map",
					"type": "Event",
					"description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
					"parent": "Array"
				},
				"filter": {
					"name": "filter",
					"type": "Event",
					"description": "Returns the elements of an array that meet the condition specified in a callback function.",
					"parent": "Array"
				},
				"reduce": {
					"name": "reduce",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"reduceRight": {
					"name": "reduceRight",
					"type": "Event",
					"description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
					"parent": "Array"
				},
				"find": {
					"name": "find",
					"description": "Returns the value of the first element in the array where predicate is true, and undefined otherwise.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"findIndex": {
					"name": "findIndex",
					"type": "Event",
					"description": "Returns the index of the first element in the array where predicate is true, and -1 otherwise.",
					"parent": "Array"
				},
				"fill": {
					"name": "fill",
					"type": "Event",
					"description": "Changes all array elements from start to end index to a static value and returns the modified array",
					"parent": "Array"
				},
				"copyWithin": {
					"name": "copyWithin",
					"type": "Event",
					"description": "Returns the this object after copying a section of the array identified by start and end to the same array starting at position target",
					"parent": "Array"
				},
				"entries": {
					"name": "entries",
					"type": "Event",
					"description": "Returns an iterable of key, value pairs for every entry in the array",
					"parent": "Array"
				},
				"keys": {
					"name": "keys",
					"type": "Event",
					"description": "Returns an iterable of keys in the array",
					"parent": "Array"
				},
				"values": {
					"name": "values",
					"type": "Event",
					"description": "Returns an iterable of values in the array",
					"parent": "Array"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Determines whether an array includes a certain element, returning true or false as appropriate.",
					"parent": "Array"
				},
				"flatMap": {
					"name": "flatMap",
					"description": "Calls a defined callback function on each element of an array. Then, flattens the result into a new array. This is identical to a map followed by flat with depth 1.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "Array"
				},
				"flat": {
					"name": "flat",
					"type": "Event",
					"description": "Returns a new array with all sub-array elements concatenated into it recursively up to the specified depth.",
					"parent": "Array"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "Array"
				},
				"__@unscopables@327": {
					"name": "__@unscopables@327",
					"type": "Event",
					"description": "Returns an object whose properties have the value true when they will be absent when used in a with statement.",
					"parent": "Array"
				}
			},
			"relativePath": "src/services/hooks/useIsWithinBreakpoints.ts"
		},
		"ElasticEui_isMouseEvent": {
			"id": "ElasticEui_isMouseEvent",
			"name": "IsMouseEvent",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "isMouseEvent",
				"lib": "elasticEui"
			},
			"required": [
				"altKey",
				"button",
				"buttons",
				"clientX",
				"clientY",
				"ctrlKey",
				"getModifierState",
				"metaKey",
				"movementX",
				"movementY",
				"pageX",
				"pageY",
				"relatedTarget",
				"screenX",
				"screenY",
				"shiftKey",
				"detail",
				"view",
				"nativeEvent",
				"currentTarget",
				"target",
				"bubbles",
				"cancelable",
				"defaultPrevented",
				"eventPhase",
				"isTrusted",
				"preventDefault",
				"isDefaultPrevented",
				"stopPropagation",
				"isPropagationStopped",
				"persist",
				"timeStamp",
				"type",
				"changedTouches",
				"targetTouches",
				"touches"
			],
			"props": {
				"altKey": {
					"name": "altKey",
					"type": "boolean",
					"parent": "MouseEvent"
				},
				"button": {
					"name": "button",
					"type": "number",
					"parent": "MouseEvent"
				},
				"buttons": {
					"name": "buttons",
					"type": "number",
					"parent": "MouseEvent"
				},
				"clientX": {
					"name": "clientX",
					"type": "number",
					"parent": "MouseEvent"
				},
				"clientY": {
					"name": "clientY",
					"type": "number",
					"parent": "MouseEvent"
				},
				"ctrlKey": {
					"name": "ctrlKey",
					"type": "boolean",
					"parent": "MouseEvent"
				},
				"getModifierState": {
					"name": "getModifierState",
					"type": "Event",
					"description": "See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.",
					"parent": "MouseEvent"
				},
				"metaKey": {
					"name": "metaKey",
					"type": "boolean",
					"parent": "MouseEvent"
				},
				"movementX": {
					"name": "movementX",
					"type": "number",
					"parent": "MouseEvent"
				},
				"movementY": {
					"name": "movementY",
					"type": "number",
					"parent": "MouseEvent"
				},
				"pageX": {
					"name": "pageX",
					"type": "number",
					"parent": "MouseEvent"
				},
				"pageY": {
					"name": "pageY",
					"type": "number",
					"parent": "MouseEvent"
				},
				"relatedTarget": {
					"name": "relatedTarget",
					"type": "unknown",
					"parent": "MouseEvent"
				},
				"screenX": {
					"name": "screenX",
					"type": "number",
					"parent": "MouseEvent"
				},
				"screenY": {
					"name": "screenY",
					"type": "number",
					"parent": "MouseEvent"
				},
				"shiftKey": {
					"name": "shiftKey",
					"type": "boolean",
					"parent": "MouseEvent"
				},
				"detail": {
					"name": "detail",
					"type": "number",
					"parent": "UIEvent"
				},
				"view": {
					"name": "view",
					"type": "unknown",
					"parent": "UIEvent"
				},
				"nativeEvent": {
					"name": "nativeEvent",
					"type": "unknown",
					"parent": "BaseSyntheticEvent"
				},
				"currentTarget": {
					"name": "currentTarget",
					"type": "unknown",
					"parent": "BaseSyntheticEvent"
				},
				"target": {
					"name": "target",
					"type": "unknown",
					"parent": "BaseSyntheticEvent"
				},
				"bubbles": {
					"name": "bubbles",
					"type": "boolean",
					"parent": "BaseSyntheticEvent"
				},
				"cancelable": {
					"name": "cancelable",
					"type": "boolean",
					"parent": "BaseSyntheticEvent"
				},
				"defaultPrevented": {
					"name": "defaultPrevented",
					"type": "boolean",
					"parent": "BaseSyntheticEvent"
				},
				"eventPhase": {
					"name": "eventPhase",
					"type": "number",
					"parent": "BaseSyntheticEvent"
				},
				"isTrusted": {
					"name": "isTrusted",
					"type": "boolean",
					"parent": "BaseSyntheticEvent"
				},
				"preventDefault": {
					"name": "preventDefault",
					"type": "Event",
					"parent": "BaseSyntheticEvent"
				},
				"isDefaultPrevented": {
					"name": "isDefaultPrevented",
					"type": "Event",
					"parent": "BaseSyntheticEvent"
				},
				"stopPropagation": {
					"name": "stopPropagation",
					"type": "Event",
					"parent": "BaseSyntheticEvent"
				},
				"isPropagationStopped": {
					"name": "isPropagationStopped",
					"type": "Event",
					"parent": "BaseSyntheticEvent"
				},
				"persist": {
					"name": "persist",
					"type": "Event",
					"parent": "BaseSyntheticEvent"
				},
				"timeStamp": {
					"name": "timeStamp",
					"type": "number",
					"parent": "BaseSyntheticEvent"
				},
				"type": {
					"name": "type",
					"type": "string",
					"parent": "BaseSyntheticEvent"
				},
				"changedTouches": {
					"name": "changedTouches",
					"type": "unknown",
					"parent": "TouchEvent"
				},
				"targetTouches": {
					"name": "targetTouches",
					"type": "unknown",
					"parent": "TouchEvent"
				},
				"touches": {
					"name": "touches",
					"type": "unknown",
					"parent": "TouchEvent"
				}
			},
			"relativePath": "src/services/hooks/useMouseMove.ts"
		},
		"ElasticEui_useMouseMove": {
			"id": "ElasticEui_useMouseMove",
			"name": "UseMouseMove",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useMouseMove",
				"lib": "elasticEui"
			},
			"required": [
				"apply",
				"call",
				"bind",
				"prototype",
				"length",
				"arguments",
				"caller",
				"name",
				"__@hasInstance@2072"
			],
			"props": {
				"apply": {
					"name": "apply",
					"type": "Event",
					"description": "Calls the function with the specified object as the this value and the elements of specified array as the arguments.",
					"parent": "CallableFunction"
				},
				"call": {
					"name": "call",
					"type": "Event",
					"description": "Calls the function with the specified object as the this value and the specified rest arguments as the arguments.",
					"parent": "CallableFunction"
				},
				"bind": {
					"name": "bind",
					"type": "Event",
					"description": "For a given function, creates a bound function that has the same body as the original function. The this object of the bound function is associated with the specified object, and has the specified initial parameters.",
					"parent": "CallableFunction"
				},
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of a function.",
					"parent": "Function"
				},
				"prototype": {
					"name": "prototype",
					"type": "unknown",
					"parent": "Function"
				},
				"length": {
					"name": "length",
					"type": "number",
					"parent": "Function"
				},
				"arguments": {
					"name": "arguments",
					"type": "unknown",
					"parent": "Function"
				},
				"caller": {
					"name": "caller",
					"type": "Event",
					"parent": "Function"
				},
				"name": {
					"name": "name",
					"type": "string",
					"description": "Returns the name of the function. Function names are read-only and can not be changed.",
					"parent": "Function"
				},
				"__@hasInstance@2072": {
					"name": "__@hasInstance@2072",
					"type": "Event",
					"description": "Determines whether the given value inherits from this function if this function was used as a constructor function.  A constructor function can control which objects are recognized as its instances by instanceof by overriding this method.",
					"parent": "Function"
				}
			},
			"relativePath": "src/services/hooks/useMouseMove.ts"
		},
		"ElasticEui_useUpdateEffect": {
			"id": "ElasticEui_useUpdateEffect",
			"name": "UseUpdateEffect",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useUpdateEffect",
				"lib": "elasticEui"
			},
			"required": [
				"apply",
				"call",
				"bind",
				"prototype",
				"length",
				"arguments",
				"caller",
				"name",
				"__@hasInstance@2072"
			],
			"props": {
				"apply": {
					"name": "apply",
					"type": "Event",
					"description": "Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.",
					"parent": "Function"
				},
				"call": {
					"name": "call",
					"type": "Event",
					"description": "Calls a method of an object, substituting another object for the current object.",
					"parent": "Function"
				},
				"bind": {
					"name": "bind",
					"type": "Event",
					"description": "For a given function, creates a bound function that has the same body as the original function. The this object of the bound function is associated with the specified object, and has the specified initial parameters.",
					"parent": "Function"
				},
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of a function.",
					"parent": "Function"
				},
				"prototype": {
					"name": "prototype",
					"type": "unknown",
					"parent": "Function"
				},
				"length": {
					"name": "length",
					"type": "number",
					"parent": "Function"
				},
				"arguments": {
					"name": "arguments",
					"type": "unknown",
					"parent": "Function"
				},
				"caller": {
					"name": "caller",
					"type": "Event",
					"parent": "Function"
				},
				"name": {
					"name": "name",
					"type": "string",
					"description": "Returns the name of the function. Function names are read-only and can not be changed.",
					"parent": "Function"
				},
				"__@hasInstance@2072": {
					"name": "__@hasInstance@2072",
					"type": "Event",
					"description": "Determines whether the given value inherits from this function if this function was used as a constructor function.  A constructor function can control which objects are recognized as its instances by instanceof by overriding this method.",
					"parent": "Function"
				}
			},
			"relativePath": "src/services/hooks/useUpdateEffect.ts"
		},
		"ElasticEui_EuiSystemContext": {
			"id": "ElasticEui_EuiSystemContext",
			"name": "EuiSystemContext",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiSystemContext",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/theme/context.ts"
		},
		"ElasticEui_EuiThemeContext": {
			"id": "ElasticEui_EuiThemeContext",
			"name": "EuiThemeContext",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiThemeContext",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/theme/context.ts"
		},
		"ElasticEui_EuiModificationsContext": {
			"id": "ElasticEui_EuiModificationsContext",
			"name": "EuiModificationsContext",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiModificationsContext",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/theme/context.ts"
		},
		"ElasticEui_EuiColorModeContext": {
			"id": "ElasticEui_EuiColorModeContext",
			"name": "EuiColorModeContext",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiColorModeContext",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/theme/context.ts"
		},
		"ElasticEui_useEuiTheme": {
			"id": "ElasticEui_useEuiTheme",
			"name": "UseEuiTheme",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useEuiTheme",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/theme/hooks.tsx"
		},
		"ElasticEui_withEuiTheme": {
			"id": "ElasticEui_withEuiTheme",
			"name": "WithEuiTheme",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "withEuiTheme",
				"lib": "elasticEui"
			},
			"required": [
				"apply",
				"call",
				"bind",
				"prototype",
				"length",
				"arguments",
				"caller",
				"name",
				"__@hasInstance@2072"
			],
			"props": {
				"propTypes": {
					"name": "propTypes",
					"type": "unknown",
					"parent": "ComponentClass"
				},
				"contextType": {
					"name": "contextType",
					"type": "unknown",
					"parent": "ComponentClass"
				},
				"contextTypes": {
					"name": "contextTypes",
					"type": "unknown",
					"parent": "ComponentClass"
				},
				"childContextTypes": {
					"name": "childContextTypes",
					"type": "unknown",
					"parent": "ComponentClass"
				},
				"defaultProps": {
					"name": "defaultProps",
					"type": "unknown",
					"parent": "ComponentClass"
				},
				"displayName": {
					"name": "displayName",
					"type": "string",
					"parent": "ComponentClass"
				},
				"getDerivedStateFromProps": {
					"name": "getDerivedStateFromProps",
					"type": "unknown",
					"parent": "StaticLifecycle"
				},
				"getDerivedStateFromError": {
					"name": "getDerivedStateFromError",
					"type": "unknown",
					"parent": "StaticLifecycle"
				},
				"apply": {
					"name": "apply",
					"type": "Event",
					"description": "Calls the function with the specified object as the this value and the elements of specified array as the arguments.",
					"parent": "NewableFunction"
				},
				"call": {
					"name": "call",
					"type": "Event",
					"description": "Calls the function with the specified object as the this value and the specified rest arguments as the arguments.",
					"parent": "NewableFunction"
				},
				"bind": {
					"name": "bind",
					"type": "Event",
					"description": "For a given function, creates a bound function that has the same body as the original function. The this object of the bound function is associated with the specified object, and has the specified initial parameters.",
					"parent": "NewableFunction"
				},
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of a function.",
					"parent": "Function"
				},
				"prototype": {
					"name": "prototype",
					"type": "unknown",
					"parent": "Function"
				},
				"length": {
					"name": "length",
					"type": "number",
					"parent": "Function"
				},
				"arguments": {
					"name": "arguments",
					"type": "unknown",
					"parent": "Function"
				},
				"caller": {
					"name": "caller",
					"type": "Event",
					"parent": "Function"
				},
				"name": {
					"name": "name",
					"type": "string",
					"description": "Returns the name of the function. Function names are read-only and can not be changed.",
					"parent": "Function"
				},
				"__@hasInstance@2072": {
					"name": "__@hasInstance@2072",
					"type": "Event",
					"description": "Determines whether the given value inherits from this function if this function was used as a constructor function.  A constructor function can control which objects are recognized as its instances by instanceof by overriding this method.",
					"parent": "Function"
				}
			},
			"relativePath": "src/services/theme/hooks.tsx"
		},
		"ElasticEui_EuiThemeProvider": {
			"id": "ElasticEui_EuiThemeProvider",
			"name": "EuiThemeProvider",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiThemeProvider",
				"lib": "elasticEui"
			},
			"props": {
				"theme": {
					"name": "theme",
					"type": "unknown",
					"parent": "EuiThemeProviderProps"
				},
				"colorMode": {
					"name": "colorMode",
					"type": "string",
					"enum": [
						"dark",
						"light",
						"LIGHT",
						"DARK",
						"inverse",
						"INVERSE"
					],
					"parent": "EuiThemeProviderProps"
				},
				"modify": {
					"name": "modify",
					"type": "unknown",
					"parent": "EuiThemeProviderProps"
				}
			},
			"relativePath": "src/services/theme/provider.tsx"
		},
		"ElasticEui_buildTheme": {
			"id": "ElasticEui_buildTheme",
			"name": "BuildTheme",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "buildTheme",
				"lib": "elasticEui"
			},
			"description": "Builds a Proxy with a custom handler designed to self-reference values and prevent arbitrary value overrides.",
			"props": {},
			"relativePath": "src/services/theme/utils.ts"
		},
		"ElasticEui_computed": {
			"id": "ElasticEui_computed",
			"name": "Computed",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "computed",
				"lib": "elasticEui"
			},
			"description": "Returns a Class (Computed) that stores the arbitrary computer method and references to its optional dependecies.",
			"required": [
				"apply",
				"call",
				"bind",
				"prototype",
				"length",
				"arguments",
				"caller",
				"name",
				"__@hasInstance@2072"
			],
			"props": {
				"apply": {
					"name": "apply",
					"type": "Event",
					"description": "Calls the function with the specified object as the this value and the elements of specified array as the arguments.",
					"parent": "CallableFunction"
				},
				"call": {
					"name": "call",
					"type": "Event",
					"description": "Calls the function with the specified object as the this value and the specified rest arguments as the arguments.",
					"parent": "CallableFunction"
				},
				"bind": {
					"name": "bind",
					"type": "Event",
					"description": "For a given function, creates a bound function that has the same body as the original function. The this object of the bound function is associated with the specified object, and has the specified initial parameters.",
					"parent": "CallableFunction"
				},
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of a function.",
					"parent": "Function"
				},
				"prototype": {
					"name": "prototype",
					"type": "unknown",
					"parent": "Function"
				},
				"length": {
					"name": "length",
					"type": "number",
					"parent": "Function"
				},
				"arguments": {
					"name": "arguments",
					"type": "unknown",
					"parent": "Function"
				},
				"caller": {
					"name": "caller",
					"type": "Event",
					"parent": "Function"
				},
				"name": {
					"name": "name",
					"type": "string",
					"description": "Returns the name of the function. Function names are read-only and can not be changed.",
					"parent": "Function"
				},
				"__@hasInstance@2072": {
					"name": "__@hasInstance@2072",
					"type": "Event",
					"description": "Determines whether the given value inherits from this function if this function was used as a constructor function.  A constructor function can control which objects are recognized as its instances by instanceof by overriding this method.",
					"parent": "Function"
				}
			},
			"relativePath": "src/services/theme/utils.ts"
		},
		"ElasticEui_isInverseColorMode": {
			"id": "ElasticEui_isInverseColorMode",
			"name": "IsInverseColorMode",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "isInverseColorMode",
				"lib": "elasticEui"
			},
			"description": "Returns whether the provided color mode is inverse",
			"props": {},
			"relativePath": "src/services/theme/utils.ts"
		},
		"ElasticEui_getColorMode": {
			"id": "ElasticEui_getColorMode",
			"name": "GetColorMode",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "getColorMode",
				"lib": "elasticEui"
			},
			"description": "Returns the color mode configured in the current EuiThemeProvider. Returns the parent color mode if none is explicity set.",
			"required": [
				"charAt",
				"charCodeAt",
				"concat",
				"indexOf",
				"lastIndexOf",
				"localeCompare",
				"match",
				"replace",
				"search",
				"slice",
				"split",
				"substring",
				"toLowerCase",
				"toLocaleLowerCase",
				"toUpperCase",
				"toLocaleUpperCase",
				"trim",
				"length",
				"substr",
				"codePointAt",
				"includes",
				"endsWith",
				"normalize",
				"repeat",
				"startsWith",
				"anchor",
				"big",
				"blink",
				"bold",
				"fixed",
				"fontcolor",
				"fontsize",
				"italics",
				"link",
				"small",
				"strike",
				"sub",
				"sup",
				"padStart",
				"padEnd",
				"trimEnd",
				"trimStart",
				"trimLeft",
				"trimRight",
				"matchAll",
				"replaceAll",
				"__@iterator@43"
			],
			"props": {
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of a string.",
					"parent": "String"
				},
				"charAt": {
					"name": "charAt",
					"type": "Event",
					"description": "Returns the character at the specified index.",
					"parent": "String"
				},
				"charCodeAt": {
					"name": "charCodeAt",
					"type": "Event",
					"description": "Returns the Unicode value of the character at the specified location.",
					"parent": "String"
				},
				"concat": {
					"name": "concat",
					"type": "Event",
					"description": "Returns a string that contains the concatenation of two or more strings.",
					"parent": "String"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the position of the first occurrence of a substring.",
					"parent": "String"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the last occurrence of a substring in the string.",
					"parent": "String"
				},
				"localeCompare": {
					"name": "localeCompare",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Determines whether two strings are equivalent in the current locale. Determines whether two strings are equivalent in the current or specified locale.",
					"parent": "String"
				},
				"match": {
					"name": "match",
					"type": "unknown",
					"description": "Matches a string with a regular expression, and returns an array containing the results of that search. Matches a string or an object that supports being matched against, and returns an array containing the results of that search, or null if no matches are found.",
					"parent": "String"
				},
				"replace": {
					"name": "replace",
					"description": "Replaces text in a string, using a regular expression or search string. Replaces first match with string or all matches with RegExp. Replaces text in a string, using an object that supports replacement within a string.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "String"
				},
				"search": {
					"name": "search",
					"type": "unknown",
					"description": "Finds the first substring match in a regular expression search.",
					"parent": "String"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a section of a string.",
					"parent": "String"
				},
				"split": {
					"name": "split",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Split a string into substrings using the specified separator and return them as an array.",
					"parent": "String"
				},
				"substring": {
					"name": "substring",
					"type": "Event",
					"description": "Returns the substring at the specified location within a String object.",
					"parent": "String"
				},
				"toLowerCase": {
					"name": "toLowerCase",
					"type": "Event",
					"description": "Converts all the alphabetic characters in a string to lowercase.",
					"parent": "String"
				},
				"toLocaleLowerCase": {
					"name": "toLocaleLowerCase",
					"description": "Converts all alphabetic characters to lowercase, taking into account the host environments current locale.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "String"
				},
				"toUpperCase": {
					"name": "toUpperCase",
					"type": "Event",
					"description": "Converts all the alphabetic characters in a string to uppercase.",
					"parent": "String"
				},
				"toLocaleUpperCase": {
					"name": "toLocaleUpperCase",
					"description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environments current locale.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "String"
				},
				"trim": {
					"name": "trim",
					"type": "Event",
					"description": "Removes the leading and trailing white space and line terminator characters from a string.",
					"parent": "String"
				},
				"length": {
					"name": "length",
					"type": "number",
					"description": "Returns the length of a String object.",
					"parent": "String"
				},
				"substr": {
					"name": "substr",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"valueOf": {
					"name": "valueOf",
					"type": "Event",
					"description": "Returns the primitive value of the specified object.",
					"parent": "String"
				},
				"codePointAt": {
					"name": "codePointAt",
					"type": "Event",
					"description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point value of the UTF-16 encoded code point starting at the string element at position pos in the String resulting from converting this object to a String. If there is no element at that position, the result is undefined. If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
					"parent": "String"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Returns true if searchString appears as a substring of the result of converting this object to a String, at one or more positions that are greater than or equal to position; otherwise, returns false.",
					"parent": "String"
				},
				"endsWith": {
					"name": "endsWith",
					"type": "Event",
					"description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at endPosition – length(this). Otherwise returns false.",
					"parent": "String"
				},
				"normalize": {
					"name": "normalize",
					"type": "unknown",
					"description": "Returns the String value result of normalizing the string into the normalization form named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
					"parent": "String"
				},
				"repeat": {
					"name": "repeat",
					"type": "Event",
					"description": "Returns a String value that is made from count copies appended together. If count is 0, the empty string is returned.",
					"parent": "String"
				},
				"startsWith": {
					"name": "startsWith",
					"type": "Event",
					"description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at position. Otherwise returns false.",
					"parent": "String"
				},
				"anchor": {
					"name": "anchor",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"big": {
					"name": "big",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"blink": {
					"name": "blink",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"bold": {
					"name": "bold",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fixed": {
					"name": "fixed",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fontcolor": {
					"name": "fontcolor",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fontsize": {
					"name": "fontsize",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"italics": {
					"name": "italics",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"link": {
					"name": "link",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"small": {
					"name": "small",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"strike": {
					"name": "strike",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"sub": {
					"name": "sub",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"sup": {
					"name": "sup",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"padStart": {
					"name": "padStart",
					"type": "Event",
					"description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the start (left) of the current string.",
					"parent": "String"
				},
				"padEnd": {
					"name": "padEnd",
					"type": "Event",
					"description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string.",
					"parent": "String"
				},
				"trimEnd": {
					"name": "trimEnd",
					"type": "Event",
					"description": "Removes the trailing white space and line terminator characters from a string.",
					"parent": "String"
				},
				"trimStart": {
					"name": "trimStart",
					"type": "Event",
					"description": "Removes the leading white space and line terminator characters from a string.",
					"parent": "String"
				},
				"trimLeft": {
					"name": "trimLeft",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility. Use `trimStart` instead",
					"parent": "String"
				},
				"trimRight": {
					"name": "trimRight",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility. Use `trimEnd` instead",
					"parent": "String"
				},
				"matchAll": {
					"name": "matchAll",
					"type": "Event",
					"description": "Matches a string with a regular expression, and returns an iterable of matches containing the results of that search.",
					"parent": "String"
				},
				"replaceAll": {
					"name": "replaceAll",
					"description": "Replace all instances of a substring in a string, using a regular expression or search string.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "String"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "String"
				}
			},
			"relativePath": "src/services/theme/utils.ts"
		},
		"ElasticEui_getComputed": {
			"id": "ElasticEui_getComputed",
			"name": "GetComputed",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "getComputed",
				"lib": "elasticEui"
			},
			"description": "Takes an uncomputed theme, and computes and returns all values taking into consideration value overrides and configured color mode. Overrides take precedence, and only values in the current color mode are computed and returned.",
			"required": [
				"root",
				"model",
				"key"
			],
			"props": {
				"root": {
					"name": "root",
					"type": "unknown",
					"parent": "EuiThemeSystem"
				},
				"model": {
					"name": "model",
					"type": "unknown",
					"parent": "EuiThemeSystem"
				},
				"key": {
					"name": "key",
					"type": "string",
					"parent": "EuiThemeSystem"
				}
			},
			"relativePath": "src/services/theme/utils.ts"
		},
		"ElasticEui_getOn": {
			"id": "ElasticEui_getOn",
			"name": "GetOn",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "getOn",
				"lib": "elasticEui"
			},
			"description": "Returns a value at a given path on an object. If colorMode is provided, will scope the value to the appropriate color mode key (LIGHT\\DARK)",
			"props": {},
			"relativePath": "src/services/theme/utils.ts"
		},
		"ElasticEui_mergeDeep": {
			"id": "ElasticEui_mergeDeep",
			"name": "MergeDeep",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "mergeDeep",
				"lib": "elasticEui"
			},
			"description": "Deeply merges two objects, using source values whenever possible.",
			"props": {},
			"relativePath": "src/services/theme/utils.ts"
		},
		"ElasticEui_setOn": {
			"id": "ElasticEui_setOn",
			"name": "SetOn",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "setOn",
				"lib": "elasticEui"
			},
			"description": "Sets a value at a given path on an object.",
			"props": {},
			"relativePath": "src/services/theme/utils.ts"
		},
		"ElasticEui_Computed": {
			"id": "ElasticEui_Computed",
			"name": "Computed",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "Computed",
				"lib": "elasticEui"
			},
			"description": "Creates a class to store the computer method and its eventual parameters. Allows for on-demand computation with up-to-date parameters via getValue method.",
			"props": {},
			"relativePath": "src/services/theme/utils.ts"
		},
		"ElasticEui_COLOR_MODES_STANDARD": {
			"id": "ElasticEui_COLOR_MODES_STANDARD",
			"name": "ColorModesStandard",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "COLOR_MODES_STANDARD",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/services/theme/types.ts"
		},
		"ElasticEui_sizeToPixel": {
			"id": "ElasticEui_sizeToPixel",
			"name": "SizeToPixel",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "sizeToPixel",
				"lib": "elasticEui"
			},
			"description": "Calculates the px value based on a scale multiplier",
			"props": {},
			"relativePath": "src/services/theme/size.ts"
		},
		"ElasticEui_EuiPropTypes": {
			"id": "ElasticEui_EuiPropTypes",
			"name": "EuiPropTypes",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiPropTypes",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/utils/prop_types/index.ts"
		},
		"ElasticEui_IS_JEST_ENVIRONMENT": {
			"id": "ElasticEui_IS_JEST_ENVIRONMENT",
			"name": "IsJestEnvironment",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "IS_JEST_ENVIRONMENT",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/utils/is_jest.ts"
		},
		"ElasticEui_EUI_THEMES": {
			"id": "ElasticEui_EUI_THEMES",
			"name": "EuiThemes",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EUI_THEMES",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/themes/themes.ts"
		},
		"ElasticEui_isDefaultTheme": {
			"id": "ElasticEui_isDefaultTheme",
			"name": "IsDefaultTheme",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "isDefaultTheme",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/themes/themes.ts"
		},
		"ElasticEui_AMSTERDAM_NAME_KEY": {
			"id": "ElasticEui_AMSTERDAM_NAME_KEY",
			"name": "AmsterdamNameKey",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "AMSTERDAM_NAME_KEY",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/themes/amsterdam/theme.ts"
		},
		"ElasticEui_EuiThemeAmsterdam": {
			"id": "ElasticEui_EuiThemeAmsterdam",
			"name": "EuiThemeAmsterdam",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiThemeAmsterdam",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/themes/amsterdam/theme.ts"
		},
		"ElasticEui_EuiGlobalStyles": {
			"id": "ElasticEui_EuiGlobalStyles",
			"name": "EuiGlobalStyles",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiGlobalStyles",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/global_styling/reset/global_styles.tsx"
		},
		"ElasticEui_euiFontSizeFromScale": {
			"id": "ElasticEui_euiFontSizeFromScale",
			"name": "EuiFontSizeFromScale",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiFontSizeFromScale",
				"lib": "elasticEui"
			},
			"description": "Calculates the font-size value based on the provided scale key",
			"required": [
				"charAt",
				"charCodeAt",
				"concat",
				"indexOf",
				"lastIndexOf",
				"localeCompare",
				"match",
				"replace",
				"search",
				"slice",
				"split",
				"substring",
				"toLowerCase",
				"toLocaleLowerCase",
				"toUpperCase",
				"toLocaleUpperCase",
				"trim",
				"length",
				"substr",
				"codePointAt",
				"includes",
				"endsWith",
				"normalize",
				"repeat",
				"startsWith",
				"anchor",
				"big",
				"blink",
				"bold",
				"fixed",
				"fontcolor",
				"fontsize",
				"italics",
				"link",
				"small",
				"strike",
				"sub",
				"sup",
				"padStart",
				"padEnd",
				"trimEnd",
				"trimStart",
				"trimLeft",
				"trimRight",
				"matchAll",
				"replaceAll",
				"__@iterator@43"
			],
			"props": {
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of a string.",
					"parent": "String"
				},
				"charAt": {
					"name": "charAt",
					"type": "Event",
					"description": "Returns the character at the specified index.",
					"parent": "String"
				},
				"charCodeAt": {
					"name": "charCodeAt",
					"type": "Event",
					"description": "Returns the Unicode value of the character at the specified location.",
					"parent": "String"
				},
				"concat": {
					"name": "concat",
					"type": "Event",
					"description": "Returns a string that contains the concatenation of two or more strings.",
					"parent": "String"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the position of the first occurrence of a substring.",
					"parent": "String"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the last occurrence of a substring in the string.",
					"parent": "String"
				},
				"localeCompare": {
					"name": "localeCompare",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Determines whether two strings are equivalent in the current locale. Determines whether two strings are equivalent in the current or specified locale.",
					"parent": "String"
				},
				"match": {
					"name": "match",
					"type": "unknown",
					"description": "Matches a string with a regular expression, and returns an array containing the results of that search. Matches a string or an object that supports being matched against, and returns an array containing the results of that search, or null if no matches are found.",
					"parent": "String"
				},
				"replace": {
					"name": "replace",
					"description": "Replaces text in a string, using a regular expression or search string. Replaces first match with string or all matches with RegExp. Replaces text in a string, using an object that supports replacement within a string.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "String"
				},
				"search": {
					"name": "search",
					"type": "unknown",
					"description": "Finds the first substring match in a regular expression search.",
					"parent": "String"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a section of a string.",
					"parent": "String"
				},
				"split": {
					"name": "split",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Split a string into substrings using the specified separator and return them as an array.",
					"parent": "String"
				},
				"substring": {
					"name": "substring",
					"type": "Event",
					"description": "Returns the substring at the specified location within a String object.",
					"parent": "String"
				},
				"toLowerCase": {
					"name": "toLowerCase",
					"type": "Event",
					"description": "Converts all the alphabetic characters in a string to lowercase.",
					"parent": "String"
				},
				"toLocaleLowerCase": {
					"name": "toLocaleLowerCase",
					"description": "Converts all alphabetic characters to lowercase, taking into account the host environments current locale.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "String"
				},
				"toUpperCase": {
					"name": "toUpperCase",
					"type": "Event",
					"description": "Converts all the alphabetic characters in a string to uppercase.",
					"parent": "String"
				},
				"toLocaleUpperCase": {
					"name": "toLocaleUpperCase",
					"description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environments current locale.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "String"
				},
				"trim": {
					"name": "trim",
					"type": "Event",
					"description": "Removes the leading and trailing white space and line terminator characters from a string.",
					"parent": "String"
				},
				"length": {
					"name": "length",
					"type": "number",
					"description": "Returns the length of a String object.",
					"parent": "String"
				},
				"substr": {
					"name": "substr",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"valueOf": {
					"name": "valueOf",
					"type": "Event",
					"description": "Returns the primitive value of the specified object.",
					"parent": "String"
				},
				"codePointAt": {
					"name": "codePointAt",
					"type": "Event",
					"description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point value of the UTF-16 encoded code point starting at the string element at position pos in the String resulting from converting this object to a String. If there is no element at that position, the result is undefined. If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
					"parent": "String"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Returns true if searchString appears as a substring of the result of converting this object to a String, at one or more positions that are greater than or equal to position; otherwise, returns false.",
					"parent": "String"
				},
				"endsWith": {
					"name": "endsWith",
					"type": "Event",
					"description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at endPosition – length(this). Otherwise returns false.",
					"parent": "String"
				},
				"normalize": {
					"name": "normalize",
					"type": "unknown",
					"description": "Returns the String value result of normalizing the string into the normalization form named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
					"parent": "String"
				},
				"repeat": {
					"name": "repeat",
					"type": "Event",
					"description": "Returns a String value that is made from count copies appended together. If count is 0, the empty string is returned.",
					"parent": "String"
				},
				"startsWith": {
					"name": "startsWith",
					"type": "Event",
					"description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at position. Otherwise returns false.",
					"parent": "String"
				},
				"anchor": {
					"name": "anchor",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"big": {
					"name": "big",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"blink": {
					"name": "blink",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"bold": {
					"name": "bold",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fixed": {
					"name": "fixed",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fontcolor": {
					"name": "fontcolor",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fontsize": {
					"name": "fontsize",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"italics": {
					"name": "italics",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"link": {
					"name": "link",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"small": {
					"name": "small",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"strike": {
					"name": "strike",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"sub": {
					"name": "sub",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"sup": {
					"name": "sup",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"padStart": {
					"name": "padStart",
					"type": "Event",
					"description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the start (left) of the current string.",
					"parent": "String"
				},
				"padEnd": {
					"name": "padEnd",
					"type": "Event",
					"description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string.",
					"parent": "String"
				},
				"trimEnd": {
					"name": "trimEnd",
					"type": "Event",
					"description": "Removes the trailing white space and line terminator characters from a string.",
					"parent": "String"
				},
				"trimStart": {
					"name": "trimStart",
					"type": "Event",
					"description": "Removes the leading white space and line terminator characters from a string.",
					"parent": "String"
				},
				"trimLeft": {
					"name": "trimLeft",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility. Use `trimStart` instead",
					"parent": "String"
				},
				"trimRight": {
					"name": "trimRight",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility. Use `trimEnd` instead",
					"parent": "String"
				},
				"matchAll": {
					"name": "matchAll",
					"type": "Event",
					"description": "Matches a string with a regular expression, and returns an iterable of matches containing the results of that search.",
					"parent": "String"
				},
				"replaceAll": {
					"name": "replaceAll",
					"description": "Replace all instances of a substring in a string, using a regular expression or search string.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "String"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "String"
				}
			},
			"relativePath": "src/global_styling/functions/typography.ts"
		},
		"ElasticEui_euiLineHeightFromBaseline": {
			"id": "ElasticEui_euiLineHeightFromBaseline",
			"name": "EuiLineHeightFromBaseline",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiLineHeightFromBaseline",
				"lib": "elasticEui"
			},
			"description": "Calculates the line-height to the closest multiple of the baseline EX: A proper line-height for text is 1.5 times the font-size. If our base font size (euiFontSize) is 16, and our baseline is 4. To ensure the text stays on the baseline, we pass a multiplier to calculate a line-height.",
			"required": [
				"charAt",
				"charCodeAt",
				"concat",
				"indexOf",
				"lastIndexOf",
				"localeCompare",
				"match",
				"replace",
				"search",
				"slice",
				"split",
				"substring",
				"toLowerCase",
				"toLocaleLowerCase",
				"toUpperCase",
				"toLocaleUpperCase",
				"trim",
				"length",
				"substr",
				"codePointAt",
				"includes",
				"endsWith",
				"normalize",
				"repeat",
				"startsWith",
				"anchor",
				"big",
				"blink",
				"bold",
				"fixed",
				"fontcolor",
				"fontsize",
				"italics",
				"link",
				"small",
				"strike",
				"sub",
				"sup",
				"padStart",
				"padEnd",
				"trimEnd",
				"trimStart",
				"trimLeft",
				"trimRight",
				"matchAll",
				"replaceAll",
				"__@iterator@43"
			],
			"props": {
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of a string.",
					"parent": "String"
				},
				"charAt": {
					"name": "charAt",
					"type": "Event",
					"description": "Returns the character at the specified index.",
					"parent": "String"
				},
				"charCodeAt": {
					"name": "charCodeAt",
					"type": "Event",
					"description": "Returns the Unicode value of the character at the specified location.",
					"parent": "String"
				},
				"concat": {
					"name": "concat",
					"type": "Event",
					"description": "Returns a string that contains the concatenation of two or more strings.",
					"parent": "String"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the position of the first occurrence of a substring.",
					"parent": "String"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the last occurrence of a substring in the string.",
					"parent": "String"
				},
				"localeCompare": {
					"name": "localeCompare",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Determines whether two strings are equivalent in the current locale. Determines whether two strings are equivalent in the current or specified locale.",
					"parent": "String"
				},
				"match": {
					"name": "match",
					"type": "unknown",
					"description": "Matches a string with a regular expression, and returns an array containing the results of that search. Matches a string or an object that supports being matched against, and returns an array containing the results of that search, or null if no matches are found.",
					"parent": "String"
				},
				"replace": {
					"name": "replace",
					"description": "Replaces text in a string, using a regular expression or search string. Replaces first match with string or all matches with RegExp. Replaces text in a string, using an object that supports replacement within a string.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "String"
				},
				"search": {
					"name": "search",
					"type": "unknown",
					"description": "Finds the first substring match in a regular expression search.",
					"parent": "String"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a section of a string.",
					"parent": "String"
				},
				"split": {
					"name": "split",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Split a string into substrings using the specified separator and return them as an array.",
					"parent": "String"
				},
				"substring": {
					"name": "substring",
					"type": "Event",
					"description": "Returns the substring at the specified location within a String object.",
					"parent": "String"
				},
				"toLowerCase": {
					"name": "toLowerCase",
					"type": "Event",
					"description": "Converts all the alphabetic characters in a string to lowercase.",
					"parent": "String"
				},
				"toLocaleLowerCase": {
					"name": "toLocaleLowerCase",
					"description": "Converts all alphabetic characters to lowercase, taking into account the host environments current locale.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "String"
				},
				"toUpperCase": {
					"name": "toUpperCase",
					"type": "Event",
					"description": "Converts all the alphabetic characters in a string to uppercase.",
					"parent": "String"
				},
				"toLocaleUpperCase": {
					"name": "toLocaleUpperCase",
					"description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environments current locale.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "String"
				},
				"trim": {
					"name": "trim",
					"type": "Event",
					"description": "Removes the leading and trailing white space and line terminator characters from a string.",
					"parent": "String"
				},
				"length": {
					"name": "length",
					"type": "number",
					"description": "Returns the length of a String object.",
					"parent": "String"
				},
				"substr": {
					"name": "substr",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"valueOf": {
					"name": "valueOf",
					"type": "Event",
					"description": "Returns the primitive value of the specified object.",
					"parent": "String"
				},
				"codePointAt": {
					"name": "codePointAt",
					"type": "Event",
					"description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point value of the UTF-16 encoded code point starting at the string element at position pos in the String resulting from converting this object to a String. If there is no element at that position, the result is undefined. If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
					"parent": "String"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Returns true if searchString appears as a substring of the result of converting this object to a String, at one or more positions that are greater than or equal to position; otherwise, returns false.",
					"parent": "String"
				},
				"endsWith": {
					"name": "endsWith",
					"type": "Event",
					"description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at endPosition – length(this). Otherwise returns false.",
					"parent": "String"
				},
				"normalize": {
					"name": "normalize",
					"type": "unknown",
					"description": "Returns the String value result of normalizing the string into the normalization form named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
					"parent": "String"
				},
				"repeat": {
					"name": "repeat",
					"type": "Event",
					"description": "Returns a String value that is made from count copies appended together. If count is 0, the empty string is returned.",
					"parent": "String"
				},
				"startsWith": {
					"name": "startsWith",
					"type": "Event",
					"description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at position. Otherwise returns false.",
					"parent": "String"
				},
				"anchor": {
					"name": "anchor",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"big": {
					"name": "big",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"blink": {
					"name": "blink",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"bold": {
					"name": "bold",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fixed": {
					"name": "fixed",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fontcolor": {
					"name": "fontcolor",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fontsize": {
					"name": "fontsize",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"italics": {
					"name": "italics",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"link": {
					"name": "link",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"small": {
					"name": "small",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"strike": {
					"name": "strike",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"sub": {
					"name": "sub",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"sup": {
					"name": "sup",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"padStart": {
					"name": "padStart",
					"type": "Event",
					"description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the start (left) of the current string.",
					"parent": "String"
				},
				"padEnd": {
					"name": "padEnd",
					"type": "Event",
					"description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string.",
					"parent": "String"
				},
				"trimEnd": {
					"name": "trimEnd",
					"type": "Event",
					"description": "Removes the trailing white space and line terminator characters from a string.",
					"parent": "String"
				},
				"trimStart": {
					"name": "trimStart",
					"type": "Event",
					"description": "Removes the leading white space and line terminator characters from a string.",
					"parent": "String"
				},
				"trimLeft": {
					"name": "trimLeft",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility. Use `trimStart` instead",
					"parent": "String"
				},
				"trimRight": {
					"name": "trimRight",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility. Use `trimEnd` instead",
					"parent": "String"
				},
				"matchAll": {
					"name": "matchAll",
					"type": "Event",
					"description": "Matches a string with a regular expression, and returns an iterable of matches containing the results of that search.",
					"parent": "String"
				},
				"replaceAll": {
					"name": "replaceAll",
					"description": "Replace all instances of a substring in a string, using a regular expression or search string.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "String"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "String"
				}
			},
			"relativePath": "src/global_styling/functions/typography.ts"
		},
		"ElasticEui_EuiThemeFontSizeMeasurements": {
			"id": "ElasticEui_EuiThemeFontSizeMeasurements",
			"name": "EuiThemeFontSizeMeasurements",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiThemeFontSizeMeasurements",
				"lib": "elasticEui"
			},
			"description": "Font units of measure",
			"props": {},
			"relativePath": "src/global_styling/variables/typography.ts"
		},
		"ElasticEui_EuiThemeFontScales": {
			"id": "ElasticEui_EuiThemeFontScales",
			"name": "EuiThemeFontScales",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiThemeFontScales",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/global_styling/variables/typography.ts"
		},
		"ElasticEui_EuiThemeFontWeights": {
			"id": "ElasticEui_EuiThemeFontWeights",
			"name": "EuiThemeFontWeights",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "EuiThemeFontWeights",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/global_styling/variables/typography.ts"
		},
		"ElasticEui_SHADOW_SIZE": {
			"id": "ElasticEui_SHADOW_SIZE",
			"name": "ShadowSize",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "SHADOW_SIZE",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/global_styling/variables/shadow.ts"
		},
		"ElasticEui__EuiShadowSizesDescriptions": {
			"id": "ElasticEui__EuiShadowSizesDescriptions",
			"name": "EuiShadowSizesDescriptions",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "_EuiShadowSizesDescriptions",
				"lib": "elasticEui"
			},
			"description": "Shadow t-shirt sizes descriptions",
			"props": {},
			"relativePath": "src/global_styling/variables/shadow.ts"
		},
		"ElasticEui_euiScrollBarStyles": {
			"id": "ElasticEui_euiScrollBarStyles",
			"name": "EuiScrollBarStyles",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiScrollBarStyles",
				"lib": "elasticEui"
			},
			"required": [
				"colors",
				"base",
				"size",
				"font",
				"border",
				"animation",
				"breakpoint",
				"themeName"
			],
			"props": {
				"colors": {
					"name": "colors",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"base": {
					"name": "base",
					"type": "number",
					"parent": "EuiThemeShape"
				},
				"size": {
					"name": "size",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"font": {
					"name": "font",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"border": {
					"name": "border",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"focus": {
					"name": "focus",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"animation": {
					"name": "animation",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"breakpoint": {
					"name": "breakpoint",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"themeName": {
					"name": "themeName",
					"type": "string",
					"parent": "EuiThemeComputed"
				}
			},
			"relativePath": "src/global_styling/mixins/_helpers.ts"
		},
		"ElasticEui_useEuiScrollBar": {
			"id": "ElasticEui_useEuiScrollBar",
			"name": "UseEuiScrollBar",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useEuiScrollBar",
				"lib": "elasticEui"
			},
			"props": {
				"thumbColor": {
					"name": "thumbColor",
					"type": "string",
					"enum": [
						"inherit",
						"-moz-initial",
						"initial",
						"revert",
						"unset",
						"aliceblue",
						"antiquewhite",
						"aqua",
						"aquamarine",
						"azure",
						"beige",
						"bisque",
						"black",
						"blanchedalmond",
						"blue",
						"blueviolet",
						"brown",
						"burlywood",
						"cadetblue",
						"chartreuse",
						"chocolate",
						"coral",
						"cornflowerblue",
						"cornsilk",
						"crimson",
						"cyan",
						"darkblue",
						"darkcyan",
						"darkgoldenrod",
						"darkgray",
						"darkgreen",
						"darkgrey",
						"darkkhaki",
						"darkmagenta",
						"darkolivegreen",
						"darkorange",
						"darkorchid",
						"darkred",
						"darksalmon",
						"darkseagreen",
						"darkslateblue",
						"darkslategray",
						"darkslategrey",
						"darkturquoise",
						"darkviolet",
						"deeppink",
						"deepskyblue",
						"dimgray",
						"dimgrey",
						"dodgerblue",
						"firebrick",
						"floralwhite",
						"forestgreen",
						"fuchsia",
						"gainsboro",
						"ghostwhite",
						"gold",
						"goldenrod",
						"gray",
						"green",
						"greenyellow",
						"grey",
						"honeydew",
						"hotpink",
						"indianred",
						"indigo",
						"ivory",
						"khaki",
						"lavender",
						"lavenderblush",
						"lawngreen",
						"lemonchiffon",
						"lightblue",
						"lightcoral",
						"lightcyan",
						"lightgoldenrodyellow",
						"lightgray",
						"lightgreen",
						"lightgrey",
						"lightpink",
						"lightsalmon",
						"lightseagreen",
						"lightskyblue",
						"lightslategray",
						"lightslategrey",
						"lightsteelblue",
						"lightyellow",
						"lime",
						"limegreen",
						"linen",
						"magenta",
						"maroon",
						"mediumaquamarine",
						"mediumblue",
						"mediumorchid",
						"mediumpurple",
						"mediumseagreen",
						"mediumslateblue",
						"mediumspringgreen",
						"mediumturquoise",
						"mediumvioletred",
						"midnightblue",
						"mintcream",
						"mistyrose",
						"moccasin",
						"navajowhite",
						"navy",
						"oldlace",
						"olive",
						"olivedrab",
						"orange",
						"orangered",
						"orchid",
						"palegoldenrod",
						"palegreen",
						"paleturquoise",
						"palevioletred",
						"papayawhip",
						"peachpuff",
						"peru",
						"pink",
						"plum",
						"powderblue",
						"purple",
						"rebeccapurple",
						"red",
						"rosybrown",
						"royalblue",
						"saddlebrown",
						"salmon",
						"sandybrown",
						"seagreen",
						"seashell",
						"sienna",
						"silver",
						"skyblue",
						"slateblue",
						"slategray",
						"slategrey",
						"snow",
						"springgreen",
						"steelblue",
						"tan",
						"teal",
						"thistle",
						"tomato",
						"transparent",
						"turquoise",
						"violet",
						"wheat",
						"white",
						"whitesmoke",
						"yellow",
						"yellowgreen",
						"ActiveBorder",
						"ActiveCaption",
						"AppWorkspace",
						"Background",
						"ButtonFace",
						"ButtonHighlight",
						"ButtonShadow",
						"ButtonText",
						"CaptionText",
						"GrayText",
						"Highlight",
						"HighlightText",
						"InactiveBorder",
						"InactiveCaption",
						"InactiveCaptionText",
						"InfoBackground",
						"InfoText",
						"Menu",
						"MenuText",
						"Scrollbar",
						"ThreeDDarkShadow",
						"ThreeDFace",
						"ThreeDHighlight",
						"ThreeDLightShadow",
						"ThreeDShadow",
						"Window",
						"WindowFrame",
						"WindowText",
						"currentcolor"
					],
					"parent": "EuiScrollBarStyles"
				},
				"trackColor": {
					"name": "trackColor",
					"type": "string",
					"enum": [
						"inherit",
						"-moz-initial",
						"initial",
						"revert",
						"unset",
						"aliceblue",
						"antiquewhite",
						"aqua",
						"aquamarine",
						"azure",
						"beige",
						"bisque",
						"black",
						"blanchedalmond",
						"blue",
						"blueviolet",
						"brown",
						"burlywood",
						"cadetblue",
						"chartreuse",
						"chocolate",
						"coral",
						"cornflowerblue",
						"cornsilk",
						"crimson",
						"cyan",
						"darkblue",
						"darkcyan",
						"darkgoldenrod",
						"darkgray",
						"darkgreen",
						"darkgrey",
						"darkkhaki",
						"darkmagenta",
						"darkolivegreen",
						"darkorange",
						"darkorchid",
						"darkred",
						"darksalmon",
						"darkseagreen",
						"darkslateblue",
						"darkslategray",
						"darkslategrey",
						"darkturquoise",
						"darkviolet",
						"deeppink",
						"deepskyblue",
						"dimgray",
						"dimgrey",
						"dodgerblue",
						"firebrick",
						"floralwhite",
						"forestgreen",
						"fuchsia",
						"gainsboro",
						"ghostwhite",
						"gold",
						"goldenrod",
						"gray",
						"green",
						"greenyellow",
						"grey",
						"honeydew",
						"hotpink",
						"indianred",
						"indigo",
						"ivory",
						"khaki",
						"lavender",
						"lavenderblush",
						"lawngreen",
						"lemonchiffon",
						"lightblue",
						"lightcoral",
						"lightcyan",
						"lightgoldenrodyellow",
						"lightgray",
						"lightgreen",
						"lightgrey",
						"lightpink",
						"lightsalmon",
						"lightseagreen",
						"lightskyblue",
						"lightslategray",
						"lightslategrey",
						"lightsteelblue",
						"lightyellow",
						"lime",
						"limegreen",
						"linen",
						"magenta",
						"maroon",
						"mediumaquamarine",
						"mediumblue",
						"mediumorchid",
						"mediumpurple",
						"mediumseagreen",
						"mediumslateblue",
						"mediumspringgreen",
						"mediumturquoise",
						"mediumvioletred",
						"midnightblue",
						"mintcream",
						"mistyrose",
						"moccasin",
						"navajowhite",
						"navy",
						"oldlace",
						"olive",
						"olivedrab",
						"orange",
						"orangered",
						"orchid",
						"palegoldenrod",
						"palegreen",
						"paleturquoise",
						"palevioletred",
						"papayawhip",
						"peachpuff",
						"peru",
						"pink",
						"plum",
						"powderblue",
						"purple",
						"rebeccapurple",
						"red",
						"rosybrown",
						"royalblue",
						"saddlebrown",
						"salmon",
						"sandybrown",
						"seagreen",
						"seashell",
						"sienna",
						"silver",
						"skyblue",
						"slateblue",
						"slategray",
						"slategrey",
						"snow",
						"springgreen",
						"steelblue",
						"tan",
						"teal",
						"thistle",
						"tomato",
						"transparent",
						"turquoise",
						"violet",
						"wheat",
						"white",
						"whitesmoke",
						"yellow",
						"yellowgreen",
						"ActiveBorder",
						"ActiveCaption",
						"AppWorkspace",
						"Background",
						"ButtonFace",
						"ButtonHighlight",
						"ButtonShadow",
						"ButtonText",
						"CaptionText",
						"GrayText",
						"Highlight",
						"HighlightText",
						"InactiveBorder",
						"InactiveCaption",
						"InactiveCaptionText",
						"InfoBackground",
						"InfoText",
						"Menu",
						"MenuText",
						"Scrollbar",
						"ThreeDDarkShadow",
						"ThreeDFace",
						"ThreeDHighlight",
						"ThreeDLightShadow",
						"ThreeDShadow",
						"Window",
						"WindowFrame",
						"WindowText",
						"currentcolor"
					],
					"parent": "EuiScrollBarStyles"
				},
				"width": {
					"name": "width",
					"type": "string",
					"enum": [
						"none",
						"inherit",
						"-moz-initial",
						"initial",
						"revert",
						"unset",
						"auto",
						"thin"
					],
					"description": "Defaults to thin. Use auto only for large page scrollbars",
					"parent": "EuiScrollBarStyles"
				},
				"size": {
					"name": "size",
					"type": "string",
					"description": "Overall width (height for horizontal scrollbars)",
					"parent": "EuiScrollBarStyles"
				},
				"corner": {
					"name": "corner",
					"type": "string",
					"description": "Corner sizes are usually determined by width and are used as an inset border and therefore a smaller corner size means a larger thumb",
					"parent": "EuiScrollBarStyles"
				}
			},
			"relativePath": "src/global_styling/mixins/_helpers.ts"
		},
		"ElasticEui_euiYScroll": {
			"id": "ElasticEui_euiYScroll",
			"name": "EuiYScroll",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiYScroll",
				"lib": "elasticEui"
			},
			"description": "1. Focus rings shouldnt be visible on scrollable regions, but a11y requires them to be focusable. Browsers supporting :focus-visible will still show outline on keyboard focus only. Others like Safari, wont show anything at all.",
			"required": [
				"colors",
				"base",
				"size",
				"font",
				"border",
				"animation",
				"breakpoint",
				"themeName"
			],
			"props": {
				"colors": {
					"name": "colors",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"base": {
					"name": "base",
					"type": "number",
					"parent": "EuiThemeShape"
				},
				"size": {
					"name": "size",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"font": {
					"name": "font",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"border": {
					"name": "border",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"focus": {
					"name": "focus",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"animation": {
					"name": "animation",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"breakpoint": {
					"name": "breakpoint",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"themeName": {
					"name": "themeName",
					"type": "string",
					"parent": "EuiThemeComputed"
				}
			},
			"relativePath": "src/global_styling/mixins/_helpers.ts"
		},
		"ElasticEui_useEuiYScroll": {
			"id": "ElasticEui_useEuiYScroll",
			"name": "UseEuiYScroll",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useEuiYScroll",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/global_styling/mixins/_helpers.ts"
		},
		"ElasticEui_euiYScrollWithShadows": {
			"id": "ElasticEui_euiYScrollWithShadows",
			"name": "EuiYScrollWithShadows",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiYScrollWithShadows",
				"lib": "elasticEui"
			},
			"required": [
				"colors",
				"base",
				"size",
				"font",
				"border",
				"animation",
				"breakpoint",
				"themeName"
			],
			"props": {
				"colors": {
					"name": "colors",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"base": {
					"name": "base",
					"type": "number",
					"parent": "EuiThemeShape"
				},
				"size": {
					"name": "size",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"font": {
					"name": "font",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"border": {
					"name": "border",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"focus": {
					"name": "focus",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"animation": {
					"name": "animation",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"breakpoint": {
					"name": "breakpoint",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"themeName": {
					"name": "themeName",
					"type": "string",
					"parent": "EuiThemeComputed"
				}
			},
			"relativePath": "src/global_styling/mixins/_helpers.ts"
		},
		"ElasticEui_useEuiYScrollWithShadows": {
			"id": "ElasticEui_useEuiYScrollWithShadows",
			"name": "UseEuiYScrollWithShadows",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useEuiYScrollWithShadows",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/global_styling/mixins/_helpers.ts"
		},
		"ElasticEui_euiXScroll": {
			"id": "ElasticEui_euiXScroll",
			"name": "EuiXScroll",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiXScroll",
				"lib": "elasticEui"
			},
			"required": [
				"colors",
				"base",
				"size",
				"font",
				"border",
				"animation",
				"breakpoint",
				"themeName"
			],
			"props": {
				"colors": {
					"name": "colors",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"base": {
					"name": "base",
					"type": "number",
					"parent": "EuiThemeShape"
				},
				"size": {
					"name": "size",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"font": {
					"name": "font",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"border": {
					"name": "border",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"focus": {
					"name": "focus",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"animation": {
					"name": "animation",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"breakpoint": {
					"name": "breakpoint",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"themeName": {
					"name": "themeName",
					"type": "string",
					"parent": "EuiThemeComputed"
				}
			},
			"relativePath": "src/global_styling/mixins/_helpers.ts"
		},
		"ElasticEui_useEuiXScroll": {
			"id": "ElasticEui_useEuiXScroll",
			"name": "UseEuiXScroll",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useEuiXScroll",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/global_styling/mixins/_helpers.ts"
		},
		"ElasticEui_euiXScrollWithShadows": {
			"id": "ElasticEui_euiXScrollWithShadows",
			"name": "EuiXScrollWithShadows",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiXScrollWithShadows",
				"lib": "elasticEui"
			},
			"required": [
				"colors",
				"base",
				"size",
				"font",
				"border",
				"animation",
				"breakpoint",
				"themeName"
			],
			"props": {
				"colors": {
					"name": "colors",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"base": {
					"name": "base",
					"type": "number",
					"parent": "EuiThemeShape"
				},
				"size": {
					"name": "size",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"font": {
					"name": "font",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"border": {
					"name": "border",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"focus": {
					"name": "focus",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"animation": {
					"name": "animation",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"breakpoint": {
					"name": "breakpoint",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"themeName": {
					"name": "themeName",
					"type": "string",
					"parent": "EuiThemeComputed"
				}
			},
			"relativePath": "src/global_styling/mixins/_helpers.ts"
		},
		"ElasticEui_useEuiXScrollWithShadows": {
			"id": "ElasticEui_useEuiXScrollWithShadows",
			"name": "UseEuiXScrollWithShadows",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useEuiXScrollWithShadows",
				"lib": "elasticEui"
			},
			"props": {},
			"relativePath": "src/global_styling/mixins/_helpers.ts"
		},
		"ElasticEui_euiOverflowScroll": {
			"id": "ElasticEui_euiOverflowScroll",
			"name": "EuiOverflowScroll",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiOverflowScroll",
				"lib": "elasticEui"
			},
			"required": [
				"colors",
				"base",
				"size",
				"font",
				"border",
				"animation",
				"breakpoint",
				"themeName"
			],
			"props": {
				"colors": {
					"name": "colors",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"base": {
					"name": "base",
					"type": "number",
					"parent": "EuiThemeShape"
				},
				"size": {
					"name": "size",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"font": {
					"name": "font",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"border": {
					"name": "border",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"focus": {
					"name": "focus",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"animation": {
					"name": "animation",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"breakpoint": {
					"name": "breakpoint",
					"type": "unknown",
					"parent": "EuiThemeShape"
				},
				"themeName": {
					"name": "themeName",
					"type": "string",
					"parent": "EuiThemeComputed"
				}
			},
			"relativePath": "src/global_styling/mixins/_helpers.ts"
		},
		"ElasticEui_useEuiOverflowScroll": {
			"id": "ElasticEui_useEuiOverflowScroll",
			"name": "UseEuiOverflowScroll",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useEuiOverflowScroll",
				"lib": "elasticEui"
			},
			"required": [
				"charAt",
				"charCodeAt",
				"concat",
				"indexOf",
				"lastIndexOf",
				"localeCompare",
				"match",
				"replace",
				"search",
				"slice",
				"split",
				"substring",
				"toLowerCase",
				"toLocaleLowerCase",
				"toUpperCase",
				"toLocaleUpperCase",
				"trim",
				"length",
				"substr",
				"codePointAt",
				"includes",
				"endsWith",
				"normalize",
				"repeat",
				"startsWith",
				"anchor",
				"big",
				"blink",
				"bold",
				"fixed",
				"fontcolor",
				"fontsize",
				"italics",
				"link",
				"small",
				"strike",
				"sub",
				"sup",
				"padStart",
				"padEnd",
				"trimEnd",
				"trimStart",
				"trimLeft",
				"trimRight",
				"matchAll",
				"replaceAll",
				"__@iterator@43"
			],
			"props": {
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of a string.",
					"parent": "String"
				},
				"charAt": {
					"name": "charAt",
					"type": "Event",
					"description": "Returns the character at the specified index.",
					"parent": "String"
				},
				"charCodeAt": {
					"name": "charCodeAt",
					"type": "Event",
					"description": "Returns the Unicode value of the character at the specified location.",
					"parent": "String"
				},
				"concat": {
					"name": "concat",
					"type": "Event",
					"description": "Returns a string that contains the concatenation of two or more strings.",
					"parent": "String"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the position of the first occurrence of a substring.",
					"parent": "String"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the last occurrence of a substring in the string.",
					"parent": "String"
				},
				"localeCompare": {
					"name": "localeCompare",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Determines whether two strings are equivalent in the current locale. Determines whether two strings are equivalent in the current or specified locale.",
					"parent": "String"
				},
				"match": {
					"name": "match",
					"type": "unknown",
					"description": "Matches a string with a regular expression, and returns an array containing the results of that search. Matches a string or an object that supports being matched against, and returns an array containing the results of that search, or null if no matches are found.",
					"parent": "String"
				},
				"replace": {
					"name": "replace",
					"description": "Replaces text in a string, using a regular expression or search string. Replaces first match with string or all matches with RegExp. Replaces text in a string, using an object that supports replacement within a string.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "String"
				},
				"search": {
					"name": "search",
					"type": "unknown",
					"description": "Finds the first substring match in a regular expression search.",
					"parent": "String"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a section of a string.",
					"parent": "String"
				},
				"split": {
					"name": "split",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Split a string into substrings using the specified separator and return them as an array.",
					"parent": "String"
				},
				"substring": {
					"name": "substring",
					"type": "Event",
					"description": "Returns the substring at the specified location within a String object.",
					"parent": "String"
				},
				"toLowerCase": {
					"name": "toLowerCase",
					"type": "Event",
					"description": "Converts all the alphabetic characters in a string to lowercase.",
					"parent": "String"
				},
				"toLocaleLowerCase": {
					"name": "toLocaleLowerCase",
					"description": "Converts all alphabetic characters to lowercase, taking into account the host environments current locale.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "String"
				},
				"toUpperCase": {
					"name": "toUpperCase",
					"type": "Event",
					"description": "Converts all the alphabetic characters in a string to uppercase.",
					"parent": "String"
				},
				"toLocaleUpperCase": {
					"name": "toLocaleUpperCase",
					"description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environments current locale.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "String"
				},
				"trim": {
					"name": "trim",
					"type": "Event",
					"description": "Removes the leading and trailing white space and line terminator characters from a string.",
					"parent": "String"
				},
				"length": {
					"name": "length",
					"type": "number",
					"description": "Returns the length of a String object.",
					"parent": "String"
				},
				"substr": {
					"name": "substr",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"valueOf": {
					"name": "valueOf",
					"type": "Event",
					"description": "Returns the primitive value of the specified object.",
					"parent": "String"
				},
				"codePointAt": {
					"name": "codePointAt",
					"type": "Event",
					"description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point value of the UTF-16 encoded code point starting at the string element at position pos in the String resulting from converting this object to a String. If there is no element at that position, the result is undefined. If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
					"parent": "String"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Returns true if searchString appears as a substring of the result of converting this object to a String, at one or more positions that are greater than or equal to position; otherwise, returns false.",
					"parent": "String"
				},
				"endsWith": {
					"name": "endsWith",
					"type": "Event",
					"description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at endPosition – length(this). Otherwise returns false.",
					"parent": "String"
				},
				"normalize": {
					"name": "normalize",
					"type": "unknown",
					"description": "Returns the String value result of normalizing the string into the normalization form named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
					"parent": "String"
				},
				"repeat": {
					"name": "repeat",
					"type": "Event",
					"description": "Returns a String value that is made from count copies appended together. If count is 0, the empty string is returned.",
					"parent": "String"
				},
				"startsWith": {
					"name": "startsWith",
					"type": "Event",
					"description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at position. Otherwise returns false.",
					"parent": "String"
				},
				"anchor": {
					"name": "anchor",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"big": {
					"name": "big",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"blink": {
					"name": "blink",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"bold": {
					"name": "bold",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fixed": {
					"name": "fixed",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fontcolor": {
					"name": "fontcolor",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fontsize": {
					"name": "fontsize",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"italics": {
					"name": "italics",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"link": {
					"name": "link",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"small": {
					"name": "small",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"strike": {
					"name": "strike",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"sub": {
					"name": "sub",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"sup": {
					"name": "sup",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"padStart": {
					"name": "padStart",
					"type": "Event",
					"description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the start (left) of the current string.",
					"parent": "String"
				},
				"padEnd": {
					"name": "padEnd",
					"type": "Event",
					"description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string.",
					"parent": "String"
				},
				"trimEnd": {
					"name": "trimEnd",
					"type": "Event",
					"description": "Removes the trailing white space and line terminator characters from a string.",
					"parent": "String"
				},
				"trimStart": {
					"name": "trimStart",
					"type": "Event",
					"description": "Removes the leading white space and line terminator characters from a string.",
					"parent": "String"
				},
				"trimLeft": {
					"name": "trimLeft",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility. Use `trimStart` instead",
					"parent": "String"
				},
				"trimRight": {
					"name": "trimRight",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility. Use `trimEnd` instead",
					"parent": "String"
				},
				"matchAll": {
					"name": "matchAll",
					"type": "Event",
					"description": "Matches a string with a regular expression, and returns an iterable of matches containing the results of that search.",
					"parent": "String"
				},
				"replaceAll": {
					"name": "replaceAll",
					"description": "Replace all instances of a substring in a string, using a regular expression or search string.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "String"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "String"
				}
			},
			"relativePath": "src/global_styling/mixins/_helpers.ts"
		},
		"ElasticEui_euiFontSize": {
			"id": "ElasticEui_euiFontSize",
			"name": "EuiFontSize",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "euiFontSize",
				"lib": "elasticEui"
			},
			"description": "Returns font-size and line-height",
			"required": [
				"charAt",
				"charCodeAt",
				"concat",
				"indexOf",
				"lastIndexOf",
				"localeCompare",
				"match",
				"replace",
				"search",
				"slice",
				"split",
				"substring",
				"toLowerCase",
				"toLocaleLowerCase",
				"toUpperCase",
				"toLocaleUpperCase",
				"trim",
				"length",
				"substr",
				"codePointAt",
				"includes",
				"endsWith",
				"normalize",
				"repeat",
				"startsWith",
				"anchor",
				"big",
				"blink",
				"bold",
				"fixed",
				"fontcolor",
				"fontsize",
				"italics",
				"link",
				"small",
				"strike",
				"sub",
				"sup",
				"padStart",
				"padEnd",
				"trimEnd",
				"trimStart",
				"trimLeft",
				"trimRight",
				"matchAll",
				"replaceAll",
				"__@iterator@43"
			],
			"props": {
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of a string.",
					"parent": "String"
				},
				"charAt": {
					"name": "charAt",
					"type": "Event",
					"description": "Returns the character at the specified index.",
					"parent": "String"
				},
				"charCodeAt": {
					"name": "charCodeAt",
					"type": "Event",
					"description": "Returns the Unicode value of the character at the specified location.",
					"parent": "String"
				},
				"concat": {
					"name": "concat",
					"type": "Event",
					"description": "Returns a string that contains the concatenation of two or more strings.",
					"parent": "String"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the position of the first occurrence of a substring.",
					"parent": "String"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the last occurrence of a substring in the string.",
					"parent": "String"
				},
				"localeCompare": {
					"name": "localeCompare",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Determines whether two strings are equivalent in the current locale. Determines whether two strings are equivalent in the current or specified locale.",
					"parent": "String"
				},
				"match": {
					"name": "match",
					"type": "unknown",
					"description": "Matches a string with a regular expression, and returns an array containing the results of that search. Matches a string or an object that supports being matched against, and returns an array containing the results of that search, or null if no matches are found.",
					"parent": "String"
				},
				"replace": {
					"name": "replace",
					"description": "Replaces text in a string, using a regular expression or search string. Replaces first match with string or all matches with RegExp. Replaces text in a string, using an object that supports replacement within a string.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "String"
				},
				"search": {
					"name": "search",
					"type": "unknown",
					"description": "Finds the first substring match in a regular expression search.",
					"parent": "String"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a section of a string.",
					"parent": "String"
				},
				"split": {
					"name": "split",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Split a string into substrings using the specified separator and return them as an array.",
					"parent": "String"
				},
				"substring": {
					"name": "substring",
					"type": "Event",
					"description": "Returns the substring at the specified location within a String object.",
					"parent": "String"
				},
				"toLowerCase": {
					"name": "toLowerCase",
					"type": "Event",
					"description": "Converts all the alphabetic characters in a string to lowercase.",
					"parent": "String"
				},
				"toLocaleLowerCase": {
					"name": "toLocaleLowerCase",
					"description": "Converts all alphabetic characters to lowercase, taking into account the host environments current locale.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "String"
				},
				"toUpperCase": {
					"name": "toUpperCase",
					"type": "Event",
					"description": "Converts all the alphabetic characters in a string to uppercase.",
					"parent": "String"
				},
				"toLocaleUpperCase": {
					"name": "toLocaleUpperCase",
					"description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environments current locale.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "String"
				},
				"trim": {
					"name": "trim",
					"type": "Event",
					"description": "Removes the leading and trailing white space and line terminator characters from a string.",
					"parent": "String"
				},
				"length": {
					"name": "length",
					"type": "number",
					"description": "Returns the length of a String object.",
					"parent": "String"
				},
				"substr": {
					"name": "substr",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"valueOf": {
					"name": "valueOf",
					"type": "Event",
					"description": "Returns the primitive value of the specified object.",
					"parent": "String"
				},
				"codePointAt": {
					"name": "codePointAt",
					"type": "Event",
					"description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point value of the UTF-16 encoded code point starting at the string element at position pos in the String resulting from converting this object to a String. If there is no element at that position, the result is undefined. If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
					"parent": "String"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Returns true if searchString appears as a substring of the result of converting this object to a String, at one or more positions that are greater than or equal to position; otherwise, returns false.",
					"parent": "String"
				},
				"endsWith": {
					"name": "endsWith",
					"type": "Event",
					"description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at endPosition – length(this). Otherwise returns false.",
					"parent": "String"
				},
				"normalize": {
					"name": "normalize",
					"type": "unknown",
					"description": "Returns the String value result of normalizing the string into the normalization form named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
					"parent": "String"
				},
				"repeat": {
					"name": "repeat",
					"type": "Event",
					"description": "Returns a String value that is made from count copies appended together. If count is 0, the empty string is returned.",
					"parent": "String"
				},
				"startsWith": {
					"name": "startsWith",
					"type": "Event",
					"description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at position. Otherwise returns false.",
					"parent": "String"
				},
				"anchor": {
					"name": "anchor",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"big": {
					"name": "big",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"blink": {
					"name": "blink",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"bold": {
					"name": "bold",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fixed": {
					"name": "fixed",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fontcolor": {
					"name": "fontcolor",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fontsize": {
					"name": "fontsize",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"italics": {
					"name": "italics",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"link": {
					"name": "link",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"small": {
					"name": "small",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"strike": {
					"name": "strike",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"sub": {
					"name": "sub",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"sup": {
					"name": "sup",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"padStart": {
					"name": "padStart",
					"type": "Event",
					"description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the start (left) of the current string.",
					"parent": "String"
				},
				"padEnd": {
					"name": "padEnd",
					"type": "Event",
					"description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string.",
					"parent": "String"
				},
				"trimEnd": {
					"name": "trimEnd",
					"type": "Event",
					"description": "Removes the trailing white space and line terminator characters from a string.",
					"parent": "String"
				},
				"trimStart": {
					"name": "trimStart",
					"type": "Event",
					"description": "Removes the leading white space and line terminator characters from a string.",
					"parent": "String"
				},
				"trimLeft": {
					"name": "trimLeft",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility. Use `trimStart` instead",
					"parent": "String"
				},
				"trimRight": {
					"name": "trimRight",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility. Use `trimEnd` instead",
					"parent": "String"
				},
				"matchAll": {
					"name": "matchAll",
					"type": "Event",
					"description": "Matches a string with a regular expression, and returns an iterable of matches containing the results of that search.",
					"parent": "String"
				},
				"replaceAll": {
					"name": "replaceAll",
					"description": "Replace all instances of a substring in a string, using a regular expression or search string.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "String"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "String"
				}
			},
			"relativePath": "src/global_styling/mixins/_typography.ts"
		},
		"ElasticEui_useEuiFontSize": {
			"id": "ElasticEui_useEuiFontSize",
			"name": "UseEuiFontSize",
			"code": {
				"packageName": "@elastic/eui",
				"exportName": "useEuiFontSize",
				"lib": "elasticEui"
			},
			"required": [
				"charAt",
				"charCodeAt",
				"concat",
				"indexOf",
				"lastIndexOf",
				"localeCompare",
				"match",
				"replace",
				"search",
				"slice",
				"split",
				"substring",
				"toLowerCase",
				"toLocaleLowerCase",
				"toUpperCase",
				"toLocaleUpperCase",
				"trim",
				"length",
				"substr",
				"codePointAt",
				"includes",
				"endsWith",
				"normalize",
				"repeat",
				"startsWith",
				"anchor",
				"big",
				"blink",
				"bold",
				"fixed",
				"fontcolor",
				"fontsize",
				"italics",
				"link",
				"small",
				"strike",
				"sub",
				"sup",
				"padStart",
				"padEnd",
				"trimEnd",
				"trimStart",
				"trimLeft",
				"trimRight",
				"matchAll",
				"replaceAll",
				"__@iterator@43"
			],
			"props": {
				"toString": {
					"name": "toString",
					"type": "Event",
					"description": "Returns a string representation of a string.",
					"parent": "String"
				},
				"charAt": {
					"name": "charAt",
					"type": "Event",
					"description": "Returns the character at the specified index.",
					"parent": "String"
				},
				"charCodeAt": {
					"name": "charCodeAt",
					"type": "Event",
					"description": "Returns the Unicode value of the character at the specified location.",
					"parent": "String"
				},
				"concat": {
					"name": "concat",
					"type": "Event",
					"description": "Returns a string that contains the concatenation of two or more strings.",
					"parent": "String"
				},
				"indexOf": {
					"name": "indexOf",
					"type": "Event",
					"description": "Returns the position of the first occurrence of a substring.",
					"parent": "String"
				},
				"lastIndexOf": {
					"name": "lastIndexOf",
					"type": "Event",
					"description": "Returns the last occurrence of a substring in the string.",
					"parent": "String"
				},
				"localeCompare": {
					"name": "localeCompare",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Determines whether two strings are equivalent in the current locale. Determines whether two strings are equivalent in the current or specified locale.",
					"parent": "String"
				},
				"match": {
					"name": "match",
					"type": "unknown",
					"description": "Matches a string with a regular expression, and returns an array containing the results of that search. Matches a string or an object that supports being matched against, and returns an array containing the results of that search, or null if no matches are found.",
					"parent": "String"
				},
				"replace": {
					"name": "replace",
					"description": "Replaces text in a string, using a regular expression or search string. Replaces first match with string or all matches with RegExp. Replaces text in a string, using an object that supports replacement within a string.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "String"
				},
				"search": {
					"name": "search",
					"type": "unknown",
					"description": "Finds the first substring match in a regular expression search.",
					"parent": "String"
				},
				"slice": {
					"name": "slice",
					"type": "Event",
					"description": "Returns a section of a string.",
					"parent": "String"
				},
				"split": {
					"name": "split",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"description": "Split a string into substrings using the specified separator and return them as an array.",
					"parent": "String"
				},
				"substring": {
					"name": "substring",
					"type": "Event",
					"description": "Returns the substring at the specified location within a String object.",
					"parent": "String"
				},
				"toLowerCase": {
					"name": "toLowerCase",
					"type": "Event",
					"description": "Converts all the alphabetic characters in a string to lowercase.",
					"parent": "String"
				},
				"toLocaleLowerCase": {
					"name": "toLocaleLowerCase",
					"description": "Converts all alphabetic characters to lowercase, taking into account the host environments current locale.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "String"
				},
				"toUpperCase": {
					"name": "toUpperCase",
					"type": "Event",
					"description": "Converts all the alphabetic characters in a string to uppercase.",
					"parent": "String"
				},
				"toLocaleUpperCase": {
					"name": "toLocaleUpperCase",
					"description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environments current locale.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"parent": "String"
				},
				"trim": {
					"name": "trim",
					"type": "Event",
					"description": "Removes the leading and trailing white space and line terminator characters from a string.",
					"parent": "String"
				},
				"length": {
					"name": "length",
					"type": "number",
					"description": "Returns the length of a String object.",
					"parent": "String"
				},
				"substr": {
					"name": "substr",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"valueOf": {
					"name": "valueOf",
					"type": "Event",
					"description": "Returns the primitive value of the specified object.",
					"parent": "String"
				},
				"codePointAt": {
					"name": "codePointAt",
					"type": "Event",
					"description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point value of the UTF-16 encoded code point starting at the string element at position pos in the String resulting from converting this object to a String. If there is no element at that position, the result is undefined. If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
					"parent": "String"
				},
				"includes": {
					"name": "includes",
					"type": "Event",
					"description": "Returns true if searchString appears as a substring of the result of converting this object to a String, at one or more positions that are greater than or equal to position; otherwise, returns false.",
					"parent": "String"
				},
				"endsWith": {
					"name": "endsWith",
					"type": "Event",
					"description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at endPosition – length(this). Otherwise returns false.",
					"parent": "String"
				},
				"normalize": {
					"name": "normalize",
					"type": "unknown",
					"description": "Returns the String value result of normalizing the string into the normalization form named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
					"parent": "String"
				},
				"repeat": {
					"name": "repeat",
					"type": "Event",
					"description": "Returns a String value that is made from count copies appended together. If count is 0, the empty string is returned.",
					"parent": "String"
				},
				"startsWith": {
					"name": "startsWith",
					"type": "Event",
					"description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at position. Otherwise returns false.",
					"parent": "String"
				},
				"anchor": {
					"name": "anchor",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"big": {
					"name": "big",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"blink": {
					"name": "blink",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"bold": {
					"name": "bold",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fixed": {
					"name": "fixed",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fontcolor": {
					"name": "fontcolor",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"fontsize": {
					"name": "fontsize",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"italics": {
					"name": "italics",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"link": {
					"name": "link",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"small": {
					"name": "small",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"strike": {
					"name": "strike",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"sub": {
					"name": "sub",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"sup": {
					"name": "sup",
					"type": "Event",
					"description": "A legacy feature for browser compatibility",
					"parent": "String"
				},
				"padStart": {
					"name": "padStart",
					"type": "Event",
					"description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the start (left) of the current string.",
					"parent": "String"
				},
				"padEnd": {
					"name": "padEnd",
					"type": "Event",
					"description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string.",
					"parent": "String"
				},
				"trimEnd": {
					"name": "trimEnd",
					"type": "Event",
					"description": "Removes the trailing white space and line terminator characters from a string.",
					"parent": "String"
				},
				"trimStart": {
					"name": "trimStart",
					"type": "Event",
					"description": "Removes the leading white space and line terminator characters from a string.",
					"parent": "String"
				},
				"trimLeft": {
					"name": "trimLeft",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility. Use `trimStart` instead",
					"parent": "String"
				},
				"trimRight": {
					"name": "trimRight",
					"type": "unknown",
					"description": "A legacy feature for browser compatibility. Use `trimEnd` instead",
					"parent": "String"
				},
				"matchAll": {
					"name": "matchAll",
					"type": "Event",
					"description": "Matches a string with a regular expression, and returns an iterable of matches containing the results of that search.",
					"parent": "String"
				},
				"replaceAll": {
					"name": "replaceAll",
					"description": "Replace all instances of a substring in a string, using a regular expression or search string.",
					"type": "array",
					"items": {
						"type": "unknown"
					},
					"parent": "String"
				},
				"__@iterator@43": {
					"name": "__@iterator@43",
					"type": "Event",
					"description": "Iterator",
					"parent": "String"
				}
			},
			"relativePath": "src/global_styling/mixins/_typography.ts"
		},
		"ElasticEui_EuiSplitPanelOuter": {
			"id": "ElasticEui_EuiSplitPanelOuter",
			"name": "EuiSplitPanelOuter",
			"code": {
				"lib": "elasticEui",
				"packageName": "@elastic/eui",
				"exportName": "EuiSplitPanel.Outer"
			},
			"props": {},
			"relativePath": "src/components/panel/split_panel/split_panel.tsx",
			"parentComponentId": "ElasticEui_EuiSplitPanel",
			"visibility": "restricted"
		},
		"ElasticEui_EuiSplitPanelInner": {
			"id": "ElasticEui_EuiSplitPanelInner",
			"name": "EuiSplitPanelInner",
			"code": {
				"lib": "elasticEui",
				"packageName": "@elastic/eui",
				"exportName": "EuiSplitPanel.Inner"
			},
			"props": {},
			"relativePath": "src/components/panel/split_panel/split_panel.tsx",
			"parentComponentId": "ElasticEui_EuiSplitPanel",
			"visibility": "restricted"
		}
	}
}
